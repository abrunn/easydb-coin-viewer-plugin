/** Coin viewer Lib **/
ez5.CoinLib = function() {
	//Constructor:
	function Animation()
	{
		this.worldTime = 3.14 * 1.5;  //World time in seconds (starts with offset for initial light position at upper left)
		this.lastTimeStamp = (new Date()).getTime();

		//Automatic rotation of the light source:
		this.lightRotationEnabled = true;
		let scaledTime = 0.5 * this.worldTime;
		let rx = Math.sin(scaledTime) * 0.85, ry = Math.cos(scaledTime) * 0.85;
		this.lightVector = new Vector3f(rx, ry, -Math.sqrt(Math.max(0.0, 1.0 - (rx * rx + ry * ry))));

		//Smooth blending of view points:
		this.viewAlterationEnabled = false;
		this.viewAlterationTimeInterval = 1.0;  //Use N seconds for the view alteration animation
		this.viewAlterationTimeStart = (new Date()).getTime();
		this.viewAlterationTransformation = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]; //4x4 Transformation
		this.viewAlterationTransformationStart = this.viewAlterationTransformation.slice();
		this.viewAlterationTransformationEnd = this.viewAlterationTransformation.slice();
		this.viewAlterationLightDirectionStart = [0.57, -0.57, -0.57];
		this.viewAlterationLightDirectionEnd = this.viewAlterationLightDirectionStart.slice();
		this.viewAlterationFlipHorizontal = false;
		this.viewAlterationFlipHorizontalPercent = 0.0;  //Turns from 100.0 to 0.0 when flipping object
		this.viewAlterationFlipVertical = false;
		this.viewAlterationFlipVerticalPercent = 0.0;  //Turns from 100.0 to 0.0 when flipping object
		this.viewAlterationScaleGridBlendingFactor = 0.0;
		this.viewAlterationScaleGridBlendIn = false;
		this.viewAlterationScaleGridBlendOut = false;
	}

	//Function enables alteration of view point:
	Animation.prototype.enableViewAlteration = function(currMatTransform, destinationMatTransform, currLightDir, destinationLightDir)
	{
		this.viewAlterationEnabled = true;
		this.viewAlterationTimeStart = (new Date()).getTime();
		this.viewAlterationTransformationStart = currMatTransform.slice();
		this.viewAlterationTransformationEnd = destinationMatTransform.slice();
		this.viewAlterationTransformation = this.viewAlterationTransformationStart.slice();
		this.lightRotationEnabled = false;
		this.viewAlterationLightDirectionStart = currLightDir.slice();
		this.viewAlterationLightDirectionEnd = destinationLightDir.slice();
	}

	//Function returns true, if animation is currently running and can not be interrupted by user:
	Animation.prototype.isRunningAndNotInterruptible = function()
	{
		return this.viewAlterationFlipHorizontal || this.viewAlterationFlipVertical || this.viewAlterationScaleGridBlendIn || this.viewAlterationScaleGridBlendOut;
	}

	//Function updates values for animation:
	Animation.prototype.update = function()
	{
		//Compute time step and new world time:
		let currTime = (new Date()).getTime();
		let timeStep = (currTime - this.lastTimeStamp) * 0.001;  //seconds
		this.worldTime += timeStep;
		this.lastTimeStamp = currTime;

		//Rotate light if enabled:
		if(this.lightRotationEnabled)
		{
			let scaledTime = 0.5 *  this.worldTime;
			let rx = Math.sin(scaledTime) * 0.85, ry = Math.cos(scaledTime) * 0.85;
			this.lightVector.data[0] = rx;
			this.lightVector.data[1] = ry;
			this.lightVector.data[2] = -Math.sqrt(Math.max(0.0, 1.0 - (rx * rx + ry * ry)));
		}

		//Transform view:
		if(this.viewAlterationEnabled)
		{
			//Elapsed seconds since alteration start:
			let elapsedSeconds = ((new Date()).getTime() - this.viewAlterationTimeStart) * 0.001;
			let alterationFinished = elapsedSeconds >= this.viewAlterationTimeInterval;
			//Finished:
			if(alterationFinished)
			{
				this.viewAlterationTransformation = this.viewAlterationTransformationEnd.slice();
				this.lightVector.data = this.viewAlterationLightDirectionEnd.slice();
				this.viewAlterationFlipHorizontal = false;
				this.viewAlterationFlipHorizontalPercent = 0.0;
				this.viewAlterationFlipVertical = false;
				this.viewAlterationFlipVerticalPercent = 0.0;
				if(this.viewAlterationScaleGridBlendIn)
					this.viewAlterationScaleGridBlendingFactor = 1.0;
				this.viewAlterationScaleGridBlendIn = false;
				if(this.viewAlterationScaleGridBlendOut)
					this.viewAlterationScaleGridBlendingFactor = 0.0;
				this.viewAlterationScaleGridBlendOut = false;
				this.viewAlterationEnabled = false;  //stop interpolation
			}
			//Interpolate transformation, blending, ...:
			else
			{
				//Compute blend factor:
				let blendFactor = 1.0 - (elapsedSeconds / this.viewAlterationTimeInterval);
				blendFactor = (Math.sin((1.0 - blendFactor) * Math.PI + Math.PI / 2.0) + 1.0) * 0.5; //use sinus to have a smooth acceleration and slowdown of the movement
				let invBlendFactor = 1.0 - blendFactor;  //0.0 -> 1.0
				//Apply blending:
				for (let n = 0; n < 16; ++n)
					this.viewAlterationTransformation[n] = blendFactor * this.viewAlterationTransformationStart[n] + invBlendFactor * this.viewAlterationTransformationEnd[n];
				let lx = blendFactor * this.viewAlterationLightDirectionStart[0] + invBlendFactor * this.viewAlterationLightDirectionEnd[0];
				let ly = blendFactor * this.viewAlterationLightDirectionStart[1] + invBlendFactor * this.viewAlterationLightDirectionEnd[1];
				this.lightVector.data = [lx, ly, -Math.sqrt(Math.max(0.0, 1.0 - (lx * lx + ly * ly)))];
				//Compute flip percentage:
				if(this.viewAlterationFlipHorizontal)
					this.viewAlterationFlipHorizontalPercent = 100.0 - 100.0 * Math.sin(Math.PI * 0.5 * (elapsedSeconds / this.viewAlterationTimeInterval)); //use sinus for smooth acceleration/slowdown
				if(this.viewAlterationFlipVertical)
					this.viewAlterationFlipVerticalPercent = 100.0 - 100.0 * Math.sin(Math.PI * 0.5 * (elapsedSeconds / this.viewAlterationTimeInterval));
				//Blending of scale grid:
				if(this.viewAlterationScaleGridBlendIn)
					this.viewAlterationScaleGridBlendingFactor = elapsedSeconds / this.viewAlterationTimeInterval;
				if(this.viewAlterationScaleGridBlendOut)
					this.viewAlterationScaleGridBlendingFactor = 1.0 - Math.max(0.0, elapsedSeconds / this.viewAlterationTimeInterval);
			}
		}
	}
	//Constructor:
	function BackgroundMapGenerator(glContext)
	{
	}

	//Function processes the generation of the background map (Ratio of background to foreground in local neighborhood for each pixel):
	BackgroundMapGenerator.prototype.computeBackgroundMapData = function(normalImage)
	{
		let texWidth = normalImage.width, texHeight = normalImage.height;
		let texData = new Uint8Array(texWidth * texHeight);

		var canvas = document.createElement('canvas');
		canvas.width = texWidth;
		canvas.height = texHeight;
		var context = canvas.getContext('2d');
		context.drawImage(normalImage, 0, 0);
		let imgData = context.getImageData(0, 0, texWidth, texHeight).data;

		let GAUSS_HSIZE = 2; //same as in shader
		for(let iy = 0; iy < texHeight; ++iy)
		{
			for(let ix = 0; ix < texWidth; ++ix)
			{
				let nBackground = 0.0;
				let nSamples = 0;
				for(let gy = -GAUSS_HSIZE; gy <=GAUSS_HSIZE; ++gy)
					for(let gx = -GAUSS_HSIZE; gx <=GAUSS_HSIZE; ++gx)
					{
						let sampleX = Math.max(0, Math.min(ix + gx, texWidth - 1));
						let sampleY = Math.max(0, Math.min(iy + gy, texHeight - 1));
						let index = (sampleY * texWidth + sampleX) * 4;
						if(imgData[index] == 127 && imgData[index + 1] == 127 && imgData[index + 2] == 127)
							nBackground += 1.0;
						nSamples++;
					}
				texData[iy * texWidth + ix] = Math.round(255.0 * nBackground / nSamples);
			}
		}

		return texData;
	}
	//Constructor:
	function GLShader(glContext, shaderType, shaderSource)
	{
		try
		{
			//No valid context avail:
			if (!glContext)
				throw 'GLContext is not present!';
			let gl = glContext;
			//Load shader:
			this.glID = gl.createShader(shaderType);
			gl.shaderSource(this.glID, shaderSource);
			gl.compileShader(this.glID);
			if (!gl.getShaderParameter(this.glID, gl.COMPILE_STATUS))
			{
				let errMsg = (shaderType == gl.VERTEX_SHADER ? 'Vertex' : 'Fragment') + ' shader (' + shaderSource.length + ' bytes) compilation error: ' +
					gl.getShaderInfoLog(this.glID);
				gl.deleteShader(this.glID);  //NOTE: Delete shader AFTER retrieving info log.
				this.glID = null;
				throw errMsg;
			}
		}
		catch (exception)
		{
			let errMsg = 'GLShader::GLShader(..): Error: ' + exception;
			throw errMsg;
		}
	}
	//Constructor:
	function GLProgram(glContext, vertexShaderSource, fragmentShaderSource)
	{
		try
		{
			//No valid context avail:
			if (!glContext)
				throw 'GLContext is not present!';
			this.glContext = glContext;
			let gl = glContext;
			//Load shaders:
			let vertexShader = new GLShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
			let fragmentShader = new GLShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);
			//Load shader program:
			this.glID = gl.createProgram();
			gl.attachShader(this.glID, vertexShader.glID);
			gl.attachShader(this.glID, fragmentShader.glID);
			gl.linkProgram(this.glID);
			if (!gl.getProgramParameter(this.glID, gl.LINK_STATUS))
			{
				this.glID = null;
				throw ('Shader program error: ' + gl.getProgramInfoLog(this.glID));
			}
		}
		catch (exception)
		{
			let errMsg = 'GLProgram::GLProgram(..): Error: ' + exception;
			throw errMsg;
		}
	}

	//Function binds program:
	GLProgram.prototype.bind = function ()
	{
		if (typeof this.glID !== 'undefined' && this.glID)
			this.glContext.useProgram(this.glID);
	}
	//Constructor:
	function GLTexture(glContext, imageWidth, imageHeight, imageData, glTarget, glInternalFormat, glFormat, glTexMinFilter, glTexMagFilter, glWrapS, glWrapT)
	{
		try
		{
			//No valid context avail:
			if (!glContext)
				throw 'GLContext is not present!';
			this.glContext = glContext;
			let gl = glContext;
			//Create texture:
			this.glID = gl.createTexture();
			this.glTarget = glTarget;
			this.glFormat = glFormat;
			gl.bindTexture(this.glTarget, this.glID);
			//Upload data:
			if (glTarget == gl.TEXTURE_2D)
			{
				gl.texImage2D(this.glTarget, 0, glInternalFormat, imageWidth, imageHeight, 0, glFormat, gl.UNSIGNED_BYTE, imageData);
			}
			else if (glTarget == gl.TEXTURE_CUBE_MAP)
			{
				let oldAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);
				gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
				gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, glInternalFormat, imageData[0], imageData[1], 0, glFormat, gl.UNSIGNED_BYTE, imageData[2]);
				gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, glInternalFormat, imageData[0], imageData[1], 0, glFormat, gl.UNSIGNED_BYTE, imageData[3]);
				gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, glInternalFormat, imageData[0], imageData[1], 0, glFormat, gl.UNSIGNED_BYTE, imageData[4]);
				gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, glInternalFormat, imageData[0], imageData[1], 0, glFormat, gl.UNSIGNED_BYTE, imageData[5]);
				gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, glInternalFormat, imageData[0], imageData[1], 0, glFormat, gl.UNSIGNED_BYTE, imageData[6]);
				gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, glInternalFormat, imageData[0], imageData[1], 0, glFormat, gl.UNSIGNED_BYTE, imageData[7]);
				gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldAlignment);
			}
			else
				throw 'Value for texture target is not supported!';
			//Set filter parameter:
			gl.texParameteri(this.glTarget, gl.TEXTURE_MIN_FILTER, glTexMinFilter); //NOTE: Mipmaps are not supported for NPOT-Textures
			gl.texParameteri(this.glTarget, gl.TEXTURE_MAG_FILTER, glTexMagFilter);
			gl.texParameteri(this.glTarget, gl.TEXTURE_WRAP_S, glWrapS);
			gl.texParameteri(this.glTarget, gl.TEXTURE_WRAP_T, glWrapT);
		}
		catch (exception)
		{
			this.glID = null;
			let errMsg = 'GLTexture::GLTexture(..): Error: ' + exception;
			throw errMsg;
		}
	}

	//Function binds texture:
	GLTexture.prototype.bind = function()
	{
		if (typeof this.glID !== 'undefined' && this.glID)
			this.glContext.bindTexture(this.glTarget, this.glID);
	}

	//Function updates partial part of the texture:
	GLTexture.prototype.updatePartialTexture = function(xOffset, yOffset, image)
	{
		if (typeof this.glID !== 'undefined' && this.glID)
		{
			let gl = this.glContext;
			gl.texSubImage2D(this.glTarget, 0, xOffset, yOffset, this.glFormat, gl.UNSIGNED_BYTE, image);
		}
	}
	//Constructor:
	function GLVBO(glContext)
	{
		try
		{
			//No valid context avail:
			if (!glContext)
				throw 'GLContext is not present!';
			this.glContext = glContext;
			let gl = glContext;
			//Create buffer:
			this.glID = gl.createBuffer();
		}
		catch (exception)
		{
			this.glID = null;
			let errMsg = 'GLVBO::GLVBO(..): Error: ' + exception;
			throw errMsg;
		}
	}

	//Function binds VBO:
	GLVBO.prototype.bind = function()
	{
		if (typeof this.glID !== 'undefined' && this.glID)
			this.glContext.bindBuffer(this.glContext.ARRAY_BUFFER, this.glID);
	}

	//Function updates buffer data:
	GLVBO.prototype.update = function(data)
	{
		if (typeof this.glID !== 'undefined' && this.glID)
		{
			let gl = this.glContext;
			gl.bindBuffer(gl.ARRAY_BUFFER, this.glID);
			gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
		}
	}
	function CubemapGenerator(){}CubemapGenerator.prototype.computeOutdoorCubemap=function(){return[32,32,new Uint8Array([137,160,188,137,159,187,135,158,186,134,157,185,135,157,186,135,158,186,137,159,187,140,162,188,142,163,189,145,165,191,144,164,190,140,160,187,136,158,186,133,155,184,134,155,184,138,159,186,156,172,194,168,181,198,155,170,192,198,203,211,204,207,214,225,224,225,236,234,232,221,221,225,152,168,193,135,155,185,131,153,183,129,151,181,125,149,179,123,148,178,125,148,179,125,149,179,138,161,188,138,160,187,136,159,186,134,158,185,135,157,185,134,158,185,136,159,186,141,162,189,145,166,191,188,197,209,206,211,218,204,210,218,173,185,203,135,157,186,134,156,185,138,158,186,141,161,187,147,165,189,177,187,203,212,213,218,205,208,215,229,228,228,209,212,217,178,188,203,137,158,186,131,153,182,129,152,183,127,150,181,124,148,179,123,147,178,125,149,179,126,150,180,138,161,187,138,161,188,137,160,187,135,159,186,135,158,186,134,158,186,136,160,187,145,165,190,177,189,204,225,227,228,237,237,235,238,238,235,220,224,224,139,161,189,134,157,185,136,158,186,135,157,185,143,162,188,183,192,205,170,182,199,158,173,194,172,183,200,169,180,198,136,157,186,132,154,184,129,152,182,127,151,182,125,149,181,123,147,178,123,148,179,126,150,181,126,150,181,138,162,188,138,162,187,138,162,188,136,160,187,136,160,186,135,159,186,136,160,187,147,167,191,201,206,213,236,236,232,236,236,233,232,232,230,212,215,219,142,163,190,139,161,188,141,161,188,134,156,185,139,160,187,138,158,187,131,154,184,154,170,192,144,162,188,132,154,183,129,153,183,130,153,183,128,152,182,126,151,182,125,150,181,124,149,179,124,150,180,127,151,181,127,152,181,138,162,188,139,164,189,138,163,188,137,162,187,136,161,187,137,161,188,137,160,189,140,162,190,155,174,196,214,216,221,230,230,228,229,230,228,225,225,225,151,170,194,162,177,197,179,189,203,159,174,195,158,174,195,155,170,193,129,152,183,129,152,183,127,151,181,124,149,180,127,151,181,128,152,183,128,152,182,128,152,182,127,151,182,127,151,182,127,153,183,128,153,183,129,155,183,138,162,189,141,166,192,140,165,190,138,163,189,137,162,188,139,163,189,139,162,189,141,163,191,158,176,198,222,223,224,221,222,222,214,216,218,195,202,211,157,174,196,148,167,192,164,179,197,187,195,206,212,214,216,176,186,201,127,151,181,125,149,180,124,149,180,124,149,179,127,151,182,129,153,184,130,154,184,130,154,184,129,153,183,129,154,183,130,155,184,131,155,185,132,157,185,118,138,154,145,169,195,142,166,191,140,165,191,136,159,183,140,165,190,141,164,190,140,164,190,143,166,191,181,193,205,187,196,205,191,198,206,182,192,203,169,179,189,149,168,192,136,159,188,143,164,191,141,162,189,134,157,186,127,152,182,125,150,180,124,150,180,125,151,180,128,153,182,130,155,185,131,155,185,132,156,185,132,157,186,132,157,186,132,157,186,133,158,187,134,159,187,115,130,138,135,148,159,128,138,145,122,126,127,111,109,104,181,188,197,193,200,207,145,167,192,141,165,191,141,165,191,140,164,191,159,176,196,164,179,197,148,163,177,134,156,181,132,156,187,131,156,186,130,155,185,128,153,184,127,152,182,127,152,182,127,153,182,128,153,182,130,155,184,133,158,186,135,160,188,135,160,188,134,159,188,134,160,187,135,160,188,136,161,189,137,163,190,89,72,49,98,81,57,102,87,66,113,100,81,114,97,73,128,125,125,177,189,201,155,174,195,141,166,191,142,166,191,136,161,189,133,159,188,132,158,187,144,155,160,136,152,167,132,158,188,131,157,187,129,155,185,129,154,184,128,154,184,129,154,184,130,155,185,131,156,184,133,159,186,136,161,187,136,161,188,136,161,189,136,161,189,137,162,188,139,164,190,141,165,191,142,167,192,106,94,77,121,113,95,108,90,66,112,99,76,109,92,66,101,90,74,132,148,166,143,167,191,142,167,191,141,166,191,137,163,190,134,160,189,133,159,188,144,148,142,137,148,153,136,162,190,135,160,189,132,158,188,131,157,186,131,156,186,132,157,186,133,159,187,134,159,186,137,162,187,137,163,189,137,163,190,138,164,191,139,164,190,141,165,190,144,167,192,147,169,194,148,172,195,108,107,93,110,110,98,96,96,82,98,98,82,98,96,79,87,83,66,103,98,92,141,165,188,144,168,192,143,168,192,141,166,190,138,164,190,138,160,181,145,146,135,133,138,133,139,166,192,138,165,191,137,163,190,136,162,189,136,161,188,137,161,188,138,162,188,138,162,189,140,164,189,143,166,189,144,167,192,145,168,192,146,169,192,149,171,193,151,173,194,152,174,196,152,175,196,109,110,97,112,114,104,93,93,83,120,123,111,107,110,99,104,108,98,96,102,94,119,132,142,149,172,192,148,172,193,147,170,192,144,168,192,146,161,171,152,153,142,139,141,131,140,162,181,143,168,192,141,167,191,141,166,190,140,165,189,142,165,190,143,166,190,145,167,190,146,170,192,149,171,192,150,172,193,151,172,194,152,174,193,156,176,193,157,177,193,157,177,195,160,179,196,104,105,91,109,111,97,71,73,63,112,114,103,97,104,97,87,93,85,102,105,95,103,108,104,97,104,110,94,100,106,94,98,102,91,97,103,141,146,143,144,144,132,139,141,130,138,152,160,150,173,194,148,172,193,148,171,192,147,169,191,147,169,191,148,171,191,150,172,191,152,174,191,155,175,191,156,176,192,157,177,193,159,178,192,162,179,193,163,181,194,165,182,194,174,186,195,119,120,107,110,113,99,90,91,81,114,116,103,111,115,104,97,102,93,104,107,95,101,102,90,96,91,78,88,83,71,85,82,69,92,91,83,132,133,121,125,126,114,119,121,110,121,125,118,151,170,183,155,174,188,156,175,191,155,173,189,153,169,180,155,174,189,157,176,190,159,177,191,162,179,191,163,181,191,163,181,191,164,181,191,169,183,192,173,184,193,176,185,193,177,187,194,105,108,95,100,102,89,76,77,67,105,107,93,92,97,87,88,93,84,106,109,97,97,100,88,81,84,73,92,94,83,96,99,85,96,97,83,120,121,107,114,114,99,111,113,99,106,108,96,95,105,100,116,125,119,161,177,187,143,152,154,144,151,150,160,177,187,162,178,187,164,180,189,167,182,189,168,182,190,169,183,190,172,183,190,171,183,191,173,184,191,174,184,191,174,184,191,95,98,88,97,99,88,71,73,64,102,104,92,83,90,83,81,88,81,102,106,94,88,92,81,66,71,62,80,84,74,97,100,86,96,97,85,98,100,88,79,81,71,78,81,70,112,117,110,62,71,61,120,124,113,92,102,94,106,110,99,112,115,105,142,153,154,148,162,162,159,172,176,165,178,183,166,180,185,168,180,184,168,179,185,166,178,185,166,178,185,167,179,186,164,178,186,99,103,92,89,91,81,81,83,75,97,99,86,86,90,81,104,108,101,122,127,119,117,121,112,108,113,103,118,121,111,119,121,108,112,113,102,114,116,105,76,79,68,65,73,70,100,108,105,101,105,94,123,127,116,103,109,102,110,115,108,105,109,101,106,107,92,110,109,91,133,130,111,132,128,110,120,120,104,134,138,122,141,142,133,149,148,141,145,146,141,143,143,138,139,142,138,103,106,96,82,85,76,75,79,69,95,99,86,93,96,85,99,105,95,90,95,84,98,102,92,106,109,100,114,117,109,103,105,96,128,128,116,114,116,105,97,99,87,83,88,79,109,114,105,135,137,125,105,109,102,104,108,102,102,106,97,90,93,83,60,66,53,27,38,26,27,40,28,52,62,48,56,64,51,58,66,56,70,76,67,89,92,83,100,103,100,100,101,98,92,92,88,97,101,95,90,92,86,95,97,89,95,98,91,94,100,92,93,99,91,88,93,86,83,88,80,82,85,77,93,96,88,119,121,113,136,138,128,137,138,127,136,138,127,118,123,116,111,115,107,130,131,119,118,122,113,49,57,42,51,57,40,33,44,28,24,39,22,22,34,21,18,31,20,24,36,21,34,43,25,32,44,25,35,48,29,40,52,38,51,59,48,62,64,59,88,89,83,86,89,82,90,92,84,95,97,89,84,87,79,86,91,82,70,75,67,77,82,73,105,109,102,127,131,124,135,139,133,136,138,132,138,140,131,137,138,128,137,138,129,126,128,118,120,120,107,122,123,112,153,154,145,75,82,71,25,35,20,23,37,21,20,33,19,25,39,23,25,37,23,27,36,20,31,38,22,38,47,25,39,48,27,27,36,24,21,31,22,42,48,34,46,49,36,82,83,74,78,79,70,57,61,54,74,78,70,100,103,95,123,127,119,134,136,129,137,139,132,137,140,133,136,139,133,135,138,132,136,139,132,138,140,133,135,137,129,127,129,119,122,121,108,117,119,108,141,142,133,141,144,139,45,56,44,19,32,18,19,32,19,19,32,20,19,32,21,31,39,23,20,28,18,20,30,18,27,37,19,28,38,22,17,25,18,22,32,24,21,31,22,56,60,51,94,95,86,113,115,105,125,127,118,129,131,122,132,133,124,126,128,119,121,124,116,121,124,117,134,137,130,134,136,129,132,134,127,131,133,125,133,136,129,120,122,112,117,117,106,115,116,108,129,133,127,130,136,133,105,114,107,22,33,21,15,28,17,17,28,18,27,37,26,34,41,33,23,30,25,16,24,15,21,31,17,14,23,15,24,32,27,71,79,70,52,59,51,121,120,108,130,131,120,128,129,118,127,128,116,130,130,118,128,129,117,124,125,115,125,126,117,132,133,126,131,133,125,130,131,123,129,129,121,128,128,118,123,123,112,120,118,105,117,116,105,109,110,101,123,127,120,132,137,133,130,134,129,99,104,97,75,83,75,69,76,65,70,74,64,80,85,74,88,94,83,70,75,65,65,72,67,73,83,78,87,96,87,83,88,80,89,94,85,131,131,120,128,128,115,127,126,114,129,130,118,131,132,121,131,132,121,128,129,118,126,127,117,127,128,119,129,130,121,127,128,119,127,127,117,128,128,116,121,120,108,119,115,99,117,113,100,112,111,101,115,116,109,131,133,127,127,131,126,121,126,120,95,102,96,87,91,82,83,89,82,78,83,73,89,92,82,87,93,78,99,108,96,47,55,49,42,50,45,50,57,51,52,59,55,127,127,115,129,129,118,133,133,123,133,133,122,132,133,121,126,128,115,127,128,116,127,129,117,130,131,120,127,128,117,125,126,115,130,130,119,128,128,117,117,115,101,121,116,97,116,110,94,111,108,96,110,111,102,124,127,118,131,135,128,121,127,120,115,122,115,81,87,77,89,97,87,61,71,55,97,102,88,82,85,74,94,101,90,49,54,51,50,54,46,40,48,46,39,48,48,134,134,122,132,134,123,130,131,122,128,129,116,131,131,118,133,134,120,131,132,119,126,128,115,127,128,116,128,129,117,129,129,117,131,132,122,128,129,119,121,119,105,120,114,97,114,109,92,109,107,93,107,108,98,116,120,110,126,132,123,127,135,128,113,121,114,86,92,88,59,63,53,41,49,34,66,73,55,83,89,70,85,89,75,75,80,72,53,57,50,39,47,46,36,45,45,131,133,124,130,131,121,129,128,116,125,125,112,128,127,113,128,126,112,126,128,113,125,126,112,126,127,114,125,124,111,129,129,117,128,127,115,119,118,107,122,116,99,122,117,98,120,116,98,112,109,93,105,107,95,114,117,106,125,131,121,123,131,124,123,132,126,121,130,126,114,121,113,90,95,85,41,49,29,47,54,31,65,70,54,82,88,78,67,72,67,42,49,47,38,47,46,131,129,116,132,130,117,133,131,117,130,129,115,130,129,114,127,127,114,129,129,115,130,130,115,128,127,113,125,125,112,124,124,109,121,120,106,112,109,95,123,116,96,122,115,95,117,112,93,109,105,90,106,106,93,109,112,101,122,126,117,119,125,117,116,124,116,129,138,134,119,129,124,57,66,53,24,34,18,31,38,21,35,43,26,69,75,59,88,93,87,59,63,59,39,47,45,131,130,115,131,130,116,130,130,116,129,128,112,130,129,114,131,129,115,129,128,113,130,129,115,127,125,110,128,126,112,125,122,108,122,120,106,117,113,97,122,115,95,121,116,97,118,113,96,107,103,89,98,98,85,110,113,103,115,119,109,113,118,109,91,96,88,115,124,118,115,123,117,96,104,100,19,28,17,19,27,14,23,31,18,39,47,33,74,80,66,68,76,69,53,57,53,130,130,114,131,131,115,129,128,114,133,132,118,133,131,116,132,130,115,127,125,109,123,121,107,127,125,110,127,125,110,125,124,109,119,116,101,117,111,94,119,112,94,120,114,96,117,113,97,111,109,95,100,99,86,105,108,99,112,115,107,112,117,109,118,125,120,118,126,122,117,124,118,124,132,127,74,82,77,16,25,14,20,29,15,36,44,26,65,69,56,73,80,71,62,66,58,123,124,109,123,124,110,126,127,113,123,122,108,130,129,116,129,128,115,130,128,114,125,124,111,128,127,114,131,130,119,125,124,112,118,117,105,118,112,95,122,116,98,119,113,96,109,104,88,105,101,86,104,103,90,104,107,97,110,114,105,124,128,118,142,144,132,140,143,130,124,126,113,126,127,116,125,130,123,44,51,45,15,23,11,23,31,16,44,48,28,65,70,59,82,89,78,122,123,108,124,125,111,125,125,111,123,122,109,133,132,119,133,132,118,127,126,113,131,131,118,132,132,119,129,130,118,123,123,111,118,118,105,119,111,91,119,112,95,114,108,91,109,104,90,104,100,86,105,104,89,101,103,94,110,112,103,118,119,106,136,137,124,139,140,127,131,132,119,127,128,117,127,128,117,108,113,107,19,25,18,17,22,12,26,32,17,53,58,46,84,91,82]),new Uint8Array([202,218,230,203,221,230,204,222,232,207,224,234,209,227,236,212,229,238,217,233,240,221,236,243,224,239,246,227,241,249,230,243,249,232,246,249,235,247,252,236,248,254,237,249,255,237,249,255,240,251,255,244,254,255,244,254,255,243,254,254,246,255,254,244,254,254,245,255,254,247,255,254,250,255,254,252,254,254,242,250,254,241,250,254,238,247,252,239,248,252,238,247,252,244,250,252,201,217,229,202,219,230,203,221,231,204,222,233,207,225,235,210,227,237,215,231,239,220,234,242,223,238,245,226,241,247,230,243,248,233,245,249,235,247,251,237,248,254,238,249,255,238,249,255,239,250,255,243,253,255,244,254,255,243,254,255,244,253,254,244,254,254,245,255,254,242,253,254,246,253,254,243,250,253,238,247,252,238,247,252,237,246,251,238,247,251,240,249,251,250,253,252,200,217,228,200,217,229,202,219,230,202,220,231,205,223,234,207,225,235,212,229,238,218,232,240,222,236,243,227,240,246,230,242,248,233,245,250,235,246,252,236,247,253,238,249,255,238,249,255,239,250,255,240,250,255,242,251,255,242,251,254,242,252,254,243,253,254,245,254,254,241,251,254,239,249,253,237,246,251,237,246,251,236,245,250,236,245,249,238,247,249,246,251,252,250,252,252,199,215,227,199,215,228,200,217,229,202,219,230,204,220,232,206,223,234,209,226,236,215,229,239,219,233,242,224,237,244,229,242,246,232,244,249,233,245,251,235,246,252,237,248,254,238,249,255,238,249,255,238,249,255,239,249,255,239,248,255,240,249,255,240,249,254,240,249,254,239,248,253,237,247,252,235,245,250,235,244,249,236,245,249,240,248,249,250,252,251,252,253,252,244,248,248,197,213,226,197,213,226,198,215,227,200,218,229,202,219,231,204,221,232,208,225,234,212,228,237,216,231,239,221,235,242,225,238,245,228,241,246,231,243,249,234,245,251,236,247,253,238,248,254,238,248,255,239,248,255,240,249,254,239,248,254,239,248,255,238,248,254,238,247,253,237,246,252,236,245,250,234,244,249,236,245,249,245,249,251,250,252,252,252,253,252,243,247,247,237,243,243,197,213,226,196,213,224,197,214,226,198,215,228,200,217,230,202,219,231,206,223,233,211,226,236,215,229,238,218,232,240,222,235,243,225,239,244,229,242,246,233,244,250,235,245,250,236,246,252,237,247,252,237,247,253,219,228,233,238,246,252,237,246,252,236,246,252,235,246,252,235,245,250,235,244,249,236,245,249,239,246,249,244,248,250,244,248,250,244,248,248,247,250,249,243,247,246,198,213,226,197,213,226,198,214,226,198,215,227,200,217,228,202,219,230,205,222,232,208,225,235,213,228,236,216,230,238,220,233,241,223,237,243,227,240,245,231,243,248,234,244,249,235,245,250,236,245,250,236,245,250,176,184,187,235,244,250,235,244,250,235,244,250,235,244,249,235,244,249,236,245,248,236,245,248,237,245,247,239,244,247,237,244,246,233,242,244,233,242,244,227,237,242,196,212,225,197,213,226,198,214,225,198,215,226,199,217,227,200,218,229,203,220,230,207,223,233,211,226,235,215,229,237,218,232,239,221,235,243,225,239,245,229,241,247,232,243,248,234,244,248,235,244,249,215,224,228,127,135,134,238,245,250,237,245,249,237,245,249,236,245,249,236,244,247,238,246,248,240,246,248,235,243,246,235,243,245,233,243,244,230,240,242,227,238,241,223,235,240,197,212,224,197,212,225,197,213,225,199,215,225,200,217,226,201,219,228,203,220,230,206,222,232,209,225,233,213,228,236,217,231,239,221,235,242,225,238,244,228,241,245,232,242,247,233,243,247,236,245,249,177,186,186,90,99,95,230,238,241,237,245,248,237,245,248,237,245,248,239,245,248,250,251,252,243,247,248,235,243,246,238,244,245,239,245,246,237,244,244,236,242,243,229,238,241,200,213,223,199,213,224,197,213,224,197,214,224,198,215,225,200,217,227,203,220,229,205,221,230,209,224,232,213,227,235,216,230,238,221,234,240,226,237,242,228,240,243,231,242,246,234,243,246,239,246,248,139,147,145,89,98,96,196,204,205,243,248,250,243,247,249,239,245,248,240,245,247,242,246,247,242,246,247,246,248,247,243,246,244,245,248,245,241,245,244,234,242,243,229,240,242,198,212,221,199,213,222,199,213,222,198,214,223,199,215,224,200,217,226,202,219,227,206,221,229,210,224,232,215,227,234,220,231,237,234,239,241,243,245,243,242,247,246,234,243,245,236,244,246,237,244,246,102,111,106,83,92,88,160,168,167,236,243,246,236,243,246,237,243,246,238,243,246,237,242,245,237,242,245,240,244,244,236,242,242,233,241,241,227,238,240,226,238,240,223,234,238,199,212,222,199,213,222,199,213,222,200,215,223,202,217,225,205,219,226,207,221,227,208,222,229,212,225,230,220,230,233,223,233,236,225,233,237,231,238,239,234,241,243,237,242,245,236,243,245,210,217,219,93,103,97,90,101,97,122,132,129,237,243,246,238,243,246,239,243,245,240,244,245,236,241,243,237,242,243,233,241,242,230,239,240,229,238,240,226,238,238,210,223,220,104,116,109,214,220,222,213,221,222,206,216,221,201,214,221,203,215,222,204,217,224,206,219,224,208,222,226,213,225,229,221,229,231,224,232,234,227,234,236,232,238,238,232,238,241,235,241,243,237,242,243,162,170,168,92,101,94,93,103,97,104,112,108,217,222,220,242,245,244,244,246,244,243,246,244,242,245,242,240,243,241,236,241,240,233,239,239,230,237,237,228,237,237,226,236,236,151,163,156,206,214,216,207,216,217,208,216,218,205,215,218,205,216,219,207,218,221,208,220,222,212,222,224,219,227,227,221,228,228,221,229,230,221,230,232,225,233,235,230,237,238,234,239,239,203,210,208,92,103,98,82,92,87,79,88,81,87,95,89,114,120,115,225,228,226,238,241,240,236,242,241,223,232,232,219,227,226,216,224,222,230,236,235,187,195,195,188,197,195,140,150,148,52,62,52,201,210,212,201,210,212,203,212,213,204,213,214,205,214,215,208,217,217,211,219,219,212,221,220,215,223,223,217,226,225,219,227,226,221,228,228,225,231,231,229,234,233,230,236,235,141,150,144,75,86,78,72,82,74,70,80,71,66,75,67,78,86,78,201,205,199,235,238,236,222,227,225,126,136,130,74,87,77,98,110,100,145,155,148,79,90,85,38,53,39,35,49,33,38,50,33,197,204,206,198,206,205,199,207,207,200,208,208,201,210,208,204,212,210,207,214,211,209,216,213,210,218,215,214,221,218,216,222,218,219,224,221,223,227,224,225,230,226,226,231,227,147,154,147,76,87,78,65,76,68,54,63,55,67,75,68,85,92,86,124,131,128,115,121,118,96,106,97,29,43,31,28,39,31,22,35,25,23,37,26,21,35,26,24,36,26,31,44,29,31,43,30,116,124,130,124,131,133,128,132,134,115,123,126,120,129,131,119,128,132,120,128,133,110,120,125,121,130,134,145,152,152,122,136,137,141,152,151,148,158,158,168,179,177,182,193,190,121,131,126,68,76,69,43,63,67,49,59,52,61,69,62,84,90,83,47,59,52,44,56,44,41,54,41,40,50,39,41,47,44,28,39,32,28,39,31,28,40,31,31,42,32,29,41,29,29,40,28,74,86,79,88,97,91,91,99,93,83,91,79,79,89,81,78,87,83,104,113,110,105,115,111,96,106,103,92,100,97,116,123,117,108,116,113,109,118,112,110,118,112,89,97,89,102,108,97,58,59,55,44,60,62,55,65,60,58,67,62,91,97,91,88,90,83,87,90,83,87,92,87,93,99,98,93,98,95,86,91,89,71,77,76,65,72,72,50,58,52,37,46,35,29,39,28,107,112,106,101,106,101,108,113,109,85,95,91,83,91,90,77,84,82,60,68,69,60,68,71,63,68,70,57,60,59,52,54,50,62,64,60,66,73,67,74,81,75,104,110,102,120,122,110,106,108,96,88,97,93,120,124,113,124,127,116,127,129,120,143,144,138,86,91,83,75,79,74,78,82,77,89,92,88,94,97,95,73,77,75,89,93,89,88,90,86,88,89,82,82,83,76,53,57,54,53,53,52,66,66,67,60,62,61,70,78,76,52,51,46,51,47,44,58,55,51,60,62,60,61,63,62,67,74,75,68,77,77,43,53,44,74,83,75,155,158,150,112,114,103,113,114,103,74,82,79,118,122,115,134,136,126,141,143,135,157,159,153,152,154,149,136,138,133,104,107,102,80,83,78,67,70,66,80,81,78,86,88,84,91,94,88,94,96,90,83,84,79,56,60,60,68,71,75,114,127,132,59,71,74,69,82,83,63,70,68,65,64,54,56,61,42,51,59,43,39,52,40,50,63,63,42,57,47,47,59,49,130,135,129,136,137,129,106,108,99,115,115,105,117,119,109,131,132,122,135,137,129,140,143,135,152,154,149,152,155,150,151,152,147,142,142,138,134,135,130,119,120,114,89,91,85,76,80,73,59,61,56,71,74,69,86,88,82,67,76,75,60,71,70,40,49,50,43,53,55,47,59,55,32,45,29,30,43,27,28,41,25,21,34,22,21,34,21,27,42,27,28,45,29,97,105,95,135,138,132,128,129,120,106,108,100,117,117,107,120,120,111,132,133,124,135,136,128,140,141,134,144,145,140,148,149,144,148,150,144,148,150,144,146,147,142,139,140,135,136,137,131,127,127,122,109,110,102,90,91,83,67,71,63,52,59,54,51,55,50,48,51,47,48,54,53,41,50,42,35,44,31,21,32,21,16,26,18,16,26,18,14,23,17,19,32,22,75,85,76,142,145,140,134,137,129,121,122,114,110,111,103,124,123,113,119,117,107,132,133,125,137,138,130,144,145,139,146,147,142,148,150,144,151,152,146,149,151,145,149,151,145,147,149,143,143,144,138,141,141,133,134,135,126,133,134,125,124,125,117,41,48,44,44,47,41,44,47,43,56,60,54,81,81,66,45,51,38,19,29,19,15,24,17,12,20,16,12,19,17,45,53,47,136,138,133,138,139,132,134,134,126,116,117,108,112,112,103,125,124,114,123,120,107,120,121,111,128,129,121,135,136,129,139,141,134,141,143,137,143,144,138,143,144,136,142,144,137,143,145,139,143,144,138,142,142,136,136,137,129,134,134,127,136,137,128,25,32,28,33,36,29,43,46,41,43,46,41,70,72,57,30,39,23,19,26,17,15,22,17,17,24,21,21,25,25,121,123,120,138,139,133,140,141,132,131,131,122,113,114,104,112,112,102,124,123,112,126,124,111,121,120,110,129,130,121,134,134,127,130,131,123,131,133,126,129,131,123,129,131,123,134,136,128,138,140,132,141,142,136,143,143,136,139,140,132,129,130,122,127,128,120,36,29,14,20,20,16,35,34,28,31,39,26,28,33,23,31,34,22,43,48,44,48,58,53,29,35,31,95,97,97,134,136,132,134,135,129,129,129,119,125,125,114,111,113,103,111,110,99,120,118,107,123,120,107,119,118,106,124,125,116,131,132,123,134,134,125,130,131,121,130,132,122,129,132,121,126,128,119,130,132,123,131,132,123,134,135,126,137,137,128,137,137,127,129,130,118,35,35,34,34,37,34,24,27,23,34,38,22,35,41,25,37,45,23,42,53,32,32,41,20,71,75,67,142,144,138,141,142,135,141,141,131,124,123,112,122,122,111,109,109,99,111,110,100,124,124,113,129,129,117,125,124,112,122,122,112,124,124,114,135,135,125,138,137,127,140,140,129,138,140,129,135,137,125,131,132,120,130,132,120,131,132,121,131,132,121,132,132,121,130,131,119,38,43,39,33,38,33,41,46,37,41,47,27,35,44,20,32,39,18,29,36,17,51,55,37,135,136,131,143,144,136,136,135,126,134,136,129,125,126,117,120,120,108,105,105,94,112,111,99,125,123,111,125,123,109,123,120,106,117,114,103,123,123,112,136,136,124,134,134,122,134,135,122,132,133,120,135,137,124,133,134,121,128,130,118,131,133,121,131,132,120,131,132,120,132,134,122,48,52,44,45,50,35,42,48,26,31,40,20,25,32,15,25,30,15,32,38,20,113,116,108,143,144,137,141,141,132,133,131,120,128,128,116,126,125,114,120,120,108,104,103,91,115,113,100,123,121,107,124,122,107,121,116,100,118,117,104,125,126,114,130,130,120,133,133,120,135,135,122,140,140,127,139,140,127,141,142,128,139,140,127,133,135,122,138,140,127,138,139,127,132,134,121,41,45,26,72,82,76,32,38,24,27,31,16,25,32,16,23,30,15,78,80,74,140,142,134,147,148,140,146,146,136,141,139,127,137,135,122,128,127,115,118,117,105,104,103,87,116,115,101,121,120,106,127,124,109,126,122,106,126,124,108,125,126,114,133,134,123,125,125,113,133,133,120,140,140,126,142,141,128,141,141,127,145,146,132,140,141,126,132,134,119,139,141,127,138,139,125,39,41,23,29,36,19,31,34,17,25,33,18,95,103,95,102,105,102,139,141,135,148,150,141,148,150,140,144,144,133,141,139,124,139,138,125,126,124,113,111,110,99,105,104,90,112,111,97,122,120,107,125,121,107,132,128,112,134,131,114,127,127,115,125,126,115,120,120,110,132,132,119,136,136,124,141,142,128,143,144,130,145,145,132,143,143,129,138,138,124,136,137,123,139,141,127,46,46,22,34,41,18,28,32,15,86,93,91,122,129,124,139,141,134,148,150,142,148,149,140,146,147,135,145,145,132,140,138,124,134,133,120,126,124,113,108,107,95,102,100,85,116,114,99,123,121,107,126,122,109,130,126,111,136,133,115,121,121,107,125,126,113,132,133,122,136,135,124,139,139,128,134,135,122,134,135,122,140,142,128,141,142,129,136,138,124,134,135,123,134,136,122]),new Uint8Array([97,102,92,126,127,113,114,116,104,73,78,68,36,43,26,36,42,22,36,43,22,23,35,17,20,30,15,19,31,13,17,29,12,16,27,11,11,22,10,16,30,12,18,30,13,14,25,10,15,27,10,17,28,11,15,28,10,18,27,11,20,22,11,18,19,10,13,16,7,31,31,14,24,26,11,40,36,18,24,25,12,27,28,13,34,37,15,39,47,20,39,48,21,41,48,21,72,75,61,125,126,112,111,113,102,52,57,46,26,34,16,22,30,14,20,30,13,18,27,13,16,27,12,19,27,13,17,28,13,11,21,10,9,19,9,15,27,12,15,26,11,13,25,9,12,24,9,13,24,8,21,35,11,19,31,12,17,22,11,21,22,11,28,29,12,34,34,15,27,28,13,21,21,10,23,29,13,24,30,15,25,31,13,24,31,14,31,38,17,30,38,17,32,38,23,87,88,78,81,83,77,51,56,49,23,31,16,20,28,13,16,23,11,16,22,10,18,27,13,18,27,13,14,24,12,10,20,10,8,17,8,11,23,9,12,23,9,11,22,8,11,23,8,10,20,6,16,29,9,16,27,11,17,20,11,19,20,9,20,21,10,41,39,16,26,29,12,20,22,10,17,22,9,19,24,12,20,27,12,22,25,11,24,32,14,24,27,13,21,27,14,23,29,17,38,41,32,36,41,31,23,30,16,15,22,10,12,18,10,12,17,10,19,23,13,15,25,12,12,22,10,10,20,9,9,18,8,7,17,7,8,17,6,11,21,8,11,21,7,10,19,7,21,36,11,19,31,12,22,25,12,18,19,10,13,14,8,21,23,9,34,35,15,27,26,12,19,23,12,15,20,10,21,30,13,23,32,15,21,26,12,43,49,35,45,51,47,48,53,48,48,52,49,47,51,48,51,55,50,46,52,45,42,47,43,47,51,46,38,45,34,38,47,37,36,43,36,37,44,37,35,43,35,35,40,34,37,44,38,39,46,39,42,49,40,46,53,41,47,56,41,50,59,43,51,54,46,46,47,42,47,47,41,47,47,39,62,61,49,62,60,48,53,54,48,50,53,46,52,53,45,49,51,46,51,54,46,69,74,66,121,124,117,124,128,121,116,121,113,125,129,121,121,125,118,124,127,120,126,130,124,117,122,117,131,137,130,125,130,120,137,141,133,140,143,136,133,138,130,123,128,121,127,132,123,135,138,129,138,141,132,130,132,121,136,136,125,128,129,120,128,131,122,130,132,122,129,131,119,132,133,126,132,134,126,137,137,129,142,143,135,139,139,131,139,139,131,146,148,139,143,145,137,142,144,136,127,127,115,127,128,116,127,127,115,128,128,116,127,129,118,131,133,124,132,134,125,133,139,132,142,147,139,130,134,124,140,143,134,144,146,137,142,145,135,138,140,130,134,136,126,141,142,132,140,140,128,140,140,130,144,146,136,138,139,128,139,140,129,136,138,127,130,132,122,131,132,124,139,139,129,145,145,136,143,142,133,144,144,135,145,146,136,149,151,141,147,148,138,145,146,137,129,130,119,130,130,119,130,131,120,130,131,119,131,132,120,130,132,123,125,127,119,130,135,128,137,141,132,130,132,121,138,141,131,146,148,138,139,141,130,135,138,127,142,143,130,132,131,118,147,148,137,146,146,135,149,149,138,143,142,131,144,144,132,147,148,137,146,147,136,143,144,133,150,150,140,148,148,139,146,145,135,147,147,136,142,143,132,146,147,135,149,150,139,149,150,139,132,134,122,133,134,124,135,136,128,135,137,128,137,138,130,138,139,129,140,140,131,136,141,135,136,142,137,125,128,118,137,140,129,144,146,135,146,147,136,130,132,121,129,130,119,138,139,128,145,146,135,141,141,129,149,148,136,143,141,128,142,141,129,137,137,125,126,126,116,141,140,127,147,145,133,144,143,132,145,145,132,142,141,129,147,146,134,143,141,127,143,144,133,142,143,132,141,142,130,142,143,130,137,138,126,137,138,127,141,143,134,134,136,127,134,136,126,139,143,134,132,136,128,138,139,126,140,140,126,141,140,126,142,142,129,138,138,125,142,142,128,128,128,115,135,135,123,142,141,127,138,137,126,140,139,127,144,141,126,136,133,118,138,136,121,147,144,130,150,147,133,139,137,123,143,140,126,142,138,124,141,138,124,142,138,123,144,143,130,144,143,132,131,131,118,130,129,117,130,131,119,129,129,117,133,133,120,131,131,119,131,131,119,128,129,116,132,132,117,129,128,113,139,136,121,127,124,108,133,131,116,129,128,113,135,134,120,120,119,104,125,124,110,138,136,123,138,136,123,134,131,118,135,134,121,142,139,125,141,137,124,137,132,117,146,142,126,141,137,121,143,139,125,128,124,109,138,134,121,136,132,117,140,138,125,137,136,123,122,121,108,122,121,110,120,121,111,119,119,107,121,122,109,119,120,109,116,116,106,118,118,106,125,126,113,129,129,115,128,128,115,124,122,110,119,118,104,131,129,116,127,124,112,129,127,115,127,125,114,136,134,121,130,128,115,126,123,111,130,128,116,132,130,118,136,133,120,133,130,117,129,125,111,134,130,116,132,128,114,128,124,110,134,131,118,137,133,121,137,135,123,128,125,114,107,109,100,106,107,98,109,109,100,108,109,100,109,110,101,108,108,97,112,111,100,111,111,98,113,112,99,119,119,107,121,122,109,122,121,108,123,123,111,122,121,109,123,122,110,124,122,110,123,119,106,123,120,106,125,121,109,124,121,108,123,119,106,123,119,105,127,123,110,128,124,110,128,124,110,127,122,108,128,123,110,128,125,112,128,125,113,127,124,112,128,126,114,125,124,112,102,103,96,106,108,100,107,110,103,104,106,100,106,108,99,108,109,99,111,113,103,110,111,100,110,110,99,111,111,99,107,107,94,110,111,100,114,115,103,113,114,102,114,115,104,111,112,101,120,119,108,120,119,108,121,119,106,120,118,106,119,116,103,114,111,98,109,107,94,109,106,93,108,106,94,106,104,92,110,107,95,110,108,95,109,106,93,113,112,99,111,109,97,111,109,97,102,102,91,108,108,97,111,110,100,107,108,100,114,115,106,110,111,102,117,118,106,115,116,104,112,113,102,116,117,106,117,118,106,116,116,104,117,116,104,113,114,103,117,118,106,117,118,107,121,122,111,122,123,112,125,122,108,126,121,108,130,125,111,126,121,107,109,104,91,105,100,87,103,99,86,101,96,83,101,97,83,105,101,86,104,100,86,108,104,89,108,104,89,112,109,93,108,107,96,112,110,98,105,104,93,119,119,110,122,122,113,121,123,114,123,124,114,122,122,111,122,121,110,123,123,112,125,124,113,123,122,110,123,122,111,122,122,110,124,124,112,124,124,112,125,123,110,132,128,115,132,127,112,129,124,111,134,128,115,128,122,108,117,112,98,115,110,95,115,110,95,117,112,97,116,111,97,118,113,98,116,111,96,114,110,96,118,115,100,115,113,98,117,115,102,114,111,98,116,112,100,125,126,118,130,130,121,132,133,124,131,130,118,127,126,114,129,128,115,129,126,112,128,125,111,131,128,115,129,127,114,129,127,114,128,125,111,130,127,114,133,132,118,133,129,115,135,129,114,136,130,116,136,130,115,135,128,112,123,117,102,122,116,100,125,118,102,127,121,106,128,122,107,127,122,107,125,120,105,125,120,105,125,121,107,123,120,105,118,115,101,116,112,97,121,118,106,129,130,123,134,134,126,136,137,127,131,131,120,132,133,122,135,134,121,134,134,120,133,130,116,135,130,116,133,129,115,134,132,118,134,133,119,131,128,114,133,132,119,138,134,121,141,134,117,142,135,119,142,135,120,140,133,115,130,124,108,128,122,106,132,125,109,133,127,111,134,129,113,133,128,112,133,128,112,131,127,111,132,128,112,128,125,110,117,113,98,119,115,101,121,118,105,128,129,120,134,135,126,132,133,123,134,135,124,135,136,125,133,133,120,133,131,119,136,133,121,133,130,115,131,127,112,134,132,119,133,131,119,136,132,119,134,132,119,136,134,120,142,136,120,144,137,121,141,135,120,143,137,120,133,127,111,133,125,108,134,127,110,136,129,112,137,131,114,137,131,116,134,129,114,133,129,112,132,128,112,130,127,111,119,115,99,121,116,100,124,119,103,129,129,119,133,134,124,134,135,123,134,135,123,136,135,123,136,135,122,134,132,119,136,134,120,135,133,118,135,131,115,136,133,118,136,133,119,136,133,119,135,132,116,137,134,118,143,137,120,146,140,123,144,137,121,145,139,122,131,125,109,131,124,106,133,127,111,135,129,112,135,129,111,137,132,115,137,131,116,133,128,112,132,128,111,134,131,114,115,114,100,116,115,103,115,116,105,116,116,105,119,119,109,119,119,108,119,119,108,121,121,110,123,122,110,117,116,103,116,116,103,118,116,102,113,112,99,114,113,101,119,117,104,118,116,102,114,113,100,116,115,102,117,116,102,119,118,105,128,125,111,125,120,104,129,123,108,129,123,107,129,124,107,134,129,112,130,125,109,128,124,111,129,126,114,126,124,111,119,118,105,117,118,106,122,123,110,124,124,112,123,124,114,119,119,108,123,122,111,125,125,114,129,129,120,129,129,118,127,128,117,121,121,108,121,122,110,121,122,108,116,116,104,112,112,101,122,122,109,129,128,116,124,124,112,122,123,110,126,126,114,119,119,106,124,124,110,120,116,100,117,112,95,132,127,109,134,130,114,132,126,110,131,127,112,136,135,122,133,132,119,132,131,118,132,130,117,125,125,114,128,128,116,130,129,116,126,125,114,125,123,112,130,129,120,134,134,125,135,135,126,133,133,123,133,134,122,129,129,117,131,132,119,126,125,112,123,123,111,115,115,103,124,124,111,130,130,118,129,129,116,128,127,114,130,129,117,128,128,115,125,125,113,125,123,108,125,122,104,133,129,111,134,129,112,133,130,114,135,132,118,139,139,126,139,139,127,141,141,128,136,136,123,133,133,121,132,133,120,132,132,120,130,131,119,129,128,117,131,130,120,133,132,122,133,134,124,137,137,127,139,140,129,132,132,119,132,132,119,128,128,116,130,130,118,123,123,110,124,124,111,132,131,118,132,131,118,126,126,115,123,123,110,115,117,108,125,126,114,125,125,111,130,127,111,133,131,113,128,126,109,132,129,112,140,138,122,139,138,124,144,143,130,145,145,133,144,145,132,141,141,128,133,133,121,133,132,120,132,131,119,128,127,116,128,128,119,135,134,124,136,136,126,138,138,128,137,136,124,132,131,117,134,131,119,130,129,117,130,130,117,129,128,115,125,125,113,132,130,117,133,131,118,129,128,116,121,122,109,111,113,104,118,119,107,125,127,112,128,127,110,131,128,112,131,130,114,137,135,118,135,134,118,133,134,119,137,138,124,138,138,125,140,139,127,138,138,125,127,126,114,131,130,119,130,129,117,127,125,113,124,122,111,125,124,115,130,128,118,132,131,121,133,132,121,125,124,112,124,123,111,123,123,110,124,124,111,130,129,116,124,124,112,125,124,112,122,122,109,122,122,109,112,114,100,104,107,94,106,108,95,118,120,106,124,125,109,127,127,110,125,124,108,131,129,114,130,129,114,132,132,117,133,134,119,134,135,120,133,135,122,131,132,118,132,131,116,133,132,118,134,131,119,132,130,119,128,128,119,122,123,114,122,123,112,128,128,119,125,126,116,122,121,109,121,121,108,117,116,103,117,118,105,119,120,108,124,125,114,120,120,107,112,114,101,109,113,100,107,110,97,109,111,99,110,113,99,120,122,109,122,124,110,121,125,110,127,128,112,125,126,111,126,127,112,135,136,120,128,131,117,135,135,120,137,138,123,137,139,124,133,133,120,136,134,121,135,133,120,132,131,119,133,133,122,125,124,112,125,124,112,130,130,119,130,130,119,127,127,114,124,123,109,121,122,109,119,120,106,120,121,107,129,129,118,126,125,112,119,123,109,114,118,105,111,113,99,115,118,104,114,117,104,123,125,112,121,123,108,123,126,111,125,127,111,127,128,112,123,124,108,129,130,115,133,134,120,136,137,122,135,136,121,132,133,117,131,130,118,130,128,116,132,130,117,128,127,116,127,127,116,118,118,106,125,124,111,127,125,111,126,125,112,125,123,111,128,127,113,125,125,110,122,123,109,125,124,110,126,125,113,124,123,110,120,122,108,121,123,110,115,117,103,117,119,104,113,117,105,122,125,112,124,126,111,125,127,112,123,125,110,128,129,114,122,123,107,125,127,113,126,127,112,126,127,112,128,128,112,127,128,113,124,123,109,125,124,110,123,122,107,126,125,112,124,124,112,121,119,107,126,124,110,128,126,113,127,126,115,124,123,111,128,127,113,125,125,111,124,123,108,124,124,110,121,121,108,122,123,108,122,124,109,123,124,110,121,123,108,123,124,111,121,122,109,123,126,113,122,124,110,123,125,111,123,125,110,126,127,112,121,121,105,124,125,109,132,133,118,131,133,119,125,125,110,132,133,121,128,128,114,131,130,117,129,128,115,125,125,112,125,124,112,125,124,110,126,125,112,122,121,110,128,128,117,123,123,111,127,127,113,127,127,113,126,125,112,122,122,108,123,123,109,124,125,110,128,130,115,123,124,110,122,124,110,124,125,111,122,123,109,125,127,112,126,127,113,126,129,114,126,127,113,126,128,113,124,125,109,128,129,113,132,133,118,133,134,120,136,137,123,138,140,127,125,125,111,126,125,112,126,126,111,122,120,106,127,126,113,125,124,111,125,124,111,123,122,110,125,125,113,123,124,111,124,125,111,125,124,110,124,124,110,123,123,110,124,124,110,126,127,112,125,126,111,126,126,113,122,123,108,120,120,106,113,114,100,119,121,106,123,124,109,126,128,114,133,136,121,133,136,122,129,130,115,132,132,115,133,133,117,133,134,120,134,135,121,134,136,122]),new Uint8Array([137,161,187,137,159,187,140,162,188,142,164,189,144,166,190,148,169,193,151,171,195,158,177,199,166,184,203,177,193,208,185,200,215,189,203,218,192,206,222,195,210,225,199,214,227,203,217,230,202,219,232,204,222,234,212,227,237,214,229,239,216,231,240,217,233,242,222,236,244,223,237,246,226,241,248,226,242,249,228,242,249,228,242,249,230,243,249,238,247,251,247,250,253,241,249,252,137,160,188,138,159,187,140,162,188,141,163,189,145,167,191,149,170,193,151,171,195,155,174,198,161,180,202,172,189,207,187,200,215,191,204,219,190,205,221,195,210,225,200,215,228,201,217,230,201,218,232,204,222,234,212,228,238,215,231,240,217,233,241,220,235,244,224,238,246,223,239,247,225,242,249,226,241,249,227,243,250,227,242,249,229,244,251,237,247,252,241,248,252,243,250,253,136,159,186,138,160,187,141,163,188,142,164,189,144,166,190,148,170,193,153,173,196,156,175,198,158,179,200,168,186,204,196,208,218,213,221,229,191,205,221,196,211,226,202,218,230,203,220,232,202,220,233,207,224,236,212,228,239,219,233,242,218,234,242,219,235,244,222,238,246,221,239,248,224,241,249,226,243,250,227,243,250,227,243,250,230,245,251,235,246,251,238,248,253,243,250,253,137,159,186,139,161,186,140,162,187,143,165,190,145,166,191,151,172,194,154,174,197,157,176,198,161,181,201,169,188,205,219,224,228,237,239,240,201,212,225,200,213,227,204,219,231,208,223,234,207,225,236,208,226,237,218,232,240,220,234,242,222,237,245,221,236,246,224,239,248,223,240,248,225,242,250,227,243,250,226,243,250,229,244,251,235,246,252,236,247,253,236,247,253,238,247,253,136,159,186,138,160,187,142,164,188,146,166,190,155,174,194,177,191,204,157,176,198,154,174,197,162,181,201,174,192,206,212,219,226,244,245,243,217,224,232,214,223,232,204,220,231,210,225,235,216,230,239,219,232,240,229,238,243,240,246,248,234,244,248,229,241,248,227,241,249,228,242,250,231,244,252,227,243,251,229,244,252,235,247,253,234,246,253,237,247,254,236,247,253,241,249,254,136,159,186,138,160,186,143,164,188,165,181,198,192,201,209,195,203,212,166,183,201,154,175,197,179,194,208,192,204,214,223,228,230,213,220,228,197,209,223,203,215,228,209,222,233,217,229,238,218,231,240,227,238,244,246,249,250,253,254,253,244,249,250,240,247,251,229,241,249,240,247,251,239,249,252,232,245,252,235,247,253,236,247,253,232,246,253,237,248,254,247,252,254,248,253,254,138,160,187,139,161,187,141,162,187,178,191,203,204,211,216,203,209,217,176,191,205,160,181,199,205,213,220,203,212,220,183,198,212,172,191,209,187,203,218,208,219,228,238,242,243,238,242,244,241,246,247,241,246,248,250,252,253,247,251,252,249,252,254,251,252,254,242,246,249,249,251,251,251,252,252,252,253,253,248,252,253,240,249,254,238,248,253,246,252,254,249,254,254,253,255,254,140,163,188,141,163,188,144,165,189,163,180,197,205,211,217,205,211,218,218,223,226,178,193,207,193,206,214,185,199,212,158,181,202,161,185,206,215,224,230,228,234,237,251,252,250,251,251,250,248,249,249,248,250,249,254,254,254,252,253,253,250,252,253,251,252,253,246,249,249,252,252,252,252,253,252,253,254,254,253,255,254,254,254,254,252,254,254,249,253,254,252,254,254,254,254,254,140,162,187,140,162,187,142,164,188,150,170,192,172,187,201,198,206,213,197,206,215,191,204,213,181,197,209,154,178,199,151,176,198,177,195,211,205,215,224,231,235,237,246,247,246,244,245,245,242,244,244,243,245,244,245,247,245,243,247,246,252,253,253,247,249,249,250,251,250,252,253,253,253,253,253,253,253,253,254,254,254,254,254,254,253,254,254,250,254,254,251,255,254,254,255,255,140,161,188,139,160,187,140,162,187,144,164,188,157,174,194,152,171,193,175,190,204,188,201,211,161,182,202,164,185,204,154,179,200,165,188,206,202,214,224,235,239,239,228,232,233,240,242,241,235,237,238,230,234,233,226,232,231,236,240,239,245,247,245,235,239,239,249,250,250,253,254,253,252,253,251,253,253,252,254,254,254,254,254,254,253,255,254,253,255,255,253,255,254,248,254,254,139,160,187,138,159,186,139,159,186,139,159,185,140,160,186,141,162,188,142,164,189,150,171,194,148,171,195,149,174,198,152,177,200,155,182,203,173,194,212,222,227,231,218,225,226,233,236,236,226,229,231,229,232,231,218,224,225,235,238,238,234,238,237,232,234,235,237,240,239,246,248,246,244,246,244,253,253,252,255,255,253,254,255,254,255,255,255,250,255,254,246,255,254,243,254,254,137,158,185,136,157,185,136,157,184,137,158,184,138,159,184,139,161,186,141,163,188,146,167,192,150,172,196,150,174,198,154,180,202,156,182,204,156,183,205,215,224,230,201,209,214,205,213,216,218,223,225,215,221,221,227,231,230,234,237,237,231,234,234,223,227,228,231,234,234,239,241,240,245,245,244,254,254,253,252,253,250,252,253,252,255,255,255,247,255,254,245,255,254,246,255,254,134,155,183,135,156,183,135,156,183,135,157,183,136,158,183,137,160,184,142,164,188,146,168,192,150,172,195,152,176,198,154,180,201,154,181,204,158,185,207,175,196,214,200,209,216,194,202,207,198,205,208,212,217,218,229,233,232,232,235,234,235,238,236,225,229,229,234,237,236,241,243,241,247,248,246,253,253,251,251,251,248,255,255,254,255,255,254,250,255,254,247,255,255,245,255,255,132,154,183,132,153,182,133,154,182,134,156,182,136,157,184,139,160,185,143,164,188,147,169,192,150,173,196,153,177,199,154,180,201,157,185,205,163,191,211,168,194,214,205,218,227,203,212,219,197,207,212,199,207,211,215,221,223,218,224,224,226,230,230,229,232,232,238,240,238,242,244,242,247,248,245,254,254,251,255,255,253,255,255,253,255,255,253,249,255,255,245,255,255,244,254,255,133,155,183,134,155,183,134,154,182,136,156,183,138,159,184,141,161,186,145,165,189,148,168,192,150,172,195,153,177,199,158,182,203,161,187,207,163,192,211,169,197,217,172,198,218,190,208,221,220,228,234,220,227,230,215,222,225,225,230,230,229,233,232,228,233,232,239,241,239,244,246,243,248,249,246,253,254,251,255,255,254,255,255,253,253,255,254,246,255,255,244,254,255,243,254,255,149,167,190,143,162,187,141,160,186,137,157,183,141,160,185,143,162,187,146,165,189,149,169,193,151,172,195,155,177,199,158,183,203,163,189,208,167,194,213,168,197,217,169,199,220,171,200,220,202,220,236,238,244,247,230,235,236,217,223,225,227,232,232,234,237,237,244,246,244,253,253,252,255,255,254,255,255,255,255,255,255,251,254,255,245,253,255,244,254,255,243,253,255,241,252,255,211,215,219,220,222,225,164,177,197,144,163,188,160,175,195,176,188,204,180,192,206,152,170,193,151,171,195,154,176,198,156,180,202,161,187,207,166,193,212,169,197,217,169,199,220,175,203,225,179,208,230,179,208,230,191,215,234,227,237,244,221,235,245,230,240,245,236,244,248,246,250,252,247,252,254,241,250,254,238,248,253,232,247,254,235,249,255,238,250,255,237,249,255,236,249,255,206,210,215,231,231,231,225,226,228,231,232,232,217,221,226,228,229,230,240,240,239,179,191,206,151,172,195,153,175,198,156,181,202,159,186,206,162,190,210,167,195,216,171,199,221,177,205,227,182,210,231,182,210,232,185,213,235,196,224,242,199,226,244,203,229,246,212,236,249,222,241,252,227,245,254,229,246,255,229,246,254,228,245,253,231,246,254,234,248,255,234,248,255,236,249,255,168,181,198,214,217,221,224,225,227,226,227,227,237,237,235,236,236,235,220,224,229,162,178,200,150,171,195,152,175,198,153,179,201,157,183,205,161,188,209,167,194,215,172,199,221,177,204,226,182,209,231,189,216,236,197,224,241,200,227,244,203,230,245,209,234,247,215,238,250,222,241,252,227,245,254,231,246,254,231,246,255,230,245,254,231,245,254,233,247,254,234,248,255,234,248,255,155,170,193,161,176,195,198,203,212,228,228,229,224,225,227,209,213,220,171,183,202,150,169,193,150,170,194,152,175,197,154,178,201,158,184,206,162,188,210,168,195,215,180,204,224,188,210,230,194,218,235,204,226,240,200,225,241,201,229,244,204,231,244,210,234,247,214,237,249,221,240,250,225,243,251,227,244,253,229,245,253,229,245,253,229,244,253,230,245,253,232,247,254,233,247,254,222,222,224,185,193,207,187,195,207,216,218,222,196,203,212,214,216,222,154,171,193,148,167,191,149,170,194,151,174,197,153,177,200,158,183,205,163,189,210,196,212,226,235,240,244,250,251,252,238,245,249,236,244,248,218,235,244,207,230,243,206,231,243,209,233,245,213,236,247,219,239,249,223,242,249,225,242,250,226,243,250,226,244,251,228,244,251,228,244,251,230,245,252,231,245,250,225,225,226,237,236,234,188,195,208,158,173,194,152,168,192,155,171,193,146,165,190,147,167,192,150,172,195,156,178,200,163,184,204,204,215,225,232,237,240,227,233,235,230,235,236,236,241,241,247,249,248,252,252,251,250,252,252,228,241,246,218,236,245,211,233,245,216,236,246,217,236,248,221,240,247,223,241,248,224,241,248,225,242,249,227,242,250,229,244,251,230,244,252,230,243,250,213,214,219,190,197,210,169,180,199,143,162,187,140,161,187,142,162,188,147,167,192,197,205,216,186,199,212,206,215,223,212,220,227,223,229,232,230,234,235,218,224,227,210,218,221,219,225,227,232,236,236,245,246,245,254,254,252,254,255,254,238,246,249,222,238,246,225,240,246,217,237,245,217,236,246,219,238,246,221,239,246,223,240,247,223,240,247,225,241,247,226,241,248,227,242,249,207,210,218,148,165,191,142,161,188,148,167,190,144,163,189,148,166,192,176,188,205,206,214,220,199,209,218,231,234,234,222,228,231,231,235,237,230,233,234,215,221,224,211,217,220,215,220,223,222,227,228,235,238,238,248,250,247,247,249,247,251,253,253,245,250,251,222,237,244,216,235,243,215,234,244,215,234,243,217,236,244,221,238,245,221,238,245,221,237,244,222,238,245,224,239,246,164,177,197,136,156,185,135,156,184,138,159,185,145,165,190,175,188,204,229,230,230,202,211,217,208,216,221,233,235,234,232,234,233,239,240,238,233,235,234,213,218,220,211,216,219,215,220,222,216,221,224,225,229,231,233,237,237,237,241,241,253,254,253,238,245,247,213,231,240,214,232,241,214,232,242,213,231,241,214,233,242,216,233,242,218,235,242,218,235,242,219,235,242,220,236,243,133,154,184,131,153,183,131,153,183,136,157,185,164,179,197,203,210,215,186,198,208,167,184,200,210,217,221,224,228,229,226,229,228,219,223,224,222,225,225,223,226,226,220,223,224,220,223,225,224,226,228,230,233,233,233,235,236,232,236,238,241,245,246,223,234,240,215,230,238,214,230,238,215,232,240,215,231,240,214,232,240,213,231,240,212,231,239,214,232,240,216,233,240,216,233,240,130,152,182,128,152,182,129,152,182,132,154,183,135,158,184,143,164,188,143,163,189,174,188,202,215,220,223,234,235,233,219,222,224,213,217,219,220,223,223,227,229,227,228,230,229,233,234,233,241,241,240,241,242,240,242,243,242,229,234,238,221,230,236,210,224,233,214,227,236,209,226,235,210,227,236,212,229,237,211,229,237,210,228,238,210,228,238,211,229,238,212,230,238,213,231,239,127,150,180,125,149,180,126,149,180,130,153,181,132,154,182,131,155,183,133,157,183,146,166,189,155,174,194,166,183,200,192,201,211,214,218,220,218,221,222,227,228,228,231,233,232,231,232,232,236,238,236,236,238,237,244,245,243,248,249,247,206,219,229,204,218,230,205,220,231,205,221,232,206,222,233,207,224,234,206,224,234,206,224,235,207,225,236,208,226,236,209,227,236,210,228,236,124,148,179,124,148,179,127,151,180,129,152,181,128,150,180,127,151,180,140,160,186,163,177,195,146,165,190,170,183,200,150,169,192,183,194,206,226,227,227,238,238,236,243,243,241,240,240,238,237,238,238,230,233,235,213,221,228,212,222,229,199,212,225,201,215,228,200,215,229,205,219,231,202,219,231,203,219,232,204,220,233,204,221,233,205,223,233,207,225,235,208,225,235,208,225,235,124,148,179,126,150,180,126,150,180,126,149,179,125,149,179,126,150,180,150,168,190,190,198,207,170,183,199,190,198,208,177,188,204,214,217,221,225,227,227,233,234,233,237,238,236,243,243,241,247,247,244,240,241,240,227,232,235,191,205,220,196,209,222,200,213,226,198,212,226,198,213,227,199,214,228,200,216,230,202,218,231,203,219,231,205,222,231,208,225,233,206,224,233,205,223,233,125,149,179,125,150,180,125,149,180,123,147,178,124,148,179,125,150,180,151,168,191,206,210,216,204,208,215,236,236,235,228,229,230,241,241,238,240,240,238,230,232,232,213,219,224,235,236,236,219,224,229,191,203,216,181,198,213,187,202,217,193,205,220,206,217,228,196,210,224,195,209,224,196,211,226,197,213,226,199,215,229,202,218,230,208,222,231,208,223,231,207,223,231,205,222,231,125,149,179,123,148,178,123,148,178,122,147,178,124,148,179,127,151,181,147,165,189,195,202,210,213,216,219,237,237,234,231,232,230,238,238,235,241,241,239,222,226,229,167,184,203,195,205,216,213,218,226,241,242,241,226,230,234,215,222,229,213,220,229,207,217,227,192,206,222,193,208,223,194,209,224,195,211,224,196,212,226,200,215,228,205,220,230,207,221,230,210,224,231,206,222,231]),new Uint8Array([252,253,253,253,253,253,245,250,252,231,244,249,229,242,248,228,241,247,228,241,248,226,240,247,223,237,245,220,234,243,216,232,241,215,230,240,214,228,238,212,226,237,205,221,234,202,218,232,202,217,229,196,212,226,195,209,224,196,209,223,192,204,220,185,199,215,177,193,209,170,187,204,161,179,200,152,172,196,147,167,192,144,165,190,141,163,188,141,162,188,138,160,187,138,160,187,252,253,252,253,253,253,253,253,253,242,249,251,232,243,248,232,243,248,229,241,247,227,240,246,223,237,245,220,234,243,217,232,241,215,230,240,211,227,238,207,224,236,204,221,234,201,216,231,199,214,229,195,210,225,196,208,223,201,212,224,190,203,218,182,197,213,175,191,207,169,186,204,158,175,195,153,172,196,147,167,192,143,164,189,141,162,187,139,161,188,138,160,187,138,160,187,245,248,249,241,247,247,248,251,250,253,254,252,244,249,250,245,250,252,231,241,246,227,239,246,224,237,245,221,235,243,218,232,240,214,230,239,208,225,236,205,222,236,202,218,233,198,214,230,198,212,227,195,208,225,194,206,222,190,204,219,182,199,214,178,194,210,171,188,206,166,184,203,143,156,171,153,172,197,147,168,192,142,163,190,139,161,187,138,161,187,139,161,187,131,153,177,233,240,242,225,235,238,234,241,241,249,251,249,253,253,252,250,252,252,238,245,248,231,241,247,234,243,247,234,242,247,240,245,248,224,235,242,209,225,236,203,220,234,200,217,232,199,214,229,198,211,227,193,206,223,188,203,219,183,200,215,179,196,211,173,191,208,168,186,205,163,182,202,138,148,158,152,171,196,146,167,193,142,164,190,139,162,188,139,161,188,139,162,188,131,152,175,233,241,241,222,232,235,220,229,233,225,233,236,238,243,243,250,252,250,249,251,250,244,249,250,252,253,253,249,251,252,252,253,251,247,249,248,233,239,242,207,222,234,201,217,231,199,213,228,194,208,225,188,204,220,183,200,216,178,196,213,175,193,210,170,188,206,165,184,205,159,177,199,132,139,143,151,171,196,146,168,194,142,165,191,140,163,189,140,163,188,139,162,189,103,120,138,236,242,243,231,238,239,220,229,232,219,228,231,224,233,234,236,242,241,243,246,245,250,251,249,254,254,252,250,251,250,247,249,248,239,243,245,238,242,244,217,228,236,199,215,229,195,210,226,190,205,222,184,201,218,180,198,215,176,194,211,171,190,208,167,186,206,163,183,205,152,167,187,110,113,109,143,163,185,146,168,194,143,166,191,142,164,190,141,164,190,138,161,188,75,84,92,222,235,241,230,239,241,233,238,240,234,238,238,226,233,234,225,233,234,230,236,236,232,237,238,238,242,242,246,247,246,239,243,245,228,235,240,217,228,236,204,219,231,197,213,228,192,208,224,187,204,220,183,200,217,178,197,214,174,193,211,169,188,208,164,185,206,161,181,204,131,140,150,99,100,95,132,150,165,148,170,194,147,168,193,145,167,192,144,166,192,122,138,162,52,53,49,221,234,240,219,233,240,217,231,238,227,236,240,234,239,237,219,228,230,225,232,233,226,232,234,225,232,234,234,237,239,237,241,243,234,239,242,242,244,244,219,228,235,194,211,226,190,206,223,186,203,220,182,200,217,177,196,214,173,192,211,168,188,208,164,184,206,161,181,204,125,130,131,96,98,92,112,122,125,146,167,190,150,171,195,148,170,194,147,169,193,115,126,140,52,51,42,225,236,241,222,235,240,218,231,238,215,229,237,218,231,235,218,230,233,210,225,232,213,227,233,218,229,234,225,232,235,222,230,236,206,222,232,210,223,232,200,215,229,194,210,225,189,206,222,185,203,219,181,199,216,178,197,214,175,193,211,171,190,209,166,186,207,162,183,205,120,124,124,96,96,88,115,125,129,149,166,183,153,174,198,150,172,194,150,172,196,119,131,150,70,63,52,225,237,241,213,226,229,208,220,226,216,230,237,210,226,233,206,223,231,206,223,231,206,223,231,203,221,230,205,221,230,206,221,231,202,219,230,198,214,228,194,210,225,192,209,224,188,205,221,184,202,218,180,199,216,180,197,214,178,195,212,174,192,210,169,188,207,165,185,206,116,120,119,95,96,84,121,130,131,144,150,151,140,154,166,130,139,147,126,131,135,95,87,77,106,97,83,213,226,228,139,154,152,119,131,134,207,222,229,137,152,152,205,221,229,212,227,234,202,217,222,205,220,228,213,226,233,232,236,236,226,231,234,200,216,229,195,211,226,193,209,223,190,207,222,187,204,220,184,201,217,182,199,215,179,196,212,176,193,209,172,190,208,168,187,206,130,135,134,108,109,98,120,127,127,130,129,120,92,84,71,81,71,54,78,66,46,79,68,45,107,104,91,109,120,118,83,96,91,72,85,76,71,84,74,75,85,76,98,108,98,211,213,212,196,202,198,200,207,210,231,236,236,223,230,232,225,231,232,208,221,229,203,217,226,197,212,223,194,209,222,191,207,220,187,204,218,185,201,216,182,199,214,179,196,211,177,193,209,171,189,206,123,128,127,94,95,84,109,110,102,119,120,113,87,82,72,79,71,55,78,71,56,86,85,71,112,113,104,44,55,43,64,74,64,52,64,48,57,68,55,53,65,53,118,128,126,211,221,223,154,162,158,163,171,173,215,227,230,209,222,228,204,218,226,209,220,227,213,223,228,213,222,226,203,214,222,199,212,220,195,208,218,192,205,216,188,202,213,186,199,211,180,196,208,176,193,205,126,129,127,99,97,86,107,103,90,125,126,115,95,96,86,93,94,85,83,87,78,100,101,89,100,101,87,46,57,45,47,58,44,39,50,36,36,47,31,35,46,31,53,63,51,162,172,169,121,128,123,104,111,108,69,83,75,172,182,183,218,226,226,221,226,225,223,226,225,197,205,207,209,217,220,198,210,217,194,206,214,189,201,206,196,204,210,202,208,212,190,200,207,177,189,196,107,108,98,102,103,91,118,118,106,122,122,111,99,101,92,91,94,87,84,90,81,96,99,88,96,97,84,35,47,34,39,50,35,40,48,32,34,44,30,31,42,29,33,44,27,37,48,35,101,106,101,99,106,102,29,41,33,46,58,50,108,120,113,181,184,181,114,122,114,63,77,67,123,132,131,141,148,149,148,158,159,76,98,92,84,100,93,181,190,193,163,166,170,139,143,144,90,79,61,110,111,98,118,118,106,117,118,111,101,104,94,100,102,95,89,91,84,82,85,77,82,83,72,36,48,36,41,50,34,29,40,26,30,40,28,29,40,26,23,36,24,35,45,35,60,67,55,62,68,59,44,52,45,15,27,18,22,36,26,25,38,29,26,41,28,31,47,35,64,77,60,52,64,50,46,67,62,35,58,49,51,65,53,106,103,97,77,72,66,86,88,79,102,103,90,105,107,92,118,119,108,109,109,99,101,102,89,95,99,91,88,92,83,76,79,70,83,85,75,31,42,30,28,38,28,28,38,26,25,34,24,27,37,26,24,35,22,28,40,25,49,57,46,56,61,53,45,53,45,13,24,17,15,27,18,20,32,24,22,35,25,22,37,27,30,45,30,25,43,30,53,72,68,42,58,45,40,55,43,53,67,61,68,79,81,92,96,89,98,100,89,101,102,90,103,104,93,106,107,96,99,101,88,93,98,91,77,80,74,74,78,70,78,81,71,28,38,29,28,36,28,28,35,23,22,29,23,25,36,23,26,37,23,21,33,20,28,37,24,40,50,36,46,56,42,44,53,42,43,49,38,43,49,39,49,55,44,52,59,46,44,52,48,65,73,64,97,106,98,60,72,59,51,63,52,76,84,77,84,92,88,58,67,52,68,76,65,71,75,65,50,58,42,66,74,58,100,103,92,81,87,83,85,89,82,89,92,86,76,79,70,76,78,70,93,96,91,92,98,93,92,99,93,90,99,92,89,97,88,89,95,87,90,96,89,90,97,89,96,103,96,104,108,100,103,107,98,100,104,94,98,100,90,99,102,92,94,99,89,90,96,83,100,103,92,87,92,80,86,92,80,94,100,88,109,112,106,96,101,92,90,95,84,89,93,83,87,91,83,95,98,91,95,97,95,88,96,96,87,91,89,97,101,98,93,97,92,78,79,74,99,102,99,101,105,102,100,104,100,100,106,102,95,99,95,100,104,101,95,101,98,94,99,98,97,102,100,98,103,99,106,111,107,105,109,103,102,106,97,100,103,92,99,102,90,96,99,87,97,100,92,97,100,92,96,99,91,95,98,90,99,103,96,100,103,97,100,102,97,83,85,80,90,92,86,88,90,84,89,90,83,94,96,90,94,97,92,90,93,88,77,81,75,95,97,90,95,96,90,86,88,81,81,82,74,79,81,74,78,79,73,76,77,72,78,80,73,73,74,69,77,78,72,78,80,74,78,81,74,96,99,91,97,101,94,102,105,97,102,105,95,97,101,93,93,97,89,92,95,87,94,96,89,92,95,90,97,101,94,101,104,100,106,108,103,100,101,94,99,100,94,100,102,95,101,100,94,101,101,92,93,93,84,90,90,81,88,89,79,81,85,79,63,66,60,72,74,70,68,71,64,57,59,55,71,73,67,39,44,38,69,72,67,48,53,45,84,86,81,79,83,78,51,56,51,69,74,68,44,52,42,74,77,71,60,65,57,69,73,67,77,82,76,57,63,56,77,80,73,52,57,52,65,68,63,61,64,59,75,78,71,79,81,74,60,63,57,80,82,76,60,61,56,84,85,78,76,79,73,67,70,62,71,73,67,118,120,110,116,118,107,115,117,107,114,115,105,109,110,100,114,114,105,114,114,104,113,114,104,115,116,106,115,116,106,116,117,108,114,116,106,110,111,100,109,111,99,117,120,110,121,124,115,111,112,101,110,109,98,108,108,97,111,112,101,110,111,101,114,115,106,114,116,106,113,112,101,116,115,104,113,112,101,116,115,104,116,116,106,119,119,108,115,115,104,114,114,103,113,112,99,135,135,127,132,134,125,130,132,123,134,134,125,138,138,128,136,136,126,134,135,126,136,136,127,135,136,126,137,138,129,135,137,127,139,141,132,139,140,130,137,138,129,137,138,131,137,138,131,134,134,125,128,127,115,130,129,118,137,138,129,136,137,129,133,135,127,133,135,127,134,134,126,134,133,122,132,130,120,131,129,119,131,129,119,132,131,120,130,129,118,128,127,115,130,129,118,127,129,120,129,131,121,131,132,122,128,129,119,129,129,120,135,135,126,136,137,128,137,137,128,140,141,132,139,141,133,134,136,126,134,134,123,133,133,123,135,136,127,138,139,130,138,139,130,137,137,129,136,137,128,135,137,128,135,136,127,139,140,132,138,140,131,132,133,123,130,130,119,131,131,121,128,126,116,129,128,118,128,128,117,127,127,117,128,129,119,127,127,117,125,124,113,130,131,120,132,134,122,133,134,122,136,137,125,136,136,125,137,138,127,132,133,123,134,135,125,135,136,126,132,134,125,130,131,120,131,131,119,130,129,119,131,132,124,135,136,127,137,138,127,131,131,121,133,133,124,131,131,122,131,132,122,137,139,129,138,138,128,136,136,126,131,131,120,132,132,122,129,127,116,130,129,117,131,131,119,132,131,119,127,127,115,131,132,119,132,133,121,130,132,120,130,130,118,133,133,121,133,134,122,136,137,124,131,132,120,128,130,117,127,128,116,127,127,115,128,128,116,129,130,118,130,130,118,131,130,118,138,137,126,139,139,128,138,138,126,132,132,121,129,130,120,128,129,119,125,127,117,132,133,122,139,138,126,138,137,126,134,135,123,126,126,114,131,128,117,132,131,119,131,130,117,128,128,113,128,127,113,129,128,115,134,135,124,133,136,123,138,140,126,141,141,129,141,142,129,131,132,119,127,128,115,128,131,116,127,127,114,122,123,110,128,129,116,127,127,115,127,126,113,130,129,116,136,135,124,140,139,129,140,140,128,134,134,121,128,128,117,129,129,117,126,127,116,123,123,112,137,136,123,139,139,126,136,137,124,129,128,117,127,127,116,128,127,114,127,127,113,127,128,114,129,130,116,131,131,116,131,129,115,135,137,124,136,138,124,137,138,125,134,134,119,137,137,121,135,135,119,134,134,118,132,132,116,136,138,123,136,136,122,133,133,119,124,124,109,127,126,112,128,126,114,132,131,119,133,131,119,129,128,114,126,126,113,130,128,116,128,128,115,123,122,109,126,125,113,130,129,116,126,125,112,128,127,115,126,125,113,125,122,109,124,123,111,126,128,114,123,124,111,128,128,114,130,130,116,139,141,127,141,143,130,139,140,124,141,141,127,140,139,125,139,139,124,135,135,119,140,141,125,138,139,124,135,136,122,134,134,120,133,134,120,126,125,111,129,127,114,126,126,112,130,129,116,130,130,115,127,126,111,130,129,116,126,126,114,126,127,115,125,125,112,130,130,117,127,127,114,130,129,116,130,129,116,127,124,110,125,123,108,126,126,111,124,125,110,122,123,109,127,127,113,140,142,129,138,138,124,140,140,126,137,137,123,134,132,117,130,129,114,138,140,125,141,144,129,138,140,126,131,134,119,130,131,117,123,123,109,126,125,112,127,127,113,127,127,114,131,131,118,130,130,116,126,126,112,127,127,114,125,124,112,129,129,117,126,127,115,130,131,117,130,130,116,127,125,112,128,127,114,130,129,116,123,121,107,123,122,108,125,125,111,123,125,110,121,123,108,140,140,126,141,142,127,138,138,124,137,137,122,132,131,115,129,130,114,142,145,132,137,140,125,132,135,120,129,131,117,126,127,112,118,119,104,119,119,106,127,127,113,129,130,116,130,130,116,129,130,115,128,129,115,125,124,111,126,125,112,129,129,115,126,128,116,123,124,111,132,133,120,130,128,115,131,130,117,129,129,116,128,127,113,122,121,106,124,123,109,126,126,112,123,125,111]),new Uint8Array([124,149,179,123,148,178,123,147,178,122,147,178,124,148,179,125,149,180,128,152,182,145,165,189,168,183,200,206,212,216,221,223,224,221,224,226,205,213,219,169,186,204,158,178,200,178,192,209,229,231,232,236,237,237,219,224,229,230,234,236,216,223,230,207,217,226,190,205,220,190,205,221,192,207,222,193,209,222,196,212,225,200,214,226,201,217,228,203,218,228,205,220,229,203,218,229,124,149,179,124,148,179,123,147,178,122,147,179,123,148,179,123,148,179,124,149,180,125,150,181,129,153,183,144,166,190,155,174,195,162,179,198,177,190,206,194,202,213,201,208,217,193,203,215,213,218,224,228,231,233,206,216,224,194,208,219,183,200,215,184,201,216,187,203,218,188,204,219,191,206,221,192,208,221,196,211,224,198,213,225,200,215,226,202,216,227,201,217,227,202,217,228,125,150,180,125,149,180,124,148,179,123,148,179,123,148,179,122,148,179,123,148,179,124,149,180,124,150,181,127,152,183,130,155,185,141,164,190,163,180,200,154,174,198,158,177,199,167,185,204,196,206,216,239,239,238,208,215,224,184,200,215,178,197,213,181,198,214,184,201,216,187,204,218,190,205,219,191,207,220,194,210,223,196,211,224,198,213,226,200,214,226,200,215,227,201,216,227,127,152,181,126,151,181,126,150,180,125,149,180,125,150,181,125,149,181,124,148,180,124,149,180,124,149,180,125,151,181,128,154,184,132,157,187,138,162,191,141,164,193,146,168,195,152,173,198,169,186,205,205,213,222,226,229,232,221,226,231,187,202,216,179,197,213,182,199,215,184,202,216,188,204,218,191,207,220,194,209,222,195,210,223,196,211,224,196,212,226,198,213,226,199,213,227,129,154,184,127,152,183,128,152,182,127,152,182,127,152,182,128,152,183,127,152,182,125,150,181,125,151,182,127,152,183,128,154,184,132,157,187,137,161,190,140,163,192,143,166,194,148,170,197,153,175,200,162,182,205,168,187,208,173,191,211,174,193,211,176,195,212,180,197,214,183,200,215,188,203,217,191,206,219,193,208,221,192,209,222,193,210,223,194,211,225,196,211,226,197,212,226,132,156,186,130,155,185,129,154,184,129,155,184,129,154,184,130,153,184,129,153,184,128,153,183,127,153,184,129,155,185,131,156,186,134,159,189,136,161,190,139,163,193,142,165,194,145,169,197,151,173,199,157,178,202,162,182,206,167,186,208,171,190,210,176,194,211,178,197,213,183,200,215,187,203,218,189,205,219,190,207,220,190,207,220,192,209,223,193,210,224,195,211,224,196,212,226,134,159,188,133,158,188,132,158,188,131,157,186,132,158,186,132,157,186,131,156,186,131,156,186,131,156,186,133,158,187,135,159,189,137,162,191,139,163,192,141,165,194,143,166,195,145,168,196,151,173,199,156,177,202,161,181,206,165,186,208,170,190,209,174,193,210,178,197,212,182,200,215,185,202,217,187,203,218,188,204,219,191,206,221,192,208,223,193,210,224,196,211,224,198,212,225,137,163,191,138,163,190,137,162,190,137,162,190,140,165,190,147,168,191,136,161,188,133,159,188,133,159,188,134,159,189,136,161,191,139,163,192,142,166,194,144,168,196,146,169,197,149,172,198,153,176,201,157,179,203,162,182,206,166,186,208,170,190,209,175,193,210,178,196,212,181,199,214,183,201,215,187,202,217,190,205,220,192,207,222,193,209,223,194,210,223,197,211,224,198,212,225,142,167,193,141,167,193,141,165,192,140,165,192,141,165,191,147,169,192,155,174,194,142,166,191,138,164,191,138,164,191,140,165,192,142,167,194,145,169,195,147,171,197,148,172,198,152,175,200,156,178,202,160,181,205,163,185,207,168,188,208,172,191,210,176,194,211,180,197,213,181,199,214,185,202,217,189,204,219,194,208,222,196,210,223,197,211,223,197,212,223,198,212,224,200,213,224,147,171,194,146,170,194,145,170,194,144,168,193,145,169,194,154,174,195,165,182,198,151,172,194,146,169,194,144,169,194,145,170,195,147,171,196,149,173,197,150,174,198,153,176,200,156,179,202,160,182,204,165,185,206,168,188,207,173,191,209,178,194,211,180,197,212,183,199,214,187,202,216,192,206,218,194,207,219,199,212,222,204,216,224,210,220,227,203,215,224,202,215,223,201,214,224,153,176,197,152,176,198,165,183,199,150,173,196,148,172,196,147,171,195,148,172,196,151,174,196,150,173,196,150,174,197,152,176,198,153,177,199,155,178,200,156,179,201,162,183,203,183,196,209,196,205,213,190,201,211,178,194,209,186,199,211,206,210,217,212,215,219,211,215,220,207,213,220,199,209,219,195,208,220,197,210,220,198,212,221,200,213,223,202,215,224,201,215,223,199,213,222,187,193,199,181,190,200,193,197,201,180,191,200,175,188,198,161,182,198,155,178,197,155,179,197,155,179,197,156,180,199,157,180,199,159,181,200,175,190,203,188,197,205,203,206,210,200,205,210,200,206,211,202,208,213,194,202,212,201,207,214,201,207,214,196,205,215,190,202,214,191,204,215,194,207,217,195,208,219,197,210,220,199,212,221,200,213,222,201,215,223,199,214,221,199,213,221,178,188,197,182,190,198,186,193,199,191,197,200,183,193,198,172,188,198,171,187,198,177,191,198,182,193,200,182,194,200,172,189,200,173,190,201,177,193,202,180,194,204,184,197,206,182,196,206,182,197,207,185,198,208,188,199,209,188,199,210,189,200,211,190,202,213,192,204,214,194,206,215,195,208,217,197,210,219,200,212,220,203,215,221,203,215,222,202,215,223,208,218,222,214,221,223,178,188,195,179,189,196,181,191,197,183,193,197,184,194,197,184,193,198,185,194,199,187,196,199,190,197,200,192,199,200,194,200,200,185,197,201,182,196,202,181,196,203,186,198,205,190,200,206,188,200,207,188,200,208,189,201,208,189,200,210,192,202,210,198,205,212,201,208,213,201,209,214,201,209,215,206,214,217,208,215,217,207,216,218,208,216,219,207,216,220,205,214,219,205,213,218,173,186,192,174,187,194,177,190,195,178,192,195,180,193,196,184,194,196,185,195,197,187,196,198,192,198,198,190,198,198,194,200,199,191,199,199,186,197,200,187,198,201,191,199,202,197,202,203,198,202,204,198,203,205,198,201,205,195,201,206,198,204,207,201,205,208,205,207,210,206,210,211,205,209,211,204,211,212,206,213,213,209,214,214,210,215,215,207,214,215,205,213,215,204,211,214,164,180,187,164,180,187,168,184,190,171,187,191,173,188,191,177,190,192,177,190,191,179,190,192,179,190,192,180,192,193,183,194,194,184,194,194,184,194,195,183,194,195,185,194,196,186,193,195,189,196,197,188,195,197,188,195,197,190,197,200,191,198,201,193,200,202,196,202,204,199,203,205,199,204,205,200,205,205,200,207,207,201,207,208,203,207,208,196,201,202,198,206,206,198,204,206,137,143,142,113,123,126,100,115,118,89,107,111,96,113,116,95,112,114,116,133,137,130,144,145,123,137,136,115,127,128,111,124,125,118,129,124,122,130,123,137,141,133,134,136,130,135,134,126,130,131,127,130,131,125,120,124,119,142,144,138,148,148,141,136,138,133,144,145,138,139,137,133,133,131,128,135,137,137,135,138,138,134,135,136,135,133,132,118,122,121,133,137,139,123,128,133,122,121,113,107,104,97,129,127,118,144,140,127,119,117,108,143,129,113,132,121,110,119,120,114,129,134,124,131,139,132,135,145,135,130,138,125,138,144,132,120,125,115,125,128,114,108,107,93,131,133,115,126,130,110,113,119,104,113,118,104,124,126,109,122,124,111,127,129,112,110,112,98,107,107,89,91,95,86,104,106,95,106,106,96,100,100,91,100,99,90,87,91,86,81,89,85,78,83,78,69,75,70,69,75,74,77,82,82,80,85,84,69,72,63,80,84,79,79,82,78,73,83,84,105,108,97,121,123,108,118,116,100,87,92,84,70,78,75,88,92,85,87,88,81,101,107,96,107,117,110,92,97,92,84,84,75,90,89,81,90,93,89,84,88,86,62,62,59,88,89,83,118,119,107,148,153,137,147,151,136,134,136,125,106,105,101,105,101,92,106,102,94,59,58,46,66,68,61,62,62,56,78,71,63,88,74,67,83,74,67,74,70,68,72,73,71,82,87,80,89,87,81,90,84,76,67,71,59,64,75,64,61,62,51,89,84,79,99,83,71,100,93,77,94,89,73,88,84,71,77,68,60,89,63,50,82,64,57,83,80,74,83,88,88,65,56,53,78,64,58,75,71,60,74,66,61,57,53,43,57,60,52,63,66,64,49,51,46,30,40,31,42,53,40,49,59,45,53,61,48,69,74,71,67,69,65,55,51,48,51,52,37,38,41,22,51,47,31,58,54,40,38,46,33,28,39,25,73,78,65,79,79,66,77,73,57,79,85,70,34,43,28,43,48,32,58,54,42,60,54,44,33,44,32,49,60,53,46,54,52,32,39,32,27,36,21,24,35,20,31,39,22,27,36,23,28,39,23,82,86,77,69,71,73,42,48,41,34,43,32,32,38,22,38,42,24,49,56,44,69,75,70,46,54,46,31,39,27,27,34,19,34,38,19,37,36,22,29,39,24,26,38,24,44,54,44,47,58,46,46,56,42,51,60,47,21,31,19,28,38,23,22,31,20,24,30,25,17,28,18,20,31,18,19,29,19,18,26,17,13,21,14,17,27,16,18,29,16,19,29,17,20,33,20,57,70,58,92,103,103,58,64,60,40,47,37,23,31,19,29,36,22,40,50,35,59,67,68,55,63,63,33,44,35,27,33,20,32,36,19,33,34,20,37,44,38,36,44,34,35,43,33,18,29,18,13,23,15,21,30,20,31,41,20,27,36,19,22,31,17,30,38,28,19,26,15,19,26,17,16,24,16,20,30,18,21,30,19,20,28,18,12,19,13,14,22,13,20,29,19,58,68,61,61,70,65,48,55,53,29,37,24,28,33,19,35,38,20,39,47,32,46,55,41,43,52,36,29,39,25,29,36,20,33,38,27,36,39,29,50,58,55,50,57,53,49,55,50,44,52,39,33,45,26,36,50,23,33,47,21,29,43,20,33,45,21,34,41,28,24,29,19,24,31,18,17,25,15,14,22,14,15,24,15,14,21,14,15,22,15,12,20,12,17,26,14,31,42,31,41,49,44,36,45,47,28,36,34,19,24,17,19,26,15,39,47,32,47,54,35,55,58,41,55,60,43,57,62,48,61,65,49,52,59,42,42,55,31,39,51,28,38,51,29,34,49,25,29,44,19,28,43,18,29,43,18,29,42,18,32,46,18,34,46,20,21,24,16,31,36,27,14,20,14,11,18,12,11,20,13,10,19,13,16,23,18,11,17,11,11,19,11,15,24,15,22,31,25,31,41,41,25,33,34,31,36,31,41,46,36,56,61,47,66,69,53,72,77,63,71,73,60,61,66,48,42,53,31,46,56,35,34,48,23,33,47,25,34,50,23,31,47,22,32,47,22,29,45,19,23,37,15,22,34,14,27,39,15,33,45,17,36,46,19,27,33,24,17,21,17,13,18,14,14,22,15,16,23,17,15,22,18,8,13,9,7,14,8,14,21,13,29,28,19,35,45,45,46,56,54,78,90,84,72,83,76,62,70,64,54,61,56,53,58,55,54,59,54,47,55,40,27,38,19,31,44,21,28,41,18,25,38,17,27,42,19,30,45,21,27,42,19,29,44,19,30,44,19,24,36,14,20,31,12,26,37,15,29,38,15,40,45,21,46,53,54,27,33,31,24,31,29,22,29,27,25,32,25,19,25,19,10,15,11,17,22,19,29,32,31,39,47,47,69,77,82,85,93,104,108,115,127,130,138,148,155,167,171,105,117,113,42,50,47,41,53,36,35,47,29,28,38,23,37,49,30,32,45,23,25,37,17,29,43,20,25,38,18,29,43,19,29,41,19,26,38,17,18,27,11,25,32,13,40,42,17,41,44,20,50,47,29,42,43,35,49,56,54,57,65,63,37,43,42,22,30,21,18,27,17,22,29,23,29,35,34,41,48,44,70,77,76,56,65,63,54,61,57,84,90,77,108,111,94,85,90,80,52,59,51,26,39,19,21,30,14,22,33,18,25,36,19,20,32,15,17,27,14,24,35,17,26,38,18,22,34,16,24,35,16,28,39,18,22,33,14,37,37,17,36,38,17,34,35,16,39,37,17,48,46,26,53,54,41,56,59,52,52,58,54,57,61,59,42,45,41,48,51,43,38,43,35,75,76,67,71,74,66,70,76,68,106,108,92,125,126,110,112,115,103,78,83,73,63,70,58,45,55,37,34,44,27,22,33,17,25,37,20,19,32,14,15,26,13,19,30,14,21,33,15,17,27,13,22,34,15,28,41,17,25,36,16,26,28,14,22,23,11,26,29,13,34,37,17,37,38,18,54,55,37,107,112,103,92,98,91,93,99,103,55,58,56,47,48,30,47,50,33,74,80,68,82,89,79,112,116,101,121,124,107,106,109,98,66,70,61,49,55,39,39,49,33,32,44,27,26,40,21,22,36,17,20,32,16,16,28,13,14,25,12,17,29,13,20,33,15,17,29,13,17,28,12,20,32,14,21,31,14,21,26,12,19,23,10,16,21,10,20,23,11,27,30,13,49,44,21,49,46,23,56,56,34,80,86,64,81,85,75,45,45,25,44,44,27,89,98,90,114,117,105,127,129,114,106,109,95,61,64,55,48,49,32,45,50,29,27,40,20,22,34,16,21,36,16,20,34,14,14,26,11,14,26,11,14,26,11,15,26,11,14,24,11,18,31,13,19,32,13,15,26,10,18,29,11,22,27,12,16,19,9,18,23,10,18,21,11,17,21,10,37,34,16,37,35,15,39,41,19,39,42,19,48,46,23,41,44,20,50,49,26])]};//Vertex shader code:
	const VertexShader = `
	attribute vec2 inVertexPos;
	attribute vec2 inTexCoord;
	uniform mat4 matMVP;
	varying vec2 texCoord0;
	
	void main()
	{
	  gl_Position = matMVP * vec4(inVertexPos, 0.0, 1.0);
	  texCoord0 = inTexCoord;
	}`;
	//Fragment shader code:
	const FragmentShader = `
	precision mediump float;
	varying vec2 texCoord0;
	uniform sampler2D colorTex;
	uniform sampler2D normalTex;
	uniform sampler2D backgroundMapTex;
	uniform samplerCube cubemapTex;
	uniform int hasNormalTex;
	uniform vec2 inputImageSize;
	uniform vec4 ambient;
	uniform vec4 backgroundColor;
	uniform vec3 directionalLightDir;
	uniform vec3 directionalLightColor;
	uniform vec4 fixedMaterialColor;
	uniform float roughness;
	uniform float metallic;
	uniform float indexOfRefraction;
	uniform float diffusePortion;
	uniform float environmentReflectance;
	uniform mat3 matObjSpaceToWorldSpaceRot;
	#define GAUSS_HSIZE 2
	
	vec4 computeCookTorrance( vec4 materialColor, vec4 lightRGBA, bool twoSideLighting, vec3 lightDirection, vec3 normal, vec3 eyeDir,
	                          float roughness, float metallic, float indexOfRefraction, float diffusePortion)
	{
	  vec4 result = vec4(0.0);
	  float NdotL = dot(normal, lightDirection);
	  if (twoSideLighting)
	    NdotL = abs(NdotL);
	  NdotL = clamp(NdotL, 0.0, 1.0);
	  if (NdotL > 0.0)
	  {
	    vec3 H = normalize(lightDirection + eyeDir);
	    float NdotH = dot(normal, H);
	    float NdotV = dot(normal, eyeDir);
	    float VdotH = dot(eyeDir, H);
	    NdotH = clamp(NdotH, 0.0, 1.0);
	    NdotV = clamp(NdotV, 0.0, 1.0);
	    VdotH = clamp(VdotH, 0.0, 1.0);
	    vec3 F0 = vec3(abs((1.0 - indexOfRefraction) / (1.0 + indexOfRefraction)));
	    F0 = mix(F0 * F0, materialColor.xyz, metallic);
	    vec3 fresnel = F0 + (vec3(1.0) - F0) * pow(1.0 - VdotH, 5.0);
	    float alpha = roughness * roughness;
	    float r1 = 1.0 / (3.14 * alpha * alpha * pow(NdotH, 4.0));
	    float r2 = (NdotH * NdotH - 1.0) / (alpha * NdotH * NdotH);
	    float rough = r1 * exp(r2);
	    float NH2 = 2.0 * NdotH;
	    float g1 = (NH2 * NdotV) / VdotH;
	    float g2 = (NH2 * NdotL) / VdotH;
	    float geoAtt = min(1.0, min(g1, g2));
	    vec3 specular = max((fresnel * geoAtt * rough) / (NdotL * NdotV * 3.14), 0.0);
	    result += materialColor * lightRGBA * NdotL * diffusePortion + lightRGBA * vec4(specular, 1.0) * (1.0 - diffusePortion);
	  }
	  return result;
	}
	
	vec4 computeFragmentColor(vec2 texCoord)
	{
	  vec4 result;
	  vec4 fsColor = texture2D(colorTex, texCoord);
	  vec4 fsNormal = texture2D(normalTex, texCoord);
	  if(abs(fsNormal.x - 0.5) < 0.02 && abs(fsNormal.y - 0.5) < 0.02 && abs(fsNormal.z - 0.5) < 0.02)
	    result = backgroundColor;
	  else
	  {
	    vec4 materialColor = fixedMaterialColor.x < 0.0? fsColor: fixedMaterialColor;
	    vec3 normal = normalize((texture2D(normalTex, texCoord).xyz) * 2.0 - 1.0);
	    vec3 vsEyeDir = vec3(0.0, 0.0, 1.0);
	    vec3 eyeDir = normalize(vsEyeDir);
	    result = materialColor * ambient;
	    bool twoSideLighting = false;
	    vec3 L = normalize(-directionalLightDir.xyz);
	    normal = matObjSpaceToWorldSpaceRot * normal;
	    result += computeCookTorrance(materialColor, vec4(directionalLightColor, 1.0), twoSideLighting, L, normal, eyeDir, roughness, metallic, indexOfRefraction, diffusePortion); 
	    if(environmentReflectance > 0.0)
	      result = mix(result, textureCube(cubemapTex, reflect(-eyeDir, normal)), environmentReflectance);
	  }
	  return result;
	}
	
	#if (GAUSS_HSIZE == 1)
	  float gaussKernel(int index)
	  {
	    if(index == 0 || index == 2 || index == 6 || index == 8)
	      return 0.077847;
	    else if(index == 1 || index == 3 || index == 5 || index == 7)
	      return 0.123317;
	    else
	      return 0.195346;
	  }
	#else
	  float gaussKernel(int index)
	  {
	    if(index == 0 || index == 4 || index == 20 || index == 24)
	      return 0.003765;
	    else if(index == 1 || index == 3 || index == 5 || index == 9 || index == 15 || index == 19 || index == 21 || index == 23)
	      return 0.015019;
	    else if(index == 2 || index == 10 || index == 14 || index == 22)
	      return 0.023792;
	    else if(index == 6 || index == 8 || index == 16 || index == 18)
	      return 0.059912;
	    else if(index == 7 || index == 11 || index == 13 || index == 17)
	      return 0.094907;
	    else
	      return 0.150342;
	  }
	#endif
	
	vec4 computeGaussianSmoothedFragmentColor()
	{
	  vec4 result = vec4(0, 0, 0, 1);
	  ivec2 imagePixelPos = ivec2(texCoord0 * inputImageSize);
	  for(int offsetY = -GAUSS_HSIZE; offsetY <= GAUSS_HSIZE; ++offsetY)
	    for(int offsetX = -GAUSS_HSIZE; offsetX <= GAUSS_HSIZE; ++offsetX)
	    {
	      float weight = gaussKernel(offsetX + GAUSS_HSIZE + (offsetY + GAUSS_HSIZE) * (2 * GAUSS_HSIZE + 1));
	      ivec2 samplePos = imagePixelPos + ivec2(offsetX, offsetY);
	      if(samplePos.x < 0 || samplePos.x >= int(inputImageSize.x) - 1 || samplePos.y < 0 || samplePos.y >= int(inputImageSize.y))
	        result += backgroundColor * weight;
	      else
	        result += computeFragmentColor((vec2(imagePixelPos) + vec2(offsetX, offsetY)) / vec2(inputImageSize)) * weight;
	    }
	  float jitter = 0.9 + (sin(texCoord0.x * 2000.0 + cos(texCoord0.y * 2000.0))) * 0.15;
	  float blend = (result.x + result.y + result.z) / 3.0;
	  jitter = blend + (1.0 - blend) * jitter;
	  return vec4(result.xyz * jitter, 1.0);
	}
	
	void main()
	{
	  if(hasNormalTex != 1)
	    gl_FragColor = vec4(texture2D(colorTex, texCoord0).xyz, 1.0);
	  else
	  {
	    float backgroundProb = texture2D(backgroundMapTex, texCoord0).r;
	    if(backgroundProb == 1.0)
	      discard;
	    else if(backgroundProb > 0.0)
	      gl_FragColor = computeGaussianSmoothedFragmentColor();
	    else
	      gl_FragColor = computeFragmentColor(texCoord0);
	  }
	}`;
	//Contructor:
	function HtmlGenerator()
	{
	}

	//Function returns code for style sheet:
	HtmlGenerator.prototype.computeCssCode = function()
	{
		let code = '\n\
	    fieldset\n\
	    {\n\
	      font-size:16px;\n\
	      font-family:Arial;\n\
	    }\n\
	    \n\
	    input\n\
	    {\n\
	      font-size:16px;\n\
	      font-family:Arial;\n\
	      min-height:25px;\n\
	      max-height:25px;\n\
	      min-width:71px;\n\
	    }\n\
	    \n\
	    label\n\
	    {\n\
	      font-size:16px;\n\
	      font-family:Arial;\n\
	    }\n\
	    \n\
	    select\n\
	    {\n\
	      font-size:16px;\n\
	      font-family:Arial;\n\
	      min-height:35px;\n\
	      max-height:35px;\n\
	      min-width:201px;\n\
	      max-width:4001px;\n\
	    }\n\
	    \n\
	    table, th, td\n\
	    {\n\
	      font-size:16px;\n\
	      font-family:Arial;\n\
	    }\n\
	    \n\
	    .selected\n\
	    {\n\
	      background-color:rgb(205, 232, 255);\n\
	      color:rgb(0, 0, 0);\n\
	    }\n\
	    \n\
	    button.buttonViewer\n\
	    {\n\
	      font-size:16px;\n\
	      font-family:Arial;\n\
	      min-height:43px;\n\
	      max-height:43px;\n\
	      min-width:200px;\n\
	      max-width:300px;\n\
	    }\n\
	    \n\
	    canvas.canvasDigitalizedObject\n\
	    {\n\
	      display:block;\n\
	      min-width:50px;\n\
	      width:100%;\n\
	      min-height:50px;\n\
	      height:100%;\n\
		  cursor:grab;\n\
	    }\n\
	    \n\
	    .tooltip\n\
	    {\n\
	      margin: 8px;\n\
	      padding: 8px;\n\
	      border: 0px solid rgba(0,0,0,.8);\n\
	      border-radius: 3px;\n\
	      background-color: rgba(190,190,190,.0);\n\
	      color: #222;\n\
	      font-size:24px;\n\
	      font-weight: bold;\
	      position: absolute;\n\
	      z-index: 2;\n\
	      text-align: left;\n\
	    }\n';
		return code;
	}

	//Function returns code for html:
	HtmlGenerator.prototype.computeHtmlCode = function()
	{
		let code = '<div id="glcanvas_tooltip" class="tooltip" style="width:500px;visibility:hidden"></div><canvas id="glcanvas_left" class="canvasDigitalizedObject"></canvas>\n';
		return code;
	}
	let iconDataResetView = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAL3HpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHjarVnZcQM7DvxHFBsCb5Dh8KzaDDb8bZCcQ7Jky37PKmukOUiw0WgAFPX//XfQf/DnOChynmNIISj8ueSSyfgQ1fpL810rN9/nn9uX8P3hPJ0XDE5ZHO36ynnfn3HeXw8cc+jyeJ7ivmLiHkifA88/KzPL53Y3EufNOq+3JZT6+hBS5LupZQ9UD5Pj9e9Os/Zy8Z0eTjBQah4TWWO61VbN97gssOs/4z/hXVvGfcrGecYSDsaaPRgAeVjecVTqDtADyMcnekb//PQEvsn7vH3CMmyM8OHlBe2fzttzGnOf2J4WmccLQWv9ZTn7f4wWx+hrddkFIBo2oybY+hgGNxZAbudjAS/Gv8dnnq+EV1RZVbi8qaoKXlUnbeCVQdrpprMeus9j1RUmOtMNfGKMqcbOcxE+SqbCP9o6eelhGN5r8Jqx1XSyFqfNaYue86Y5X9URMzeNW43GYFr8++5F3138zYvGqAKRVvHECnYZYRbMEM/JO+6CQ/TYfvMT4OO13a9u/BGqOtwmMEcsMKuyhiheX9yy088W93kcVwhp4rYHAESY28MYbeEB8MB6HbRiY1hr4BjhoAzLjXWmwAPae9NgpHHWBkNsopG58Qzrea/xJhg5DW2CI7wNluEbxBec5ZwHf9hFcCh76533Pnj2kXzyOdjggg8hcBCRy2zZsefAzJET52ijiz6GyDHGFHMyyUIDfQqJU0wp5WwoY6KMsTLuzzhTTLHFFV9C4RJLKrmCPtVVX0PlGmuquZlmG2SihcYtttRy19ShFN1130PnHnvqeYBrww43/AiDRxxp5NNr26tfXr/wmt5eM9NTch+fXsNZYj6G0CInXnwGjxmn4XEWD4DQRnymonbOiOfEZyoZBIU3MNKLb6hp8Rhc6Lo2fujTd5fnPvIb+fiR38xPniNx3b/hOYLrvvrthdea5Lk6PbaiUDBVFtGH6z1mGgUpDTfhAXz9+zf6/tZSeXSbeVQYM3rrdgzJgciWHEfTvgEzzZU9yQUVPYRNPnXj2wh1FD8Sj2HaqKWlYplHEUVsbWTPzUBsIaoy0oAYyzd6/Pr3b3R85dpkEVAFsQy6KmfHgKdhrO2Ne8ACi4IjQqiwvzddO+jRkwzkKGJEGVT9+giQZEp2Y6SoiDGhINpgTVASsQMUkFus5Keybm+ZMS+gvtDF6Qi4AO0Eli5kQY/X2MJwFEICcVcIooYlmpBAMnkmJgYhR6eaup8mFh7Wch94uIO8CJrRCwwAegxuupslKY/TkmBlzsR0WAKsy5iWWB1xWxaqhImHl3Lqh6OnRTHdQLcgaQd0E5yK66XFbwlZHvCnnxwEhIQVCxnNkxMbmRsreNBJC4T0SQsgAx5ZRGwvCxYUjxmgWgGmHMCkxf2JCgH7CxZxENYXFkkmRTACqpEbR/TIKFwV3u5HS+AqyIyZR9dQaBgJkS6lN/i3gMajw4LExYbQJz6usy1luDwyEiVAyx1apagIArJqOdvk09CmjxK4ZSwerAUNfK+gVxkNqlg7KCI2dCQHU4SvYgiJJdZdlmAFwZ2WJFCib0uC1bjLw4AXS1N0nngfHLBH+/c0gXEgCskwWQr/N8dpOwbgDaPoHd9htHYaTwtHgHNDETOdT8qyjyfXsveTa9ntWDbtdVtYiEgEh20JADlWLg1Z7GNlWcx+iuzyFNk/BDaY25j2ECKMSxb3EKcw7iEOaWyP0tgOYaSflO9T4aOpfPW9PHwacbRC7iHi9BXuIoQzBZxg7WBfUJULKiq+oh59qVgeFaTi1OD4gLtbhmNRppRpEm5AHndY9UCBMwYKrVYm64Q50Jsb5yrfOSdVyaYcmBMP0iGpgjpZmH2n8daCOaD1OwIx4C0CMeAtAuMRgQQFKOL/EV2zQlQJCKtH0RLrdSbyFHQPYQBMCEDWQKWNFoqEvxg0ZAhSfovIOERERrmJiL5EJB8iAsufQ5OeY/SF2kPrRenf8guzh5uMnHJiNIjjGlZe1Ho4oc4ZoieN+cYpqWEWp5DeaCXadCthJqfONAuavQpThxZSd4b8pqLjCJl6Lje4+c9w0xrjUbN/BfdGlX4L68xGK3E8rIM+Xwi0OQ5JQucY93XQRwuJF9/P3HcG0OI78T35nRH0OuW8PWLB9E9S0D3j0ALwGk4/DocO4Ek/S0QMD53n/UBylq4OhVZJkIkKXkIKNWI5ipaXBgLbDqKEoQJHERK0DJiDB+IHgPbmRc5rkTYx9EZf1Ny/FPHXlUlQsxLpYQrbJUCrBJDtsLsEgbp3EbokSMqRE3XKv3WPsEcAnd5Bk8oroOl0z+WcsG7/4pxSE3eL3NbnMtGm1pKq0K0szWas1udvZlu1+lN6QCxxVSsS4hwI4K3OqLkJX4d26NRVlThykF+4A4ODw8Xz7JnQRRY8xFJNuy045Nn7v3Qiz0f6dxI2O3pI2P7v5TtJQ3kZpSa/6ud8OI/09cKw4lII+iKnMQP5WgvY4mnxYGQ3W53VNEXpDyoUUpg066MepqlDNEWc783i0Ucpil7lqL9UuvRFZxBmp86I0Rm8swjHJGTLHdTxM5dpUeExZcSgvEGIcM2za5zLUQ3qOofeTe+nTKJvmt8aVbWo2ZBQJ7QP8rbjQ6JDFltIWso2a2uh3BQUQWQueOrYxCStAvEbntEv+sRvBY6G8QOloxoJuQtlgZ2ciZKsfJ3gh/DUVqAkKBLW0F+EtWwlIKwpahHCYvZeSEFxOgP73g56v9a0uCbtxsk0WdA7Zn9wtPHWrUjKRKy9aHTuRefV6aQigWtfYgn06F4a34PlcQFgKWon7io5vYW2DyR2RGWSjIFeRArc4cs3QvuZqj+Ux2snSzoZg89HUuxCdbdsw8CltlWxWFQb0zGz2qBdN8X8UJIeGRa63bVZ9iHHQjQS5KqsHBukkQh99Vx0NV0omMKta7u1XOeuw9m1nS3Xue1AMzJ/vxvF0vLbodMWP00jADenxl5/Xetv1/rPVr/kLCRAlPhzrwDNQpUO2HQ6ar66tgpWxSfPP1Z8T4RsUHadplDJgD42gh1p1ZEIwLo0iRPAMCAcyCLdHMLTC5ZcZumwK9lVRVZptGA9LZXOojD/KCHR84aS7CrWPOD4OpFELLeIfyseGsHv5k3a/sJzv2CVOSTGmjQlGY4FazzWF4Qnri32SvPVV4mHZ5OXQJR7QIkkVRrcAILT0cSUMoM43ZuYWYWUL1XILiLR3QaROuMQbvCakfq6TPQVQj1JCSlMaHt3KGUssUrFYXC5z50q39DxVtkHBGh27gMSf9kIfL8PiPbqLUlJPqDRHu/6sB/bsF5Qe3YmAJ8YNbH8UtzzSduTtAAHQ1ysFd6/4i2V2J+70TtthbSLswdjN19x442xaGoeSGul+5HQn0uc84MPTToerDSsHKelPk/HUD6sDggDBREC2ClamZvUjkr2LRDRU2zvklYeJe3eQJHE9PsGe0l7+SY5HuXLy4J99gTXFkf5ZIuDzg5NWhjUfIfi3DYWpuIA+d0e1nt7yMfqaG1OflEc9YXRXjW9SgnMUCSIs5/uqAlIdmoAGVkvAd8ewEB5dpXvwqh21PjiyYlZTjMmlIGfwdUmAd8lQYK1csWsAgZXcNJfU6vb5HPqPYUDPcHni87Ia+/2M1/tAb1vweipB0ONdW/GG983Fc6O/kU/T8fOxM+bNt9zir7WxG8qGcijA4UTShm0RJK3kZ3FPiOabkmNOuVs5JCk4TX7FyD98APQufsXx333T127fyhrdtIW5YM4yl5fQ4Dbwl2isOWsv9tdPo63begUVLRVagKpI2Edeg3x2WoT9y9n0AA7Hn7dqXbqHdl7Gyjss1AfUXcrNRS6yVHRwIuPhEkV6V52MNFTZi6Nc2w7M9Dzluq/mSC/qUHeu4Be++B0gZ/7zOKHLGVX1+PQvFUqIi2s/Q1aY8xSVqovYfmpLGDI7EQ++RmRbl9lUmv3pH5VtXPKW7lXdtJ/2mAdHk3N82bVDsxzu2oH5rFf9bhbdVKJvvsl4ze7pHRpOOqGhPz0f3vkNYdTkh6uAAABhWlDQ1BJQ0MgcHJvZmlsZQAAeJx9kT1Iw0AcxV9TtSoVkXYQcchQnSyIijhKFYtgobQVWnUwufRDaNKQpLg4Cq4FBz8Wqw4uzro6uAqC4AeIk6OToouU+L+k0CLGg+N+vLv3uHsHCPUyU82OcUDVLCMVj4nZ3IoYeEUPBtAFASGJmXoivZCB5/i6h4+vd1Ge5X3uz9Gn5E0G+ETiWaYbFvE68fSmpXPeJw6zkqQQnxOPGXRB4keuyy6/cS46LPDMsJFJzRGHicViG8ttzEqGSjxFHFFUjfKFrMsK5y3OarnKmvfkLwzmteU012kOI45FJJCECBlVbKAMC1FaNVJMpGg/5uEfcvxJcsnk2gAjxzwqUCE5fvA/+N2tWZiccJOCMaDzxbY/RoDALtCo2fb3sW03TgD/M3CltfyVOjDzSXqtpUWOgP5t4OK6pcl7wOUOMPikS4bkSH6aQqEAvJ/RN+WA0C3Qu+r21tzH6QOQoa6WboCDQ2C0SNlrHu/ubu/t3zPN/n4ADttyfzboUiIAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfkCREGAxZ/wDufAAADlUlEQVR42u1b30sUURT+zoxh0VYvNY9FYaglUZIhtglSSEb01FNvgUGC/4mEkPQcvRj1DwiGCBJK9SAZab5sohGxLqxporS7c3roChXm/bGzs/fOeOE8zXDvPd8937nnxwywP/ZHPcczIsqkGQAGsEBEbWkGgAFsAbifZgB2JHWU4F0kVZTg/0hqKMESSTwlWEHcpwQRNRDRRQADAJ4CmAKwrAiAu5Qgok4AIwC+aijrNiWCIPCJ6C6ANxEp7RQlrgF4WyPFa0IJLyJTzwhTnwLQkapQjohaACzEcOo7Mm8NBYjoBoC1GJW3ygn2AdiOSXHrrsEeAD8NFMkBeALgHoBLzpn8H5wvaihdBjBKRJ1BEPhOh8KNjY2HNR3eGIDWJCVDI6qcJaL+XU5cBYB5WwOdLkXlv2nEAm6EukTUAOCdgvJ5icm7WRITsb3U7Jn5ikE6PO9CujsjA4CI+g3mdaLg0aHi7RUcnrNjWOGeb02k5uJUZcWM0SRnem0K5t+V5Gx3QKL8Z9e5LyuItEuej+Xz+UqSAWiSUGTadROXAXB6zyiG+WPSK15FSfBz3JaNMvMJib/aMJm3JAHgoC0AbG5uHpAAEJpQwJmRyWRkt1HZBIAfsnVtAcD3/WOSV9ZNAFjb62EYhidtAaBcLsv2smECwNKeV4jnnbOIBbJ8JGcCwCeJ571qEQBZyfNFEwA+SJ7ftCEUFhWrXsk7cyYTtygUQrIWnH63QtJ21jQd/iKZ+LkFALyU7HG5GkuVFURCYSk2p+xD1ayh0sIar4cvEGtOyvbHzBeqXWRGAYQHdTj9QYV9RZKx3oFaB7cjRuU7odag7YvK1FQaI6uIoUDqed55AAWF/cxERk3R9FBpja0aNEh0T15F+ZCZ26NeX7U5uk1ED6N0jOLrs0Gof5cwHDn6oj3+Hurt8QlhrlFcdZMa686WSqVDtTJB3Q8kQgAviCirYxHi3W6FIOdfKepEfWQIQpaZXwHQrQgtARgH8JqIFnzfX6lUKt938nmR0raKxKYXwCnN+bcBXI/q6pONW+LqY0tkK5IrT9cSNOlQKymiXh0qz/OaNR1j1DJrlOlFOYTHfRyz4iGA4Zp5e0NKXEbtvhL/K8ITa9k3RMByWzGB0pVpAH3ONGTFXyKPAKxUofQygCExV/R7jMsqCoVCEzP3iNy8GcAZAEcAHBWvreN36ToHYJGI5ph5IgiCnOsd6P1h8/gFdxOqVZgFYYAAAAAASUVORK5CYII=";

	let iconDataZoomIn = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAC7HpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7ZddkuwmDIXfWUWWgCSExHIwP1XZQZafA7Z7umcmyb1171OqTRmwkIV8PqBnwvjrzxn+wEUlc0hqnkvOEVcqqXBFx+N5lV1TTLveV7qG8PxiD48BhknQyvlo9fKvsOvHC/ccdLzag18j7Fega+AOKGtmRqc/Jwk7n3a6MgllnJ1c3J5TPfhs252yf9xiO/QjyHoOz4ZkUKkrvIR5CEnctZ8ZyHlX3AU1icEvip/9sAf4ygSCvHze3cb4LNCLyHcvfFb/0fskPtfLLp+0zJdG6Hw7QPq9+Fvip4nlkRG/Dpjcob6KPGf3Ocf5dTVlKJqvFRXDrc56B44HJJf9WkYx3Iq+7VJQPNbYAKfHFg+URoUYVGagRJ0qTRq7bdSQYuLBYMLMjWXbHIwKN4AhSavQZAO9DmosjUcQgZkfudCet+z5Gjlm7gRXJgQjvPKPJfzb4M+UMGdbElH0h1bIi9fKQhqL3KrhBSA0L266Bb7LhT8+rZ+1VBPclsyOD6zxOEMcSh9rSzZngZ+iPXcFBetXAEiEuRXJkIBAzCRKmaIxGxF0dACqyJwl8QECpModSXISwXlk7LzmxjtG25eVMy8zziaAUMliYIP9BVgpKdaPJccaqiqaVDWrqQctWrPklDXnbHkdctXEkqllM3MrVl08uXp2c/fitXARnIFacrHipZRaOVRMVBGrwr/CcvAhRzr0yIcdfpSjNiyflpq23Kx5K6127tJxTPTcrXsvvQ4KAyfFSENHHjZ8lFEn1tqUmabOPG36LLM+qF1Uv5SfoEYXNd6klp89qMEazO4QtI4TXcxAjBOBuC0CWNC8mEWnlHiRW8xiYWwKZSSpi03otIgBYRrEOunB7oPcD3EL6j/Ejf+LXFjofge5AHRfuX1Dra/fubaJnbtwaRoFuw/jw2tgr+tHrf5q+w70DvQO9A70DvQO9A70Pwg08ccD/okNfwPxp52Gr3KN+QAAAYVpQ0NQSUNDIHByb2ZpbGUAAHicfZE9SMNAHMVfU7UqLSJ2EHEIUp0siIo4ShWLYKG0FVp1MLn0C5o0JCkujoJrwcGPxaqDi7OuDq6CIPgB4uTopOgiJf4vKbSI9eC4H+/uPe7eAUKtxFSzYwJQNctIRCNiOrMq+l7Rg350IYARiZl6LLmYQtvxdQ8PX+/CPKv9uT9HQMmaDPCIxHNMNyziDeKZTUvnvE8cZAVJIT4nHjfogsSPXJddfuOcd1jgmUEjlZgnDhKL+RaWW5gVDJV4mjikqBrlC2mXFc5bnNVShTXuyV/oz2orSa7THEYUS4ghDhEyKiiiBAthWjVSTCRoP9LGP+T44+SSyVUEI8cCylAhOX7wP/jdrZmbmnST/BGg88W2P0YB3y5Qr9r297Ft108A7zNwpTX95Row+0l6tamFjoC+beDiuqnJe8DlDjD4pEuG5EhemkIuB7yf0TdlgIFboHfN7a2xj9MHIEVdLd8AB4fAWJ6y19u8u7u1t3/PNPr7AU+jcpkXf2slAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH5AkRBhECHe6fMQAAA9JJREFUeNrtmstLVVEUxn/nJjpQm2jTgjIf1aBMSTSxmVoNKkEyCkIKwb/CQnBS0YNM6TFLNAtqkpjmg15Te4ekSQ3CupPwUhqkDc4WDpt97sO7zz5Hjws23H3vuXut79trrbP2A0IuVkDsyAGqgRpgF1AI5IvvAWJAFJgE3gPjwDNgbrWTXw/0AfPAUoptAegHDgGR1Qa8AXi9AtBu7S3QGCCPdpUCYEgjcLmNiPAJpDSJmHUzfhroBE4Ae4A8IFO0PGC3+O06MBVnnBhwMmgu3+5i7D+gB6hM0X0toAK4K8ZQjd0RhJCwxKyqDHwCFGvQsR0YcNHR5TcJqpn/A5zVbJgFNAO/XTzBFzmuMOYHUOahzlJgVqHXeE4oUCS8n5pcPpEUKkiImXw7WMCgZMA8UG5wAkoV4TBiKh8cVbhgiw8h2Kywo9HE7E9ISodXyLxs/EpsGVBUjJ6WzXWK93zJCsdKl4DlV6RcJxz0koBeSVlvGmPpIABRLDnH6fcKfLZiVVcVAAIqFKvIXC8IqJUUfUkz6+oiwAI+u4WBzoRwQOoPpmm4LlkStjilxgsCdkj95wFakL2Q+ju9IKBI6n8MEAEfFNUiABkaleRL/a9JuGaqrpwo1t3kWwJbtciClGiyUkxy6bZ4kik9+9eLEMhgFYpOAmJSf2OAcOa62aqTgFmpvyWJmI3X0n3eKZulftQLAqakfkmAPEC2ZdILAiak/v4AESDb8s4LJYelTDuTJsE6S+Fpaax6LwjIUSyGqgNAQKVidyrHK1d7ICnrCwABPdI490xuiCw6624fCChSbIjUe0mAJbadnApH8W9LTN6cfYOBk+RjCuNbfcj8ZxR2NJhQbAFPFbsw+wyCL8M+gXLaMITBY7Jtotx0GhA1VBwVY59AOXXPYR/WGJNM4LvCBaMee0I59gmUrLfJ9ALrDvGvtrSi/3C0BfVVm3bT4G8nuX4fTeMVKdf5wy46Ok3GfQS4leImxqIolqpJ/YJEFfa5g9sFiXbT4G8mAPuQ+FdkZoBu4JTI4pvErlKW+LwX+5i7C3vL3W2cOT9ivjsB+Dbx7NY47qqjDZrO9hExI8mAd7rvEVGV6QI+gX0qbfQ6jAXcSBG8/P9a4L6iaEmmzYscUIcP94DiXX5KBrws2dg3PjuAx2LH5pdIcAuifvgEPBLP1Ir/+CIW9l09XeBXlVjAtTCDvxpm8FfCDP5ymMFfCjP4i2EGfyGs4CPAq3XwIQX/Mswxfz6s4AHOhdntIf7Jy/han/1laVPM/Bghk7awgd8g9cdEQhwHTrMu67Lm5T+6iKV0sMB0LwAAAABJRU5ErkJggg==";

	let iconDataZoomOut = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAC6npUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7ZdbktwgDEX/WUWWgCSExHIwj6rsIMvPxa/pnpm8KvlKtSkDFrKQ7wF6JoxvX2f4gotK5pDUPJecI65UUuGKjsfjKntNMe31fqVzCM9P9nAPMEyCVo5Hq6d/hV3fXrjmoO3ZHvwcYT8DnQNXQFkzMzr9MUnY+bDTmUko4+jk4vaY6sZH266U/e0W20PfQdZzeDQkg0pd4SXMQ0jiXvuRgRx3xV1Qkxj8ovjRD2hUrm+FIE+fd7UxPgr0JPLVC+/Vv3vvxOd62uWdlvnUCJ1PB0g/F3+X+GFiuTPi5wGTK9RHkefsPuc4vq6mDEXzuaJiuNRZ78Bxg+Syv5ZRDLeib3spKB5rbIDTY4sbSqNCDCozUKJOlSaNvW3UkGLiwWDCzI1ltzkYFW6gRJJWockGeh3UWBqPIAIz37nQPm/Z52vkmLkTXJkQjPDKD0v42eCflDBnWxJR9Fsr5MVr5SKNRW7V8AIQmic33QW+yok/PqyftVQT3JbMjg+scTtCbEpva0t2zgI/RXvsCgrWzwCQCHMrkiEBgZhJlDJFYzYi6OgAVJE5S+INBEiVO5LkJILzyNh5zY13jHZfVs68zDibAEIli4EN9hdgpaRYP5Yca6hibyVVzWrqQYvWLDllzTlbXodcNbFkatnM3IpVF0+unt3cvXgtXARnoJZcrHgppVYOFRNVxKrwr7BsvMmWNt3yZptvZasNy6elpi03a95Kq527dBwTPXfr3kuvg8LASTHS0JGHDR9l1Im1NmWmqTNPmz7LrDe1k+qH8gfU6KTGO6nlZzc1WIPZFYLWcaKLGYhxIhC3RQALmhez6JQSL3KLWSyMTaGMJHWxCZ0WMSBMg1gn3ezeyP0Wt6D+W9z4V+TCQvcvyAWg+8jtE2p9/c61ndixC5emUbD7MD68Bva6ftTq37avQK9Ar0CvQK9Ar0CvQP9BoIk/HvBPbPgOYoidjpudwrMAAAGFaUNDUElDQyBwcm9maWxlAAB4nH2RPUjDQBzFX1O1Ki0idhBxCFKdLIiKOEoVi2ChtBVadTC59AuaNCQpLo6Ca8HBj8Wqg4uzrg6ugiD4AeLk6KToIiX+Lym0iPXguB/v7j3u3gFCrcRUs2MCUDXLSEQjYjqzKvpe0YN+dCGAEYmZeiy5mELb8XUPD1/vwjyr/bk/R0DJmgzwiMRzTDcs4g3imU1L57xPHGQFSSE+Jx436ILEj1yXXX7jnHdY4JlBI5WYJw4Si/kWlluYFQyVeJo4pKga5QtplxXOW5zVUoU17slf6M9qK0mu0xxGFEuIIQ4RMiooogQLYVo1UkwkaD/Sxj/k+OPkkslVBCPHAspQITl+8D/43a2Zm5p0k/wRoPPFtj9GAd8uUK/a9vexbddPAO8zcKU1/eUaMPtJerWphY6Avm3g4rqpyXvA5Q4w+KRLhuRIXppCLge8n9E3ZYCBW6B3ze2tsY/TByBFXS3fAAeHwFiestfbvLu7tbd/zzT6+wFPo3KZF39rJQAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB+QJEQYRN0tdWxIAAAO4SURBVHja7ZrPS1VBFMc/9yW6UNto24LyZ7UoUxJNbKdWi0qQjIKQQuivsBDcVPQDTenHTtEsqE1hlj/o19ayX0iW1CKstwkfpUHa4o7wmOa+HzF37uj1wMA77913z/meOefMmTMDISfHEj1ygBqgFtgOFAH54nuAGBAFpoA3wDjwBJhb6cZvAAaAeWApzbEADAL7gchKA94IvPwP0F5jEmiyyKM9qQAY1ghcHiMifKykZhGzXsp/BLqAo8BOIA/IFCMP2CF+6wSmE7wnBhyzzeXbPZT9A/QBVWm6rwNUAr3iHap3d9gQEo6YVZWCD4ESDTIKgQceMrqDNoJq5n8BpzQr5gAtwE8PTwiEjiiU+QaU+yizDJhVyDWeEwoUCe+7JpdPRkUKI8RMrg4OMCQpMA9UGJyAMkU4jJjKB4cULtgaQAi2KPRoMjH7E5LQRwFlYkexOkz6XTbXK9b50gBXoUJFnbDPT4H9krB+CwqxXkmnQb8EZSt2ddUWGKBSsYvM9UNQnSTokyW7Mwf44BUGOhPCXolfXgqDpiWhSzzV+mGArRL/1KIN2TOJ3+aHAYol/p1FBnirqBYByNAoJF/iP6fgmrpj3Yu+JNFVCy1IiSYrBQPoHIkoU3r2tx8hkMEKJJ0GiEn8eotw5nrpqtMAsxK/KYWY1TkS0UaJj/phgGmJL7XIA2RdpvwwwITE77HIALIur/0QckDKtDPYcWLj4Lbc43Vr8ENQjmIzVGOBAar4tzuV45ewO5KwAQsM0CfpdMtkQ2Qxvu4OgIoVDZEGv+NtUhI4SnAtMbk5+8pEXjqsKFNPB2CAkwo9Gk1Z/rGiC7PbIPhy3BOoeB2GTXriFlFuxisQNVQcleCeQMXLnsM9rDFGmcBXhQtGffaECtwTKFlus+kN1k0SX205jf7D0VbUV23aTYO/keL+fVTTElmKe/iiktFlMu4jwPU0mxiLoliqIf0LEtW45w5eFyTaTYO/lgTsXRJfkZkBeoDjIotvEF2lLPF5F+4xdzduy93rPXNBxHxPEvBt4tnNCdxVxxgyne0jYkZSAR/vvgdFVaYL+ATuqbTRitMBrqYJXv5/HXBbUbSkMuZFDqgPotROdPkpFfAyZePe+OwA7ouOzQ+R4BZE/fAeuCeeqRP/CazB0KkR/IoiB7gSZvCXwwz+UpjBXwwz+AthBn8+zODPhRV8BHixBj6k4J+HOebPhhU8wJkwuz0kvmMzvtpnf5naFDM/RsioLWzg10n8mEiI48AJ1miNVj39BdsEfKFxgG5GAAAAAElFTkSuQmCC";

	let iconDataFlip = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsTAAALEwEAmpwYAAAEzklEQVR42u2bb4hUVRTAf9d54/iX/kC7EkKZhgQWuJQfxG3uXXf7M1BZkJWYFkUfKsxPloH9sUSNJIzISLHyX2EhpVKZA/e+SjHFLAurTxn4IduErGZTZndOH3ojIbvuzLw3O895Hngfhvfuuff85pxzz733PeWcI8kyjITLBQBJB+DVU3kul8v09PRMA6YA1wTX5cDY4BoTPHoaOAX8BfwG/AocVUr9ICJHlFJfW2v/rscYVdRJsLOzs7W3t3c2cAuQBUZHoLYPOARYpdQ259xXIiKxAmCM0SLyKDALSNfZc39RSq0D3rDW/t5QANlsdppSaiWgGxDCp4DXlFLLrLV/DCkAY8zFIvIqcH8MctkJpdRCa+2mIQGgte4A3gHGxyypbykWiw/v2bPnn7pNg1rrBcBnMTQeYE46nXbZbPayugDQWr8CrAZSMZ7apyml8l1dXRdFCiAwfmGVgzkZeMtyYL5Sqj2VSk0qlUqXFgqF4b7vDxs1atSIVCo1HugAngEORwDhumKxuN0Y40WSA7TWS4ClFXb+E/C+iOxobW09uHXr1r4awswALwNtIUGscM4tDgVAa30X8AGgBpmO3hORNb7v74+orvBEZBmwKIQaUUpNt9buqwmA1noC8G1QtvYnBeB1z/NW5fP54/UIaGPMUyKyPISKQy0tLTcM5IkD5gCllAqmurEDlKZrPM+b6JxbVC/jAay1K4ANIVRM7e7uvrPqxZDW+iGgvZ9bXwCPOee+G6q0nk6nFxSLxZuB1priQGRxEMaVeYAxZoyIvNhPRn/E9/3sUBoPsHv37pPAyhAq2rLZbFs1IfD4WbStUmqKc25tVKuwGrxgfZBsa1v0KDW/IgC5XC4jIk8EP3uBJ1taWrqstccaWd0EXmBDqLitIgA9PT13AOOAY0DWOfdSLXN5XTYvlNobovmEjo6OyZWEwD3A5yLS5pzbS7zkxzCNS6XS9EoAHCkUCp2+73fHrcgXkRMhVVw/KADn3JIDBw4UoxjwzJkzr9BaPxgjhlNCL4erdDkFrDXGPBBRDmgNqeKqIQUQSEpE1mmt50UQAteGVHFJIwAQ7B+s11qH3T67NWT74Y0CUIbwljFmbi2NtdZTgakhx/BnIwGUw+HtGiE8F0H/xxsN4AwErfWcKpbEs4DbI+j7+zgAKIfDBq31fRVMpRNFZH1E/R6MC4AyhI3GmHvP8c+P6+vr+6S/7F3jLPJpnACUw2GT1np2P8ZfKSIOuDqivo76vn84bgDKnrBZa333/4yfISL7gMkR9rOxqh2hIRYP2GKMSQGTROTZiMdWVEq9GWcAAJ6IvFsn3ZsH2s9Iwhsip5VSzw90MwkAVltrjyYVwM+ZTOacJ1rNDKBPKTVv165dhaQCWGqt/XKwh5oVwIe+779QyYPNCGB/JpOZW+n5RbMB+MbzvNxgcd+sAPZ5nteZz+er2jluFgDbMplM1cbHrRSutcZ/2jm3qtYzy/PdA0oicjjMge35DiADfKS1vimpAABGBBC6kgrgDARjTGdSAQCMFJHtwWu8iQQAMBLYWQ2EZiyFRwLbg5ctEwkA/vtKZYcxRicVAMBoEdmptb4xqQDKnvDxuSAkYU+wDKE9qQDOQDDGzDj7hrrw7XDC5QKApAP4F7FCu5tOwUL+AAAAAElFTkSuQmCC";

	let iconDataRule = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAC4jAAAuIwF4pT92AAAAB3RJTUUH5AkVBxkYpvURIwAAABl0RVh0Q29tbWVudABDcmVhdGVkIHdpdGggR0lNUFeBDhcAAAC2SURBVHja7dvBEYMwDEVBxNB/y6IFDpI12EsBSXDe3yGHRGZeJ19P9xtERNkJZ2ZUf777Lzff8XpLCqj65jpuvr2AP1zHH8CSCXzNtwM5BeyCoAIcwKYITs9DARCEoAlAUAEQhKAJQFABEISgCQwgOD0VBUAQgibgSVABEISgCUBQARCEoAlAUAEQhKAJrEVweioKgCAETcCToAIgCEETgKACIAhBExj+ObxdAdXb77AkTv/7/AtPB2SXljTI1gAAAABJRU5ErkJggg==";

	let iconDataMoveLight = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsTAAALEwEAmpwYAAADmklEQVR42u2Zz2sdVRSAv5OxjzQGumgbkC5UGjftH5F7GV7VpaX+SAkSrYkIWXUhdOFCFwUrXXVhkwpWeUhIoYiuQni9Ny5ciYLRjSIqqE2IGyEhwnDfddFbmAwvcRLf883j3QMD887M3HvO986558wdsdYyyDLEgEsEEAFEABFABBABRAARQAQQAUQAEUAEMIjySK8m1lpf8N7fBDxwyVr72UBFQHD+OHACuDmIKXA8dz4W14AIoI8BpGl6ql6vH/u/jK7X68cmJiYeqwQApdQN59xvWZbd11q/dIBHN3Ln6weY72KWZesi8odS6npPAaRpegqYCz+Peu8bB4AwC9wHfg/nZUrnFPAxMBxUl7XWJ3rWBwwNDW0553aAo0GVBAgYYxb3ezbU/dK1X2s95b2/DSQ59XatVtvpWQSsrKz8JSKvAi6nTrz3DaVU/d+elyAlwv7ZNs474OXl5eXtnnaCxphFrTXe+0bOwASYBlYKjjwFTAIaOBuaIIA/ge+Be0mSfNJsNn8qTPNKG+cnrbV3K1EFjDGLIjKVjwQRWcuF77hS6i7wA/A2oICTgITjZNC945z7USl1Ryn1ZG6K79o4f6dSfUCA8AzQEJErW1tb14Pz0977b4HnSg4lwAVgLSx6jIyMvCsibwEN4FynnAeQbn4cVUpdAa7+x2HetNa+13edoNZ6eg/nvxKRmSRJxkXkiIgcSZJkHHgd+KbN/deUUhe7ZWdXIiBN09POubVceQTYFpE5a+1H3nu/V1VQSl3y3t/I1XqA7SRJzjabzV/7IgKcc9cKzu8A54wxt/dyPrwie2PMB8DTwN+5S4865672RQqkaXoaOF9Qz1lrvyw7hrX2C+ByQf1imqaPVx5Aq9WaLKi+Xl1d/fCg44yNjS0Uyl/inHuh8gC897qQ17f2C/u9ZGlpyQG3imtrp+0t3Qkqpc4D87nu7aFsAq/l9vTOFACYQ6/QIvcK7M6UsUdEZo0xn3Y6AhbaTEbo4vJ7ervuGR4e/uWwAGq12s/FzChjj/d+oRspsF8Yt/K5uuvv2NxsdSlly9rTMQCzYePCFY7i+/xG/vro6OihV+4sy54ozLVe0p6ZSrTC/SBxUzQCGHDp+LdBpdTzwPvs/vLTCdnkwTfEzysbAWF/b74Lzj/sN+b7IQVaXYzYVqUBhJ5/JoRrp2UDeKMvNkRiFYgAIoAIIAKIACKACCACiAAigAggAogAIoBKyz/0mkUCzduJFAAAAABJRU5ErkJggg==";

	let iconDataMoveObject = "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAABrklEQVR42u1byw7DIAxbItT9/+e2l+yySdPWqkBIHB6cJk0t2IlNQlsSkcfMgx+Tj0UAcnIi2oloR64hgQOwTZsBRCRnv6cg4AwwigRG6L7mP7P1eNcBd5EWERo2A3LS3FsKHAk8ggRG6x7tBy4eUBtRDz/gqOC9pMBRwXuRwJF0j/ADMw9oHTkrP+AewFtKgRAnQldgvKtA+HlAhLEIWAQE36et52bF5DsS/DcJmjoh9Rb1i7ERkdTsIjwAeNXauLeUby2J1HvUtZLgAcEXrZ17T3mtJE57gRGA5/YaPAv4K2w8WsqXSmL6XuDPA0bPgl8f4AiHEkgTvDwReutkq71xzf7c6j4n4xCRZ1El+Lmgd0nckcqto9sT+Oxd4H2joyPsR27gUgGbXUiiNGPZeoLI4KsLoYCSOGoDkxRsh5CENiMZvQD03Ou5wGqG7B6PZ5fSmlI2LAEtDdLSZ0wl0GLh1iZr7gEaAEO8JfbRsNM1sTxA4wde9YXbNlgCyLO4cq0DcoAN/bZ4hrbdG6z1lliUJgbVVMF6gW/AyI4S/dkc/FCF1rfD6zxgETD1eAGrxvsTEoocQwAAAABJRU5ErkJggg==";//Define constants:
	var IconRendererConst =
		{
			DefaultBackgroundColor: [0.55, 0.55, 0.55, 0.65]	//Force background color {Red, Green, Blue, Alpha}, disabled when alpha is zero
		};
	Object.defineProperty(IconRendererConst, 'DefaultBackgroundColor', { writable: false });

	//Constructor:
	function IconRenderer(canvas)
	{
		//Store GL-Context:
		this.glContext = canvas.getContext("webgl", {premultipliedAlpha: false});
		let gl = this.glContext;
		//No valid context avail:
		if(!gl)
			throw 'IconRenderer(..): Initialization of WebGL failed!\nPlease use a web browser with WebGL-Support!';
		//Init var(s):
		this.icons = [];
		this.backgroundColor = Object.assign({}, IconRendererConst.DefaultBackgroundColor);
		let VSProgramText = `
	  attribute vec2 inVertexPos;
	  attribute vec2 inTexCoord;
	  uniform mat4 matMVP;          //ModelviewProjection-Matrix
	  varying vec2 texCoord0;
	  void main()
	  {
	    gl_Position = matMVP * vec4(inVertexPos, 0.0, 1.0);
	    texCoord0 = inTexCoord;
	  }`;
		let FSProgramText = `
	  precision mediump float;
	  varying vec2 texCoord0;
	  uniform sampler2D colorTex;
	  uniform vec4 colorMultiplier;
	  uniform vec4 backgroundColor;
	  void main()
	  {
	    vec4 col = texture2D(colorTex, texCoord0);
	    if(col.a < 0.5)
	    {
	      if(backgroundColor.a == 0.0)
		      discard;
	      col = backgroundColor;
	    }
	    col *= colorMultiplier;
	    gl_FragColor = col;
	  }`;
		//Load shader program:
		this.program = new GLProgram(gl, VSProgramText, FSProgramText);
		//Bind shader variables:
		this.shaderLocInVertexPos = gl.getAttribLocation(this.program.glID, "inVertexPos");
		this.shaderLocInTexCoord = gl.getAttribLocation(this.program.glID, "inTexCoord");
		this.shaderLocMatMVP = gl.getUniformLocation(this.program.glID, "matMVP");
		this.shaderLocColorTex = gl.getUniformLocation(this.program.glID, "colorTex");
		this.shaderLocBackgroundColor = gl.getUniformLocation(this.program.glID, "backgroundColor");
		this.shaderLocColorMultiplier = gl.getUniformLocation(this.program.glID, "colorMultiplier");
		//Create VBO for geometry data:
		this.vbo = new GLVBO(gl);
		//Init var(s):
		this.hitIconIndex = -1;
		this.hitIconTime = (new Date()).getTime();
	}

	//Function adds icons:
	IconRenderer.prototype.addIcons = function(icons)
	{
		let nIcons = icons.length;
		for(let n = 0; n < nIcons; ++n)
		{
			//Check for equal size of all icons:
			if (this.icons.length > 0 && (this.icons[0].imageActive.width != icons[n].imgActive.width || this.icons[0].imageActive.height != icons[n].imgActive.height ||
				this.icons[0].imageActive.width != icons[n].imgInactive.width || this.icons[0].imageActive.height != icons[n].imgInactive.height))
				throw 'IconRenderer::addIcons(..): All icons must have the same size!';
			//Add icon to list:
			this.icons.push({ id: icons[n].id, active: 1, imageActive: icons[n].imgActive, imageInactive: icons[n].imgInactive, x: 10 + this.icons.length * (icons[n].imgActive.width * 1.1), y: 10, w: 64, h: 64, animateClicked: icons[n].animateClicked });
		}
		//Special position arrangement for 6 items:
		if (this.icons.length == 6)
		{
			let x = 10, y = 10;
			for (let i = 0; i < this.icons.length; ++i)
			{
				this.icons[i].x = x;
				this.icons[i].y = y;
				if (i == 0 || i == 1 || i == 3)
					x += (icons[i].imgActive.width * 1.25)
				else
					x = 10;
				if(i == 2 ||i == 4)
					y += (icons[i].imgActive.height * 1.25)
			}
		}
		//Arrange all icons at the bottom line:
		else
			for (let i = 0; i < this.icons.length; ++i)
			{
				this.icons[i].x = 10 + i * (icons[i].imgActive.width * 1.25);
				this.icons[i].y = 10;
			}
		this.createIconTexture2D();
		this.updateVBO();
	}

	//Function clears data:
	IconRenderer.prototype.clearData = function()
	{
		this.icons = [];
		//NOTE: No need for clearing textures here
	}

	//Function create texture:
	IconRenderer.prototype.createIconTexture2D = function()
	{
		let gl = this.glContext;
		let nIcons = this.icons.length;
		let texHeight = this.icons[0].h;
		let texWidth = this.icons[0].w * nIcons * 2;
		//console.log("createIconTexture2D(..): Create icon texture with " + texWidth + " x " + texHeight + " pixel.");
		let IData = new Uint8Array(texWidth * texHeight * 4);
		for (let i = 0; i < texWidth * texHeight * 4; ++i)
			IData[i] = i % 4 == 3 ? 0 : 127;
		this.texture = new GLTexture(gl, texWidth, texHeight, IData, gl.TEXTURE_2D, gl.RGBA, gl.RGBA, gl.NEAREST, gl.NEAREST, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE);  //NOTE: null is not accepted in texImage2D(..), so default image data is used
		for (let n = 0; n < nIcons; ++n)  //partial update of the texture by loading the icon images
		{
			let xoffset = this.icons[0].w * n * 2;
			let yoffset = 0;
			//console.log("createIconTexture2D(..): Uploading texture with " + this.icons[n].image.width + " x " + this.icons[n].image.height + " pixel.");
			this.texture.updatePartialTexture(xoffset, yoffset, this.icons[n].imageActive);
			xoffset += this.icons[0].w;
			this.texture.updatePartialTexture(xoffset, yoffset, this.icons[n].imageInactive);
		}
	}

	//Function returns tooltip text of a specific icon (empty string if iconID is invalid):
	IconRenderer.prototype.getIconToolTipText = function(iconID)
	{
		if(iconID == "IconFlip")
			return "Show other side.";
		else if(iconID == "IconMoveObjectOrLight")
			return "Toogle manipulation of light or object position.";
		else if(iconID == "IconResetView")
			return "Reset view and light direction.";
		else if(iconID == "IconRule")
			return "Toogle visualization of scale.";
		else if(iconID == "IconZoomIn")
			return "Zoom in.";
		else if(iconID == "IconZoomOut")
			return "Zoom out.";
		else
		{
			console.log("IconRenderer::getIconToolTipText(..): Tooltip text for '" + iconID + "' is not avail!");
			return "";
		}
	}

	//Function returns id of hitted icon (empty string if nothing was hit):
	IconRenderer.prototype.hitIcon = function(x, y, iconClicked)
	{
		let result = "";
		for (let n = 0; n < this.icons.length; ++n)
		{
			let icon = this.icons[n];
			if(x >= icon.x && x <= icon.x + icon.w && y >= icon.y && y <= icon.y + icon.h)
			{
				//console.log("hitIcon(..): Hitted \"" + icon.id + "\" at position {" + x + ", " + y + "}");
				if(iconClicked)
				{
					this.icons[n].active = this.icons[n].active == 0 ? 1 : 0;
					this.updateVBO();
					if(this.icons[n].animateClicked)
					{
						this.hitIconIndex = n;
						this.hitIconTime = (new Date()).getTime();
					}
					else
						this.hitIconIndex = -1;
				}
				return icon.id;
			}
		}
		return "";
	}

	//Function renders a frame:
	IconRenderer.prototype.render = function()
	{
		if(this.icons.length == 0)
			return;
		let gl = this.glContext;
		//Setup rendering:
		gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
		gl.enable(gl.DEPTH_TEST);
		gl.depthFunc(gl.LEQUAL);
		//Bind shader and textures:
		this.program.bind();
		gl.uniform1i(this.shaderLocColorTex, 0);
		gl.activeTexture(gl.TEXTURE0);
		this.texture.bind();
		//Set parameter(s):
		gl.uniform4f(this.shaderLocBackgroundColor, this.backgroundColor[0], this.backgroundColor[1], this.backgroundColor[2], this.backgroundColor[3]);
		let matProj = new Matrix4f();
		let left = 0.0, right = gl.canvas.width, bottom = 0.0, top = gl.canvas.height, near = -1.0, far = 1.0;
		matProj.setOrtho(left, right, bottom, top, near, far);
		gl.uniformMatrix4fv(this.shaderLocMatMVP, false, matProj.data); //NOTE: There is no modelview matrix necessary here, we can take the projection matrix directly
		//Set geometry data:
		let size = 2;          //2 components per vertex
		let type = gl.FLOAT;   //32-Bit floats
		let normalize = false; //no data normalization
		let stride = 16;        //stride to next element (number of bytes)
		let offset = 0;        //start of buffer data
		this.vbo.bind();
		gl.vertexAttribPointer(this.shaderLocInVertexPos, size, type, normalize, stride, offset);
		offset = 8;
		gl.vertexAttribPointer(this.shaderLocInTexCoord, size, type, normalize, stride, offset);
		gl.enableVertexAttribArray(this.shaderLocInVertexPos);
		gl.enableVertexAttribArray(this.shaderLocInTexCoord);
		//Enable blending:
		gl.enable(gl.BLEND);
		gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		//Draw the geometry:
		let primitiveType = gl.TRIANGLES;
		offset = 0;
		let nIcons = this.icons.length;
		let count = nIcons * 6;
		if(this.hitIconIndex >= 0 && this.hitIconIndex < nIcons)
		{
			//draw active icon:
			let timeSinceClicked = ((new Date()).getTime() - this.hitIconTime) * 0.001;  //seconds
			let blendFactor = 1.0 - (timeSinceClicked < 0.9? timeSinceClicked / 0.9: 1.0);  //1.0 -> 0.1
			let invBlendFactor = 1.0 - blendFactor;
			let activeIconColor = [0.38 * 2.2, 0.55 * 2.2, 0.71 * 2.2];
			gl.uniform4f(this.shaderLocColorMultiplier, activeIconColor[0] * blendFactor + invBlendFactor, activeIconColor[1] * blendFactor + invBlendFactor, activeIconColor[2] * blendFactor + invBlendFactor, 2.0 * blendFactor + invBlendFactor);
			offset = this.hitIconIndex * 6;
			gl.drawArrays(primitiveType, offset, 6);
			//draw inactive icon(s) before and after the active icon:
			gl.uniform4f(this.shaderLocColorMultiplier, 1.0, 1.0, 1.0, 1.0);
			if(this.hitIconIndex > 0)
				gl.drawArrays(primitiveType, 0, this.hitIconIndex * 6);
			if(this.hitIconIndex < nIcons)
				gl.drawArrays(primitiveType, this.hitIconIndex * 6 + 6, (nIcons - this.hitIconIndex - 1) * 6);
		}
		else
		{
			gl.uniform4f(this.shaderLocColorMultiplier, 1.0, 1.0, 1.0, 1.0);
			gl.drawArrays(primitiveType, offset, count);
		}
		//Reset state(s):
		gl.disable(gl.BLEND);
	};

	//Function updates VBO with geometry for all icons:
	IconRenderer.prototype.updateVBO = function()
	{
		let nIcons = this.icons? this.icons.length: 0;
		if(nIcons == 0)
			return;
		let data = [];
		let iconDimSize = 64;
		let deltaTX = 1.0 / nIcons / 2;
		for (let n = 0; n < nIcons; ++n)
		{
			let minX = this.icons[n].x;
			let maxX = minX + this.icons[n].w;
			let minY = this.icons[n].y;
			let maxY = minY + this.icons[n].h;
			let minU = deltaTX * n * 2;
			if (this.icons[n].active == 0)
				minU += deltaTX;
			let maxU = minU + deltaTX;
			data.push(...[   minX, minY, minU, 1.0,        //PosX, PosY, TexCoordX, TexCoordY
				minX, maxY, minU, 0.0,
				maxX, minY, maxU, 1.0,
				minX, maxY, minU, 0.0,
				maxX, maxY, maxU, 0.0,
				maxX, minY, maxU, 1.0]);
		}
		this.vbo.update(new Float32Array(data));
	}
	let MATRIX4F_ARRAY_T = typeof Float32Array !== "undefined"? Float32Array: Array;     //Data type of the array
	let MATRIX4F_VALUE_COUNT = 16;                                                       //Number of data values

	//Standard constructor:
	function Matrix4f()
	{
		this.data = new MATRIX4F_ARRAY_T(MATRIX4F_VALUE_COUNT);
		for (let n = 0; n < MATRIX4F_VALUE_COUNT; ++n)
			this.data[n] = 0.0;
	}

	//Constructor with parameter:
	function Matrix4f(val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, val10, val11, val12, val13, val14, val15)
	{
		this.data = new MATRIX4F_ARRAY_T(MATRIX4F_VALUE_COUNT);
		this.data[0] = val0;
		this.data[1] = val1;
		this.data[2] = val2;
		this.data[3] = val3;
		this.data[4] = val4;
		this.data[5] = val5;
		this.data[6] = val6;
		this.data[7] = val7;
		this.data[8] = val8;
		this.data[9] = val9;
		this.data[10] = val10;
		this.data[11] = val11;
		this.data[12] = val12;
		this.data[13] = val13;
		this.data[14] = val14;
		this.data[15] = val15;
	}

	//Function returns cloned matrix:
	Matrix4f.prototype.clone = function()
	{
		let result = new Matrix4f();
		for (let n = 0; n < MATRIX4F_VALUE_COUNT; ++n)
			result.data[n] = this.data[n];
		return result;
	}

	//Function inverts current matrix:
	Matrix4f.prototype.invert = function()
	{
		let a00 = this.data[0], a01 = this.data[1], a02 = this.data[2], a03 = this.data[3];
		let a10 = this.data[4], a11 = this.data[5], a12 = this.data[6], a13 = this.data[7];
		let a20 = this.data[8], a21 = this.data[9], a22 = this.data[10], a23 = this.data[11];
		let a30 = this.data[12], a31 = this.data[13], a32 = this.data[14], a33 = this.data[15];
		let b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11;
		let b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30;
		let b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;
		let d = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
		if (!d) //can't compute inverted matrix
		{
			console.log("Matrix4f::invert(): Determinant is zero!");
			return;
		}
		d = 1.0 / d;
		this.data[0] = (a11 * b11 - a12 * b10 + a13 * b09) * d;
		this.data[1] = (a02 * b10 - a01 * b11 - a03 * b09) * d;
		this.data[2] = (a31 * b05 - a32 * b04 + a33 * b03) * d;
		this.data[3] = (a22 * b04 - a21 * b05 - a23 * b03) * d;
		this.data[4] = (a12 * b08 - a10 * b11 - a13 * b07) * d;
		this.data[5] = (a00 * b11 - a02 * b08 + a03 * b07) * d;
		this.data[6] = (a32 * b02 - a30 * b05 - a33 * b01) * d;
		this.data[7] = (a20 * b05 - a22 * b02 + a23 * b01) * d;
		this.data[8] = (a10 * b10 - a11 * b08 + a13 * b06) * d;
		this.data[9] = (a01 * b08 - a00 * b10 - a03 * b06) * d;
		this.data[10] = (a30 * b04 - a31 * b02 + a33 * b00) * d;
		this.data[11] = (a21 * b02 - a20 * b04 - a23 * b00) * d;
		this.data[12] = (a11 * b07 - a10 * b09 - a12 * b06) * d;
		this.data[13] = (a00 * b09 - a01 * b07 + a02 * b06) * d;
		this.data[14] = (a31 * b01 - a30 * b03 - a32 * b00) * d;
		this.data[15] = (a20 * b03 - a21 * b01 + a22 * b00) * d;
	}

	//Function multiplies matrix to current matrix:
	Matrix4f.prototype.multiply = function(matRight)
	{
		//Backup current values:
		let v00 =  this.data[0], v01 =  this.data[1], v02 =  this.data[2], v03 =  this.data[3];
		let v10 =  this.data[4], v11 =  this.data[5], v12 =  this.data[6], v13 =  this.data[7];
		let v20 =  this.data[8], v21 =  this.data[9], v22 = this.data[10], v23 = this.data[11];
		let v30 = this.data[12], v31 = this.data[13], v32 = this.data[14], v33 = this.data[15];
		//Compute row 1:
		let mr0 = matRight.data[0], mr1 = matRight.data[1], mr2 = matRight.data[2], mr3 = matRight.data[3];
		this.data[0] = mr0 * v00 + mr1 * v10 + mr2 * v20 + mr3 * v30;
		this.data[1] = mr0 * v01 + mr1 * v11 + mr2 * v21 + mr3 * v31;
		this.data[2] = mr0 * v02 + mr1 * v12 + mr2 * v22 + mr3 * v32;
		this.data[3] = mr0 * v03 + mr1 * v13 + mr2 * v23 + mr3 * v33;
		//Compute row 2:
		let mr4 = matRight.data[4], mr5 = matRight.data[5], mr6 = matRight.data[6], mr7 = matRight.data[7];
		this.data[4] = mr4 * v00 + mr5 * v10 + mr6 * v20 + mr7 * v30;
		this.data[5] = mr4 * v01 + mr5 * v11 + mr6 * v21 + mr7 * v31;
		this.data[6] = mr4 * v02 + mr5 * v12 + mr6 * v22 + mr7 * v32;
		this.data[7] = mr4 * v03 + mr5 * v13 + mr6 * v23 + mr7 * v33;
		//Compute row 3:
		let mr8 = matRight.data[8], mr9 = matRight.data[9], mr10 = matRight.data[10], mr11 = matRight.data[11];
		this.data[8]  = mr8 * v00 + mr9 * v10 + mr10 * v20 + mr11 * v30;
		this.data[9]  = mr8 * v01 + mr9 * v11 + mr10 * v21 + mr11 * v31;
		this.data[10] = mr8 * v02 + mr9 * v12 + mr10 * v22 + mr11 * v32;
		this.data[11] = mr8 * v03 + mr9 * v13 + mr10 * v23 + mr11 * v33;
		//Compute row 4:
		let mr12 = matRight.data[12], mr13 = matRight.data[13], mr14 = matRight.data[14], mr15 = matRight.data[15];
		this.data[12] = mr12 * v00 + mr13 * v10 + mr14 * v20 + mr15 * v30;
		this.data[13] = mr12 * v01 + mr13 * v11 + mr14 * v21 + mr15 * v31;
		this.data[14] = mr12 * v02 + mr13 * v12 + mr14 * v22 + mr15 * v32;
		this.data[15] = mr12 * v03 + mr13 * v13 + mr14 * v23 + mr15 * v33;
	}

	//Function computes multiplication of matrix and vector:
	Matrix4f.prototype.multipliedByVector4f = function(x, y, z, w)
	{
		let result = [this.data[0] * x + this.data[4] * y + this.data[8] * z + this.data[12] * w,
			this.data[1] * x + this.data[5] * y + this.data[9] * z + this.data[13] * w,
			this.data[2] * x + this.data[6] * y + this.data[10] * z + this.data[14] * w,
			this.data[3] * x + this.data[7] * y + this.data[11] * z + this.data[15] * w];
		return result;
	}

	//Function sets identity matrix:
	Matrix4f.prototype.setIdentity = function(left, right, bottom, top, near, far)
	{
		this.data[0] = 1.0;
		this.data[1] = 0.0;
		this.data[2] = 0.0;
		this.data[3] = 0.0;
		this.data[4] = 0.0;
		this.data[5] = 1.0;
		this.data[6] = 0.0;
		this.data[7] = 0.0;
		this.data[8] = 0.0;
		this.data[9] = 0.0;
		this.data[10] = 1.0;
		this.data[11] = 0.0;
		this.data[12] = 0.0;
		this.data[13] = 0.0;
		this.data[14] = 0.0;
		this.data[15] = 1.0;
	}

	//Function sets orthographic projection matrix:
	Matrix4f.prototype.setOrtho = function(left, right, bottom, top, near, far)
	{
		let idx = 1.0 / (left - right);
		let idy = 1.0 / (bottom - top);
		let idz = 1.0 / (near - far);
		this.data[0] = -2.0 * idx;
		this.data[1] = 0.0;
		this.data[2] = 0.0;
		this.data[3] = 0.0;
		this.data[4] = 0.0;
		this.data[5] = -2.0 * idy;
		this.data[6] = 0.0;
		this.data[7] = 0.0;
		this.data[8] = 0.0;
		this.data[9] = 0.0;
		this.data[10] = 2.0 * idz;
		this.data[11] = 0.0;
		this.data[12] = (left + right) * idx;
		this.data[13] = (top + bottom) * idy;
		this.data[14] = (far + near) * idz;
		this.data[15] = 1.0;
	}

	//Function transposes current matrix:
	Matrix4f.prototype.transpose = function()
	{
		let temp = this.data[1];
		this.data[1] = this.data[4];
		this.data[4] = temp;
		temp = this.data[2];
		this.data[2] = this.data[8];
		this.data[8] = temp;
		temp = this.data[3];
		this.data[3] = this.data[12];
		this.data[12] = temp;
		temp = this.data[6];
		this.data[6] = this.data[9];
		this.data[9] = temp;
		temp = this.data[7];
		this.data[7] = this.data[13];
		this.data[13] = temp;
		temp = this.data[11];
		this.data[11] = this.data[14];
		this.data[14] = temp;
	}
	//Function creates font texture data:
	function createFontTextureData()
	{
		let result = { width: 256, height: 256, data: null };
		let i = new Uint8Array(262144);
		//NOTE: The generator code is smaller then a Base64-coded png image.
		for (let n = 0; n < i.length; ++n)
			i[n] = 0;
		i[2904]=i[2905]=i[2906]=i[2907]=i[2964]=i[2965]=i[2966]=i[2967]=i[3032]=i[3033]=i[3034]=i[3035]=i[3932]=i[3933]=i[3934]=i[3935]=i[3988]=i[3989]=i[3990]=250;
		i[3991]=i[4060]=i[4061]=i[4062]=i[4063]=i[4120]=i[4121]=i[4122]=i[4123]=i[4124]=i[4125]=i[4126]=i[4127]=i[4128]=i[4129]=i[4130]=i[4131]=i[4180]=i[4181]=250;
		i[4182]=i[4183]=i[4196]=i[4197]=i[4198]=i[4199]=i[4248]=i[4249]=i[4250]=i[4251]=i[4252]=i[4253]=i[4254]=i[4255]=i[4256]=i[4257]=i[4258]=i[4259]=i[4312]=250;
		i[4313]=i[4314]=i[4315]=i[4316]=i[4317]=i[4318]=i[4319]=i[4320]=i[4321]=i[4322]=i[4323]=i[4376]=i[4377]=i[4378]=i[4379]=i[4380]=i[4381]=i[4382]=i[4383]=250;
		i[4384]=i[4385]=i[4386]=i[4387]=i[4440]=i[4441]=i[4442]=i[4443]=i[4444]=i[4445]=i[4446]=i[4447]=i[4448]=i[4449]=i[4450]=i[4451]=i[4504]=i[4505]=i[4506]=250;
		i[4507]=i[4508]=i[4509]=i[4510]=i[4511]=i[4512]=i[4513]=i[4514]=i[4515]=i[4628]=i[4629]=i[4630]=i[4631]=i[4636]=i[4637]=i[4638]=i[4639]=i[4640]=i[4641]=250;
		i[4642]=i[4643]=i[4696]=i[4697]=i[4698]=i[4699]=i[4700]=i[4701]=i[4702]=i[4703]=i[4708]=i[4709]=i[4710]=i[4711]=i[4760]=i[4761]=i[4762]=i[4763]=i[4764]=250;
		i[4765]=i[4766]=i[4767]=i[4772]=i[4773]=i[4774]=i[4775]=i[4824]=i[4825]=i[4826]=i[4827]=i[4828]=i[4829]=i[4830]=i[4831]=i[4836]=i[4837]=i[4838]=i[4839]=250;
		i[4888]=i[4889]=i[4890]=i[4891]=i[4892]=i[4893]=i[4894]=i[4895]=i[4900]=i[4901]=i[4902]=i[4903]=i[4956]=i[4957]=i[4958]=i[4959]=i[5012]=i[5013]=i[5014]=250;
		i[5015]=i[5016]=i[5017]=i[5018]=i[5019]=i[5020]=i[5021]=i[5022]=i[5023]=i[5024]=i[5025]=i[5026]=i[5027]=i[5084]=i[5085]=i[5086]=i[5087]=i[5140]=i[5141]=250;
		i[5142]=i[5143]=i[5156]=i[5157]=i[5158]=i[5159]=i[5204]=i[5205]=i[5206]=i[5207]=i[5220]=i[5221]=i[5222]=i[5223]=i[5268]=i[5269]=i[5270]=i[5271]=i[5284]=250;
		i[5285]=i[5286]=i[5287]=i[5332]=i[5333]=i[5334]=i[5335]=i[5348]=i[5349]=i[5350]=i[5351]=i[5396]=i[5397]=i[5398]=i[5399]=i[5412]=i[5413]=i[5414]=i[5415]=250;
		i[5460]=i[5461]=i[5462]=i[5463]=i[5476]=i[5477]=i[5478]=i[5479]=i[5524]=i[5525]=i[5526]=i[5527]=i[5540]=i[5541]=i[5542]=i[5543]=i[5596]=i[5597]=i[5598]=250;
		i[5599]=i[5652]=i[5653]=i[5654]=i[5655]=i[5656]=i[5657]=i[5658]=i[5659]=i[5668]=i[5669]=i[5670]=i[5671]=i[5716]=i[5717]=i[5718]=i[5719]=i[5728]=i[5729]=250;
		i[5730]=i[5731]=i[5732]=i[5733]=i[5734]=i[5735]=i[5780]=i[5781]=i[5782]=i[5783]=i[5792]=i[5793]=i[5794]=i[5795]=i[5796]=i[5797]=i[5798]=i[5799]=i[5844]=250;
		i[5845]=i[5846]=i[5847]=i[5856]=i[5857]=i[5858]=i[5859]=i[5860]=i[5861]=i[5862]=i[5863]=i[5908]=i[5909]=i[5910]=i[5911]=i[5920]=i[5921]=i[5922]=i[5923]=250;
		i[5924]=i[5925]=i[5926]=i[5927]=i[5980]=i[5981]=i[5982]=i[5983]=i[6036]=i[6037]=i[6038]=i[6039]=i[6052]=i[6053]=i[6054]=i[6055]=i[6108]=i[6109]=i[6110]=250;
		i[6111]=i[6164]=i[6165]=i[6166]=i[6167]=i[6180]=i[6181]=i[6182]=i[6183]=i[6228]=i[6229]=i[6230]=i[6231]=i[6244]=i[6245]=i[6246]=i[6247]=i[6292]=i[6293]=250;
		i[6294]=i[6295]=i[6308]=i[6309]=i[6310]=i[6311]=i[6356]=i[6357]=i[6358]=i[6359]=i[6372]=i[6373]=i[6374]=i[6375]=i[6420]=i[6421]=i[6422]=i[6423]=i[6436]=250;
		i[6437]=i[6438]=i[6439]=i[6484]=i[6485]=i[6486]=i[6487]=i[6500]=i[6501]=i[6502]=i[6503]=i[6548]=i[6549]=i[6550]=i[6551]=i[6564]=i[6565]=i[6566]=i[6567]=250;
		i[6676]=i[6677]=i[6678]=i[6679]=i[6684]=i[6685]=i[6686]=i[6687]=i[6692]=i[6693]=i[6694]=i[6695]=i[6740]=i[6741]=i[6742]=i[6743]=i[6756]=i[6757]=i[6758]=250;
		i[6759]=i[6804]=i[6805]=i[6806]=i[6807]=i[6820]=i[6821]=i[6822]=i[6823]=i[6868]=i[6869]=i[6870]=i[6871]=i[6884]=i[6885]=i[6886]=i[6887]=i[6932]=i[6933]=250;
		i[6934]=i[6935]=i[6948]=i[6949]=i[6950]=i[6951]=i[7000]=i[7001]=i[7002]=i[7003]=i[7008]=i[7009]=i[7010]=i[7011]=i[7060]=i[7061]=i[7062]=i[7063]=i[7076]=250;
		i[7077]=i[7078]=i[7079]=i[7128]=i[7129]=i[7130]=i[7131]=i[7136]=i[7137]=i[7138]=i[7139]=i[7188]=i[7189]=i[7190]=i[7191]=i[7204]=i[7205]=i[7206]=i[7207]=250;
		i[7252]=i[7253]=i[7254]=i[7255]=i[7268]=i[7269]=i[7270]=i[7271]=i[7316]=i[7317]=i[7318]=i[7319]=i[7332]=i[7333]=i[7334]=i[7335]=i[7380]=i[7381]=i[7382]=250;
		i[7383]=i[7396]=i[7397]=i[7398]=i[7399]=i[7444]=i[7445]=i[7446]=i[7447]=i[7460]=i[7461]=i[7462]=i[7463]=i[7508]=i[7509]=i[7510]=i[7511]=i[7524]=i[7525]=250;
		i[7526]=i[7527]=i[7572]=i[7573]=i[7574]=i[7575]=i[7588]=i[7589]=i[7590]=i[7591]=i[7636]=i[7637]=i[7638]=i[7639]=i[7640]=i[7641]=i[7642]=i[7643]=i[7644]=250;
		i[7645]=i[7646]=i[7647]=i[7648]=i[7649]=i[7650]=i[7651]=i[7652]=i[7653]=i[7654]=i[7655]=i[7700]=i[7701]=i[7702]=i[7703]=i[7708]=i[7709]=i[7710]=i[7711]=250;
		i[7716]=i[7717]=i[7718]=i[7719]=i[7764]=i[7765]=i[7766]=i[7767]=i[7780]=i[7781]=i[7782]=i[7783]=i[7828]=i[7829]=i[7830]=i[7831]=i[7844]=i[7845]=i[7846]=250;
		i[7847]=i[7892]=i[7893]=i[7894]=i[7895]=i[7908]=i[7909]=i[7910]=i[7911]=i[7956]=i[7957]=i[7958]=i[7959]=i[7972]=i[7973]=i[7974]=i[7975]=i[8024]=i[8025]=250;
		i[8026]=i[8027]=i[8032]=i[8033]=i[8034]=i[8035]=i[8084]=i[8085]=i[8086]=i[8087]=i[8100]=i[8101]=i[8102]=i[8103]=i[8152]=i[8153]=i[8154]=i[8155]=i[8160]=250;
		i[8161]=i[8162]=i[8163]=i[8216]=i[8217]=i[8218]=i[8219]=i[8220]=i[8221]=i[8222]=i[8223]=i[8224]=i[8225]=i[8226]=i[8227]=i[8228]=i[8229]=i[8230]=i[8231]=250;
		i[8276]=i[8277]=i[8278]=i[8279]=i[8280]=i[8281]=i[8282]=i[8283]=i[8292]=i[8293]=i[8294]=i[8295]=i[8340]=i[8341]=i[8342]=i[8343]=i[8356]=i[8357]=i[8358]=250;
		i[8359]=i[8404]=i[8405]=i[8406]=i[8407]=i[8420]=i[8421]=i[8422]=i[8423]=i[8468]=i[8469]=i[8470]=i[8471]=i[8484]=i[8485]=i[8486]=i[8487]=i[8532]=i[8533]=250;
		i[8534]=i[8535]=i[8548]=i[8549]=i[8550]=i[8551]=i[8596]=i[8597]=i[8598]=i[8599]=i[8612]=i[8613]=i[8614]=i[8615]=i[8724]=i[8725]=i[8726]=i[8727]=i[8736]=250;
		i[8737]=i[8738]=i[8739]=i[8740]=i[8741]=i[8742]=i[8743]=i[8788]=i[8789]=i[8790]=i[8791]=i[8804]=i[8805]=i[8806]=i[8807]=i[8852]=i[8853]=i[8854]=i[8855]=250;
		i[8868]=i[8869]=i[8870]=i[8871]=i[8916]=i[8917]=i[8918]=i[8919]=i[8932]=i[8933]=i[8934]=i[8935]=i[8980]=i[8981]=i[8982]=i[8983]=i[8996]=i[8997]=i[8998]=250;
		i[8999]=i[9044]=i[9045]=i[9046]=i[9047]=i[9060]=i[9061]=i[9062]=i[9063]=i[9108]=i[9109]=i[9110]=i[9111]=i[9124]=i[9125]=i[9126]=i[9127]=i[9172]=i[9173]=250;
		i[9174]=i[9175]=i[9188]=i[9189]=i[9190]=i[9191]=i[9248]=i[9249]=i[9250]=i[9251]=i[9300]=i[9301]=i[9302]=i[9303]=i[9308]=i[9309]=i[9310]=i[9311]=i[9312]=250;
		i[9313]=i[9314]=i[9315]=i[9368]=i[9369]=i[9370]=i[9371]=i[9372]=i[9373]=i[9374]=i[9375]=i[9376]=i[9377]=i[9378]=i[9379]=i[9432]=i[9433]=i[9434]=i[9435]=250;
		i[9436]=i[9437]=i[9438]=i[9439]=i[9440]=i[9441]=i[9442]=i[9443]=i[9496]=i[9497]=i[9498]=i[9499]=i[9500]=i[9501]=i[9502]=i[9503]=i[9504]=i[9505]=i[9506]=250;
		i[9507]=i[9560]=i[9561]=i[9562]=i[9563]=i[9564]=i[9565]=i[9566]=i[9567]=i[9568]=i[9569]=i[9570]=i[9571]=i[9624]=i[9625]=i[9626]=i[9627]=i[9628]=i[9629]=250;
		i[9630]=i[9631]=i[9632]=i[9633]=i[9634]=i[9635]=i[9692]=i[9693]=i[9694]=i[9695]=i[9752]=i[9753]=i[9754]=i[9755]=i[9756]=i[9757]=i[9758]=i[9759]=i[9764]=250;
		i[9765]=i[9766]=i[9767]=i[9812]=i[9813]=i[9814]=i[9815]=i[9828]=i[9829]=i[9830]=i[9831]=i[9876]=i[9877]=i[9878]=i[9879]=i[9892]=i[9893]=i[9894]=i[9895]=250;
		i[9940]=i[9941]=i[9942]=i[9943]=i[9956]=i[9957]=i[9958]=i[9959]=i[10004]=i[10005]=i[10006]=i[10007]=i[10020]=i[10021]=i[10022]=i[10023]=i[10068]=i[10069]=250;
		i[10070]=i[10071]=i[10084]=i[10085]=i[10086]=i[10087]=i[10132]=i[10133]=i[10134]=i[10135]=i[10136]=i[10137]=i[10138]=i[10139]=i[10140]=i[10141]=i[10142]=250;
		i[10143]=i[10144]=i[10145]=i[10146]=i[10147]=i[10196]=i[10197]=i[10198]=i[10199]=i[10212]=i[10213]=i[10214]=i[10215]=i[10264]=i[10265]=i[10266]=i[10267]=250;
		i[10268]=i[10269]=i[10270]=i[10271]=i[10272]=i[10273]=i[10274]=i[10275]=i[11156]=i[11157]=i[11158]=i[11159]=i[11292]=i[11293]=i[11294]=i[11295]=i[11296]=250;
		i[11297]=i[11298]=i[11299]=i[11300]=i[11301]=i[11302]=i[11303]=i[11352]=i[11353]=i[11354]=i[11355]=i[11360]=i[11361]=i[11362]=i[11363]=i[11420]=i[11421]=250;
		i[11422]=i[11423]=i[11484]=i[11485]=i[11486]=i[11487]=i[11544]=i[11545]=i[11546]=i[11547]=i[11552]=i[11553]=i[11554]=i[11555]=i[11608]=i[11609]=i[11610]=250;
		i[11611]=i[11616]=i[11617]=i[11618]=i[11619]=i[11672]=i[11673]=i[11674]=i[11675]=i[11680]=i[11681]=i[11682]=i[11683]=i[11868]=i[11869]=i[11870]=i[11871]=250;
		i[11932]=i[11933]=i[11934]=i[11935]=i[11992]=i[11993]=i[11994]=i[11995]=i[12000]=i[12001]=i[12002]=i[12003]=i[12056]=i[12057]=i[12058]=i[12059]=i[12064]=250;
		i[12065]=i[12066]=i[12067]=i[12124]=i[12125]=i[12126]=i[12127]=i[12180]=i[12181]=i[12182]=i[12183]=i[12248]=i[12249]=i[12250]=i[12251]=i[12256]=i[12257]=250;
		i[12258]=i[12259]=i[12380]=i[12381]=i[12382]=i[12383]=i[12388]=i[12389]=i[12390]=i[12391]=i[12440]=i[12441]=i[12442]=i[12443]=i[12512]=i[12513]=i[12514]=250;
		i[12515]=i[12572]=i[12573]=i[12574]=i[12575]=i[12636]=i[12637]=i[12638]=i[12639]=i[12644]=i[12645]=i[12646]=i[12647]=i[12888]=i[12889]=i[12890]=i[12891]=250;
		i[12960]=i[12961]=i[12962]=i[12963]=i[13020]=i[13021]=i[13022]=i[13023]=i[13152]=i[13153]=i[13154]=i[13155]=i[17884]=i[17885]=i[17886]=i[17887]=i[17888]=250;
		i[17889]=i[17890]=i[17891]=i[18912]=i[18913]=i[18914]=i[18915]=i[19932]=i[19933]=i[19934]=i[19935]=i[20504]=i[20505]=i[20506]=i[20507]=i[20508]=i[20509]=250;
		i[20510]=i[20511]=i[20516]=i[20517]=i[20518]=i[20519]=i[20568]=i[20569]=i[20570]=i[20571]=i[20572]=i[20573]=i[20574]=i[20575]=i[20580]=i[20581]=i[20582]=250;
		i[20583]=i[20632]=i[20633]=i[20634]=i[20635]=i[20636]=i[20637]=i[20638]=i[20639]=i[20644]=i[20645]=i[20646]=i[20647]=i[20696]=i[20697]=i[20698]=i[20699]=250;
		i[20700]=i[20701]=i[20702]=i[20703]=i[20708]=i[20709]=i[20710]=i[20711]=i[20760]=i[20761]=i[20762]=i[20763]=i[20764]=i[20765]=i[20766]=i[20767]=i[20772]=250;
		i[20773]=i[20774]=i[20775]=i[20824]=i[20825]=i[20826]=i[20827]=i[20828]=i[20829]=i[20830]=i[20831]=i[20836]=i[20837]=i[20838]=i[20839]=i[20880]=i[20881]=250;
		i[20882]=i[20883]=i[20884]=i[20885]=i[20886]=i[20887]=i[20888]=i[20889]=i[20890]=i[20891]=i[20896]=i[20897]=i[20898]=i[20899]=i[20900]=i[20901]=i[20902]=250;
		i[20903]=i[20904]=i[20905]=i[20906]=i[20907]=i[20952]=i[20953]=i[20954]=i[20955]=i[20956]=i[20957]=i[20958]=i[20959]=i[20960]=i[20961]=i[20962]=i[20963]=250;
		i[21016]=i[21017]=i[21018]=i[21019]=i[21020]=i[21021]=i[21022]=i[21023]=i[21024]=i[21025]=i[21026]=i[21027]=i[21080]=i[21081]=i[21082]=i[21083]=i[21084]=250;
		i[21085]=i[21086]=i[21087]=i[21088]=i[21089]=i[21090]=i[21091]=i[21144]=i[21145]=i[21146]=i[21147]=i[21148]=i[21149]=i[21150]=i[21151]=i[21152]=i[21153]=250;
		i[21154]=i[21155]=i[21208]=i[21209]=i[21210]=i[21211]=i[21212]=i[21213]=i[21214]=i[21215]=i[21216]=i[21217]=i[21218]=i[21219]=i[21276]=i[21277]=i[21278]=250;
		i[21279]=i[21340]=i[21341]=i[21342]=i[21343]=i[21404]=i[21405]=i[21406]=i[21407]=i[21468]=i[21469]=i[21470]=i[21471]=i[21524]=i[21525]=i[21526]=i[21527]=250;
		i[21536]=i[21537]=i[21538]=i[21539]=i[21540]=i[21541]=i[21542]=i[21543]=i[21588]=i[21589]=i[21590]=i[21591]=i[21600]=i[21601]=i[21602]=i[21603]=i[21604]=250;
		i[21605]=i[21606]=i[21607]=i[21652]=i[21653]=i[21654]=i[21655]=i[21664]=i[21665]=i[21666]=i[21667]=i[21668]=i[21669]=i[21670]=i[21671]=i[21716]=i[21717]=250;
		i[21718]=i[21719]=i[21728]=i[21729]=i[21730]=i[21731]=i[21732]=i[21733]=i[21734]=i[21735]=i[21780]=i[21781]=i[21782]=i[21783]=i[21792]=i[21793]=i[21794]=250;
		i[21795]=i[21796]=i[21797]=i[21798]=i[21799]=i[21844]=i[21845]=i[21846]=i[21847]=i[21856]=i[21857]=i[21858]=i[21859]=i[21860]=i[21861]=i[21862]=i[21863]=250;
		i[21900]=i[21901]=i[21902]=i[21903]=i[21916]=i[21917]=i[21918]=i[21919]=i[21932]=i[21933]=i[21934]=i[21935]=i[21972]=i[21973]=i[21974]=i[21975]=i[21988]=250;
		i[21989]=i[21990]=i[21991]=i[22036]=i[22037]=i[22038]=i[22039]=i[22052]=i[22053]=i[22054]=i[22055]=i[22100]=i[22101]=i[22102]=i[22103]=i[22116]=i[22117]=250;
		i[22118]=i[22119]=i[22164]=i[22165]=i[22166]=i[22167]=i[22180]=i[22181]=i[22182]=i[22183]=i[22228]=i[22229]=i[22230]=i[22231]=i[22244]=i[22245]=i[22246]=250;
		i[22247]=i[22300]=i[22301]=i[22302]=i[22303]=i[22364]=i[22365]=i[22366]=i[22367]=i[22428]=i[22429]=i[22430]=i[22431]=i[22492]=i[22493]=i[22494]=i[22495]=250;
		i[22548]=i[22549]=i[22550]=i[22551]=i[22564]=i[22565]=i[22566]=i[22567]=i[22612]=i[22613]=i[22614]=i[22615]=i[22628]=i[22629]=i[22630]=i[22631]=i[22676]=250;
		i[22677]=i[22678]=i[22679]=i[22692]=i[22693]=i[22694]=i[22695]=i[22740]=i[22741]=i[22742]=i[22743]=i[22756]=i[22757]=i[22758]=i[22759]=i[22804]=i[22805]=250;
		i[22806]=i[22807]=i[22820]=i[22821]=i[22822]=i[22823]=i[22868]=i[22869]=i[22870]=i[22871]=i[22884]=i[22885]=i[22886]=i[22887]=i[22924]=i[22925]=i[22926]=250;
		i[22927]=i[22940]=i[22941]=i[22942]=i[22943]=i[22996]=i[22997]=i[22998]=i[22999]=i[23060]=i[23061]=i[23062]=i[23063]=i[23124]=i[23125]=i[23126]=i[23127]=250;
		i[23188]=i[23189]=i[23190]=i[23191]=i[23252]=i[23253]=i[23254]=i[23255]=i[23324]=i[23325]=i[23326]=i[23327]=i[23388]=i[23389]=i[23390]=i[23391]=i[23452]=250;
		i[23453]=i[23454]=i[23455]=i[23516]=i[23517]=i[23518]=i[23519]=i[23576]=i[23577]=i[23578]=i[23579]=i[23580]=i[23581]=i[23582]=i[23583]=i[23584]=i[23585]=250;
		i[23586]=i[23587]=i[23588]=i[23589]=i[23590]=i[23591]=i[23640]=i[23641]=i[23642]=i[23643]=i[23644]=i[23645]=i[23646]=i[23647]=i[23648]=i[23649]=i[23650]=250;
		i[23651]=i[23652]=i[23653]=i[23654]=i[23655]=i[23704]=i[23705]=i[23706]=i[23707]=i[23708]=i[23709]=i[23710]=i[23711]=i[23712]=i[23713]=i[23714]=i[23715]=250;
		i[23716]=i[23717]=i[23718]=i[23719]=i[23768]=i[23769]=i[23770]=i[23771]=i[23772]=i[23773]=i[23774]=i[23775]=i[23776]=i[23777]=i[23778]=i[23779]=i[23780]=250;
		i[23781]=i[23782]=i[23783]=i[23832]=i[23833]=i[23834]=i[23835]=i[23836]=i[23837]=i[23838]=i[23839]=i[23840]=i[23841]=i[23842]=i[23843]=i[23844]=i[23845]=250;
		i[23846]=i[23847]=i[23896]=i[23897]=i[23898]=i[23899]=i[23900]=i[23901]=i[23902]=i[23903]=i[23904]=i[23905]=i[23906]=i[23907]=i[23908]=i[23909]=i[23910]=250;
		i[23911]=i[23952]=i[23953]=i[23954]=i[23955]=i[23956]=i[23957]=i[23958]=i[23959]=i[23960]=i[23961]=i[23962]=i[23963]=i[23964]=i[23965]=i[23966]=i[23967]=250;
		i[23968]=i[23969]=i[23970]=i[23971]=i[23972]=i[23973]=i[23974]=i[23975]=i[23976]=i[23977]=i[23978]=i[23979]=i[23980]=i[23981]=i[23982]=i[23983]=i[24020]=250;
		i[24021]=i[24022]=i[24023]=i[24084]=i[24085]=i[24086]=i[24087]=i[24088]=i[24089]=i[24090]=i[24091]=i[24092]=i[24093]=i[24094]=i[24095]=i[24096]=i[24097]=250;
		i[24098]=i[24099]=i[24100]=i[24101]=i[24102]=i[24103]=i[24148]=i[24149]=i[24150]=i[24151]=i[24152]=i[24153]=i[24154]=i[24155]=i[24156]=i[24157]=i[24158]=250;
		i[24159]=i[24160]=i[24161]=i[24162]=i[24163]=i[24164]=i[24165]=i[24166]=i[24167]=i[24212]=i[24213]=i[24214]=i[24215]=i[24216]=i[24217]=i[24218]=i[24219]=250;
		i[24220]=i[24221]=i[24222]=i[24223]=i[24224]=i[24225]=i[24226]=i[24227]=i[24228]=i[24229]=i[24230]=i[24231]=i[24276]=i[24277]=i[24278]=i[24279]=i[24280]=250;
		i[24281]=i[24282]=i[24283]=i[24284]=i[24285]=i[24286]=i[24287]=i[24288]=i[24289]=i[24290]=i[24291]=i[24292]=i[24293]=i[24294]=i[24295]=i[24348]=i[24349]=250;
		i[24350]=i[24351]=i[24412]=i[24413]=i[24414]=i[24415]=i[24476]=i[24477]=i[24478]=i[24479]=i[24540]=i[24541]=i[24542]=i[24543]=i[24596]=i[24597]=i[24598]=250;
		i[24599]=i[24612]=i[24613]=i[24614]=i[24615]=i[24660]=i[24661]=i[24662]=i[24663]=i[24676]=i[24677]=i[24678]=i[24679]=i[24724]=i[24725]=i[24726]=i[24727]=250;
		i[24740]=i[24741]=i[24742]=i[24743]=i[24788]=i[24789]=i[24790]=i[24791]=i[24804]=i[24805]=i[24806]=i[24807]=i[24852]=i[24853]=i[24854]=i[24855]=i[24868]=250;
		i[24869]=i[24870]=i[24871]=i[24916]=i[24917]=i[24918]=i[24919]=i[24932]=i[24933]=i[24934]=i[24935]=i[24972]=i[24973]=i[24974]=i[24975]=i[24988]=i[24989]=250;
		i[24990]=i[24991]=i[25004]=i[25005]=i[25006]=i[25007]=i[25044]=i[25045]=i[25046]=i[25047]=i[25060]=i[25061]=i[25062]=i[25063]=i[25108]=i[25109]=i[25110]=250;
		i[25111]=i[25124]=i[25125]=i[25126]=i[25127]=i[25172]=i[25173]=i[25174]=i[25175]=i[25188]=i[25189]=i[25190]=i[25191]=i[25236]=i[25237]=i[25238]=i[25239]=250;
		i[25252]=i[25253]=i[25254]=i[25255]=i[25300]=i[25301]=i[25302]=i[25303]=i[25316]=i[25317]=i[25318]=i[25319]=i[25372]=i[25373]=i[25374]=i[25375]=i[25436]=250;
		i[25437]=i[25438]=i[25439]=i[25500]=i[25501]=i[25502]=i[25503]=i[25564]=i[25565]=i[25566]=i[25567]=i[25624]=i[25625]=i[25626]=i[25627]=i[25628]=i[25629]=250;
		i[25630]=i[25631]=i[25632]=i[25633]=i[25634]=i[25635]=i[25688]=i[25689]=i[25690]=i[25691]=i[25692]=i[25693]=i[25694]=i[25695]=i[25696]=i[25697]=i[25698]=250;
		i[25699]=i[25752]=i[25753]=i[25754]=i[25755]=i[25756]=i[25757]=i[25758]=i[25759]=i[25760]=i[25761]=i[25762]=i[25763]=i[25816]=i[25817]=i[25818]=i[25819]=250;
		i[25820]=i[25821]=i[25822]=i[25823]=i[25824]=i[25825]=i[25826]=i[25827]=i[25880]=i[25881]=i[25882]=i[25883]=i[25884]=i[25885]=i[25886]=i[25887]=i[25888]=250;
		i[25889]=i[25890]=i[25891]=i[25944]=i[25945]=i[25946]=i[25947]=i[25948]=i[25949]=i[25950]=i[25951]=i[25952]=i[25953]=i[25954]=i[25955]=i[26000]=i[26001]=250;
		i[26002]=i[26003]=i[26004]=i[26005]=i[26006]=i[26007]=i[26008]=i[26009]=i[26010]=i[26011]=i[26016]=i[26017]=i[26018]=i[26019]=i[26020]=i[26021]=i[26022]=250;
		i[26023]=i[26024]=i[26025]=i[26026]=i[26027]=i[26072]=i[26073]=i[26074]=i[26075]=i[26076]=i[26077]=i[26078]=i[26079]=i[26080]=i[26081]=i[26082]=i[26083]=250;
		i[26136]=i[26137]=i[26138]=i[26139]=i[26140]=i[26141]=i[26142]=i[26143]=i[26144]=i[26145]=i[26146]=i[26147]=i[26200]=i[26201]=i[26202]=i[26203]=i[26204]=250;
		i[26205]=i[26206]=i[26207]=i[26208]=i[26209]=i[26210]=i[26211]=i[26264]=i[26265]=i[26266]=i[26267]=i[26268]=i[26269]=i[26270]=i[26271]=i[26272]=i[26273]=250;
		i[26274]=i[26275]=i[26328]=i[26329]=i[26330]=i[26331]=i[26332]=i[26333]=i[26334]=i[26335]=i[26336]=i[26337]=i[26338]=i[26339]=i[26396]=i[26397]=i[26398]=250;
		i[26399]=i[26460]=i[26461]=i[26462]=i[26463]=i[26524]=i[26525]=i[26526]=i[26527]=i[26588]=i[26589]=i[26590]=i[26591]=i[27680]=i[27681]=i[27682]=i[27683]=250;
		i[27740]=i[27741]=i[27742]=i[27743]=i[27800]=i[27801]=i[27802]=i[27803]=i[27808]=i[27809]=i[27810]=i[27811]=i[27864]=i[27865]=i[27866]=i[27867]=i[27872]=250;
		i[27873]=i[27874]=i[27875]=i[27928]=i[27929]=i[27930]=i[27931]=i[27936]=i[27937]=i[27938]=i[27939]=i[27992]=i[27993]=i[27994]=i[27995]=i[27996]=i[27997]=250;
		i[27998]=i[27999]=i[28000]=i[28001]=i[28002]=i[28003]=i[28188]=i[28189]=i[28190]=i[28191]=i[28252]=i[28253]=i[28254]=i[28255]=i[28312]=i[28313]=i[28314]=250;
		i[28315]=i[28320]=i[28321]=i[28322]=i[28323]=i[28376]=i[28377]=i[28378]=i[28379]=i[28384]=i[28385]=i[28386]=i[28387]=i[28444]=i[28445]=i[28446]=i[28447]=250;
		i[28508]=i[28509]=i[28510]=i[28511]=i[28572]=i[28573]=i[28574]=i[28575]=i[28580]=i[28581]=i[28582]=i[28583]=i[28632]=i[28633]=i[28634]=i[28635]=i[28640]=250;
		i[28641]=i[28642]=i[28643]=i[28700]=i[28701]=i[28702]=i[28703]=i[28768]=i[28769]=i[28770]=i[28771]=i[28828]=i[28829]=i[28830]=i[28831]=i[28892]=i[28893]=250;
		i[28894]=i[28895]=i[28900]=i[28901]=i[28902]=i[28903]=i[29016]=i[29017]=i[29018]=i[29019]=i[29024]=i[29025]=i[29026]=i[29027]=i[29208]=i[29209]=i[29210]=250;
		i[29211]=i[29280]=i[29281]=i[29282]=i[29283]=i[29340]=i[29341]=i[29342]=i[29343]=i[29464]=i[29465]=i[29466]=i[29467]=i[29536]=i[29537]=i[29538]=i[29539]=250;
		i[29600]=i[29601]=i[29602]=i[29603]=i[30040]=i[30041]=i[30042]=i[30043]=i[30044]=i[30045]=i[30046]=i[30047]=i[30048]=i[30049]=i[30050]=i[30051]=i[36884]=250;
		i[36885]=i[36886]=i[36887]=i[36888]=i[36889]=i[36890]=i[36891]=i[36892]=i[36893]=i[36894]=i[36895]=i[36896]=i[36897]=i[36898]=i[36899]=i[36944]=i[36945]=250;
		i[36946]=i[36947]=i[36964]=i[36965]=i[36966]=i[36967]=i[37016]=i[37017]=i[37018]=i[37019]=i[37020]=i[37021]=i[37022]=i[37023]=i[37024]=i[37025]=i[37026]=250;
		i[37027]=i[37080]=i[37081]=i[37082]=i[37083]=i[37084]=i[37085]=i[37086]=i[37087]=i[37088]=i[37089]=i[37090]=i[37091]=i[37144]=i[37145]=i[37146]=i[37147]=250;
		i[37148]=i[37149]=i[37150]=i[37151]=i[37152]=i[37153]=i[37154]=i[37155]=i[37208]=i[37209]=i[37210]=i[37211]=i[37212]=i[37213]=i[37214]=i[37215]=i[37216]=250;
		i[37217]=i[37218]=i[37219]=i[37272]=i[37273]=i[37274]=i[37275]=i[37276]=i[37277]=i[37278]=i[37279]=i[37280]=i[37281]=i[37282]=i[37283]=i[37392]=i[37393]=250;
		i[37394]=i[37395]=i[37400]=i[37401]=i[37402]=i[37403]=i[37404]=i[37405]=i[37406]=i[37407]=i[37408]=i[37409]=i[37410]=i[37411]=i[37460]=i[37461]=i[37462]=250;
		i[37463]=i[37464]=i[37465]=i[37466]=i[37467]=i[37468]=i[37469]=i[37470]=i[37471]=i[37472]=i[37473]=i[37474]=i[37475]=i[37524]=i[37525]=i[37526]=i[37527]=250;
		i[37528]=i[37529]=i[37530]=i[37531]=i[37532]=i[37533]=i[37534]=i[37535]=i[37536]=i[37537]=i[37538]=i[37539]=i[37588]=i[37589]=i[37590]=i[37591]=i[37592]=250;
		i[37593]=i[37594]=i[37595]=i[37596]=i[37597]=i[37598]=i[37599]=i[37600]=i[37601]=i[37602]=i[37603]=i[37652]=i[37653]=i[37654]=i[37655]=i[37656]=i[37657]=250;
		i[37658]=i[37659]=i[37660]=i[37661]=i[37662]=i[37663]=i[37664]=i[37665]=i[37666]=i[37667]=i[37724]=i[37725]=i[37726]=i[37727]=i[37776]=i[37777]=i[37778]=250;
		i[37779]=i[37840]=i[37841]=i[37842]=i[37843]=i[37852]=i[37853]=i[37854]=i[37855]=i[37856]=i[37857]=i[37858]=i[37859]=i[37908]=i[37909]=i[37910]=i[37911]=250;
		i[37924]=i[37925]=i[37926]=i[37927]=i[37968]=i[37969]=i[37970]=i[37971]=i[37984]=i[37985]=i[37986]=i[37987]=i[37988]=i[37989]=i[37990]=i[37991]=i[38036]=250;
		i[38037]=i[38038]=i[38039]=i[38052]=i[38053]=i[38054]=i[38055]=i[38100]=i[38101]=i[38102]=i[38103]=i[38116]=i[38117]=i[38118]=i[38119]=i[38164]=i[38165]=250;
		i[38166]=i[38167]=i[38180]=i[38181]=i[38182]=i[38183]=i[38228]=i[38229]=i[38230]=i[38231]=i[38244]=i[38245]=i[38246]=i[38247]=i[38292]=i[38293]=i[38294]=250;
		i[38295]=i[38308]=i[38309]=i[38310]=i[38311]=i[38356]=i[38357]=i[38358]=i[38359]=i[38372]=i[38373]=i[38374]=i[38375]=i[38420]=i[38421]=i[38422]=i[38423]=250;
		i[38436]=i[38437]=i[38438]=i[38439]=i[38480]=i[38481]=i[38482]=i[38483]=i[38500]=i[38501]=i[38502]=i[38503]=i[38544]=i[38545]=i[38546]=i[38547]=i[38564]=250;
		i[38565]=i[38566]=i[38567]=i[38608]=i[38609]=i[38610]=i[38611]=i[38628]=i[38629]=i[38630]=i[38631]=i[38672]=i[38673]=i[38674]=i[38675]=i[38692]=i[38693]=250;
		i[38694]=i[38695]=i[38748]=i[38749]=i[38750]=i[38751]=i[38800]=i[38801]=i[38802]=i[38803]=i[38864]=i[38865]=i[38866]=i[38867]=i[38872]=i[38873]=i[38874]=250;
		i[38875]=i[38884]=i[38885]=i[38886]=i[38887]=i[38932]=i[38933]=i[38934]=i[38935]=i[38952]=i[38953]=i[38954]=i[38955]=i[38992]=i[38993]=i[38994]=i[38995]=250;
		i[39004]=i[39005]=i[39006]=i[39007]=i[39012]=i[39013]=i[39014]=i[39015]=i[39056]=i[39057]=i[39058]=i[39059]=i[39080]=i[39081]=i[39082]=i[39083]=i[39120]=250;
		i[39121]=i[39122]=i[39123]=i[39144]=i[39145]=i[39146]=i[39147]=i[39184]=i[39185]=i[39186]=i[39187]=i[39208]=i[39209]=i[39210]=i[39211]=i[39248]=i[39249]=250;
		i[39250]=i[39251]=i[39272]=i[39273]=i[39274]=i[39275]=i[39312]=i[39313]=i[39314]=i[39315]=i[39336]=i[39337]=i[39338]=i[39339]=i[39384]=i[39385]=i[39386]=250;
		i[39387]=i[39392]=i[39393]=i[39394]=i[39395]=i[39440]=i[39441]=i[39442]=i[39443]=i[39448]=i[39449]=i[39450]=i[39451]=i[39464]=i[39465]=i[39466]=i[39467]=250;
		i[39504]=i[39505]=i[39506]=i[39507]=i[39524]=i[39525]=i[39526]=i[39527]=i[39568]=i[39569]=i[39570]=i[39571]=i[39588]=i[39589]=i[39590]=i[39591]=i[39632]=250;
		i[39633]=i[39634]=i[39635]=i[39652]=i[39653]=i[39654]=i[39655]=i[39696]=i[39697]=i[39698]=i[39699]=i[39716]=i[39717]=i[39718]=i[39719]=i[39772]=i[39773]=250;
		i[39774]=i[39775]=i[39824]=i[39825]=i[39826]=i[39827]=i[39828]=i[39829]=i[39830]=i[39831]=i[39832]=i[39833]=i[39834]=i[39835]=i[39836]=i[39837]=i[39838]=250;
		i[39839]=i[39840]=i[39841]=i[39842]=i[39843]=i[39888]=i[39889]=i[39890]=i[39891]=i[39908]=i[39909]=i[39910]=i[39911]=i[39956]=i[39957]=i[39958]=i[39959]=250;
		i[39976]=i[39977]=i[39978]=i[39979]=i[40016]=i[40017]=i[40018]=i[40019]=i[40028]=i[40029]=i[40030]=i[40031]=i[40036]=i[40037]=i[40038]=i[40039]=i[40080]=250;
		i[40081]=i[40082]=i[40083]=i[40104]=i[40105]=i[40106]=i[40107]=i[40144]=i[40145]=i[40146]=i[40147]=i[40168]=i[40169]=i[40170]=i[40171]=i[40208]=i[40209]=250;
		i[40210]=i[40211]=i[40232]=i[40233]=i[40234]=i[40235]=i[40272]=i[40273]=i[40274]=i[40275]=i[40296]=i[40297]=i[40298]=i[40299]=i[40336]=i[40337]=i[40338]=250;
		i[40339]=i[40360]=i[40361]=i[40362]=i[40363]=i[40412]=i[40413]=i[40414]=i[40415]=i[40464]=i[40465]=i[40466]=i[40467]=i[40476]=i[40477]=i[40478]=i[40479]=250;
		i[40488]=i[40489]=i[40490]=i[40491]=i[40528]=i[40529]=i[40530]=i[40531]=i[40548]=i[40549]=i[40550]=i[40551]=i[40592]=i[40593]=i[40594]=i[40595]=i[40612]=250;
		i[40613]=i[40614]=i[40615]=i[40656]=i[40657]=i[40658]=i[40659]=i[40676]=i[40677]=i[40678]=i[40679]=i[40720]=i[40721]=i[40722]=i[40723]=i[40740]=i[40741]=250;
		i[40742]=i[40743]=i[40796]=i[40797]=i[40798]=i[40799]=i[40848]=i[40849]=i[40850]=i[40851]=i[40868]=i[40869]=i[40870]=i[40871]=i[40912]=i[40913]=i[40914]=250;
		i[40915]=i[40924]=i[40925]=i[40926]=i[40927]=i[40928]=i[40929]=i[40930]=i[40931]=i[40976]=i[40977]=i[40978]=i[40979]=i[40980]=i[40981]=i[40982]=i[40983]=250;
		i[40984]=i[40985]=i[40986]=i[40987]=i[40988]=i[40989]=i[40990]=i[40991]=i[41000]=i[41001]=i[41002]=i[41003]=i[41040]=i[41041]=i[41042]=i[41043]=i[41048]=250;
		i[41049]=i[41050]=i[41051]=i[41060]=i[41061]=i[41062]=i[41063]=i[41104]=i[41105]=i[41106]=i[41107]=i[41128]=i[41129]=i[41130]=i[41131]=i[41168]=i[41169]=250;
		i[41170]=i[41171]=i[41192]=i[41193]=i[41194]=i[41195]=i[41232]=i[41233]=i[41234]=i[41235]=i[41256]=i[41257]=i[41258]=i[41259]=i[41296]=i[41297]=i[41298]=250;
		i[41299]=i[41320]=i[41321]=i[41322]=i[41323]=i[41360]=i[41361]=i[41362]=i[41363]=i[41384]=i[41385]=i[41386]=i[41387]=i[41432]=i[41433]=i[41434]=i[41435]=250;
		i[41440]=i[41441]=i[41442]=i[41443]=i[41488]=i[41489]=i[41490]=i[41491]=i[41500]=i[41501]=i[41502]=i[41503]=i[41512]=i[41513]=i[41514]=i[41515]=i[41552]=250;
		i[41553]=i[41554]=i[41555]=i[41572]=i[41573]=i[41574]=i[41575]=i[41616]=i[41617]=i[41618]=i[41619]=i[41636]=i[41637]=i[41638]=i[41639]=i[41680]=i[41681]=250;
		i[41682]=i[41683]=i[41700]=i[41701]=i[41702]=i[41703]=i[41744]=i[41745]=i[41746]=i[41747]=i[41764]=i[41765]=i[41766]=i[41767]=i[41816]=i[41817]=i[41818]=250;
		i[41819]=i[41824]=i[41825]=i[41826]=i[41827]=i[41872]=i[41873]=i[41874]=i[41875]=i[41892]=i[41893]=i[41894]=i[41895]=i[41936]=i[41937]=i[41938]=i[41939]=250;
		i[41948]=i[41949]=i[41950]=i[41951]=i[42004]=i[42005]=i[42006]=i[42007]=i[42024]=i[42025]=i[42026]=i[42027]=i[42064]=i[42065]=i[42066]=i[42067]=i[42072]=250;
		i[42073]=i[42074]=i[42075]=i[42084]=i[42085]=i[42086]=i[42087]=i[42128]=i[42129]=i[42130]=i[42131]=i[42152]=i[42153]=i[42154]=i[42155]=i[42192]=i[42193]=250;
		i[42194]=i[42195]=i[42216]=i[42217]=i[42218]=i[42219]=i[42256]=i[42257]=i[42258]=i[42259]=i[42280]=i[42281]=i[42282]=i[42283]=i[42320]=i[42321]=i[42322]=250;
		i[42323]=i[42344]=i[42345]=i[42346]=i[42347]=i[42384]=i[42385]=i[42386]=i[42387]=i[42408]=i[42409]=i[42410]=i[42411]=i[42452]=i[42453]=i[42454]=i[42455]=250;
		i[42464]=i[42465]=i[42466]=i[42467]=i[42468]=i[42469]=i[42470]=i[42471]=i[42512]=i[42513]=i[42514]=i[42515]=i[42528]=i[42529]=i[42530]=i[42531]=i[42536]=250;
		i[42537]=i[42538]=i[42539]=i[42576]=i[42577]=i[42578]=i[42579]=i[42596]=i[42597]=i[42598]=i[42599]=i[42640]=i[42641]=i[42642]=i[42643]=i[42660]=i[42661]=250;
		i[42662]=i[42663]=i[42704]=i[42705]=i[42706]=i[42707]=i[42724]=i[42725]=i[42726]=i[42727]=i[42768]=i[42769]=i[42770]=i[42771]=i[42788]=i[42789]=i[42790]=250;
		i[42791]=i[42836]=i[42837]=i[42838]=i[42839]=i[42852]=i[42853]=i[42854]=i[42855]=i[42896]=i[42897]=i[42898]=i[42899]=i[42900]=i[42901]=i[42902]=i[42903]=250;
		i[42904]=i[42905]=i[42906]=i[42907]=i[42908]=i[42909]=i[42910]=i[42911]=i[42912]=i[42913]=i[42914]=i[42915]=i[42960]=i[42961]=i[42962]=i[42963]=i[42976]=250;
		i[42977]=i[42978]=i[42979]=i[43028]=i[43029]=i[43030]=i[43031]=i[43044]=i[43045]=i[43046]=i[43047]=i[43088]=i[43089]=i[43090]=i[43091]=i[43092]=i[43093]=250;
		i[43094]=i[43095]=i[43108]=i[43109]=i[43110]=i[43111]=i[43156]=i[43157]=i[43158]=i[43159]=i[43172]=i[43173]=i[43174]=i[43175]=i[43220]=i[43221]=i[43222]=250;
		i[43223]=i[43236]=i[43237]=i[43238]=i[43239]=i[43284]=i[43285]=i[43286]=i[43287]=i[43300]=i[43301]=i[43302]=i[43303]=i[43348]=i[43349]=i[43350]=i[43351]=250;
		i[43364]=i[43365]=i[43366]=i[43367]=i[43412]=i[43413]=i[43414]=i[43415]=i[43428]=i[43429]=i[43430]=i[43431]=i[43540]=i[43541]=i[43542]=i[43543]=i[43556]=250;
		i[43557]=i[43558]=i[43559]=i[43600]=i[43601]=i[43602]=i[43603]=i[43620]=i[43621]=i[43622]=i[43623]=i[43664]=i[43665]=i[43666]=i[43667]=i[43684]=i[43685]=250;
		i[43686]=i[43687]=i[43728]=i[43729]=i[43730]=i[43731]=i[43748]=i[43749]=i[43750]=i[43751]=i[43792]=i[43793]=i[43794]=i[43795]=i[43812]=i[43813]=i[43814]=250;
		i[43815]=i[43860]=i[43861]=i[43862]=i[43863]=i[43876]=i[43877]=i[43878]=i[43879]=i[43920]=i[43921]=i[43922]=i[43923]=i[43984]=i[43985]=i[43986]=i[43987]=250;
		i[44000]=i[44001]=i[44002]=i[44003]=i[44052]=i[44053]=i[44054]=i[44055]=i[44056]=i[44057]=i[44058]=i[44059]=i[44060]=i[44061]=i[44062]=i[44063]=i[44064]=250;
		i[44065]=i[44066]=i[44067]=i[44112]=i[44113]=i[44114]=i[44115]=i[44132]=i[44133]=i[44134]=i[44135]=i[44184]=i[44185]=i[44186]=i[44187]=i[44188]=i[44189]=250;
		i[44190]=i[44191]=i[44192]=i[44193]=i[44194]=i[44195]=i[44248]=i[44249]=i[44250]=i[44251]=i[44252]=i[44253]=i[44254]=i[44255]=i[44256]=i[44257]=i[44258]=250;
		i[44259]=i[44312]=i[44313]=i[44314]=i[44315]=i[44316]=i[44317]=i[44318]=i[44319]=i[44320]=i[44321]=i[44322]=i[44323]=i[44376]=i[44377]=i[44378]=i[44379]=250;
		i[44380]=i[44381]=i[44382]=i[44383]=i[44384]=i[44385]=i[44386]=i[44387]=i[44440]=i[44441]=i[44442]=i[44443]=i[44444]=i[44445]=i[44446]=i[44447]=i[44448]=250;
		i[44449]=i[44450]=i[44451]=i[44568]=i[44569]=i[44570]=i[44571]=i[44572]=i[44573]=i[44574]=i[44575]=i[44576]=i[44577]=i[44578]=i[44579]=i[44584]=i[44585]=250;
		i[44586]=i[44587]=i[44624]=i[44625]=i[44626]=i[44627]=i[44644]=i[44645]=i[44646]=i[44647]=i[44688]=i[44689]=i[44690]=i[44691]=i[44708]=i[44709]=i[44710]=250;
		i[44711]=i[44752]=i[44753]=i[44754]=i[44755]=i[44772]=i[44773]=i[44774]=i[44775]=i[44816]=i[44817]=i[44818]=i[44819]=i[44836]=i[44837]=i[44838]=i[44839]=250;
		i[44880]=i[44881]=i[44882]=i[44883]=i[44904]=i[44905]=i[44906]=i[44907]=i[44944]=i[44945]=i[44946]=i[44947]=i[45012]=i[45013]=i[45014]=i[45015]=i[45016]=250;
		i[45017]=i[45018]=i[45019]=i[45020]=i[45021]=i[45022]=i[45023]=i[46164]=i[46165]=i[46166]=i[46167]=i[46172]=i[46173]=i[46174]=i[46175]=i[46236]=i[46237]=250;
		i[46238]=i[46239]=i[46300]=i[46301]=i[46302]=i[46303]=i[46360]=i[46361]=i[46362]=i[46363]=i[46368]=i[46369]=i[46370]=i[46371]=i[46424]=i[46425]=i[46426]=250;
		i[46427]=i[46432]=i[46433]=i[46434]=i[46435]=i[46488]=i[46489]=i[46490]=i[46491]=i[46496]=i[46497]=i[46498]=i[46499]=i[46684]=i[46685]=i[46686]=i[46687]=250;
		i[46744]=i[46745]=i[46746]=i[46747]=i[46804]=i[46805]=i[46806]=i[46807]=i[46812]=i[46813]=i[46814]=i[46815]=i[46872]=i[46873]=i[46874]=i[46875]=i[46880]=250;
		i[46881]=i[46882]=i[46883]=i[46940]=i[46941]=i[46942]=i[46943]=i[47192]=i[47193]=i[47194]=i[47195]=i[47200]=i[47201]=i[47202]=i[47203]=i[47256]=i[47257]=250;
		i[47258]=i[47259]=i[47328]=i[47329]=i[47330]=i[47331]=i[47388]=i[47389]=i[47390]=i[47391]=i[47452]=i[47453]=i[47454]=i[47455]=i[47460]=i[47461]=i[47462]=250;
		i[47463]=i[47704]=i[47705]=i[47706]=i[47707]=i[47772]=i[47773]=i[47774]=i[47775]=i[47832]=i[47833]=i[47834]=i[47835]=i[47968]=i[47969]=i[47970]=i[47971]=250;
		i[50652]=i[50653]=i[50654]=i[50655]=i[50656]=i[50657]=i[50658]=i[50659]=i[51680]=i[51681]=i[51682]=i[51683]=i[52700]=i[52701]=i[52702]=i[52703]=i[53264]=250;
		i[53265]=i[53266]=i[53267]=i[53288]=i[53289]=i[53290]=i[53291]=i[53328]=i[53329]=i[53330]=i[53331]=i[53352]=i[53353]=i[53354]=i[53355]=i[53392]=i[53393]=250;
		i[53394]=i[53395]=i[53416]=i[53417]=i[53418]=i[53419]=i[53456]=i[53457]=i[53458]=i[53459]=i[53480]=i[53481]=i[53482]=i[53483]=i[53520]=i[53521]=i[53522]=250;
		i[53523]=i[53544]=i[53545]=i[53546]=i[53547]=i[53584]=i[53585]=i[53586]=i[53587]=i[53608]=i[53609]=i[53610]=i[53611]=i[53640]=i[53641]=i[53642]=i[53643]=250;
		i[53660]=i[53661]=i[53662]=i[53663]=i[53664]=i[53665]=i[53666]=i[53667]=i[53668]=i[53669]=i[53670]=i[53671]=i[53672]=i[53673]=i[53674]=i[53675]=i[53676]=250;
		i[53677]=i[53678]=i[53679]=i[53720]=i[53721]=i[53722]=i[53723]=i[53724]=i[53725]=i[53726]=i[53727]=i[53728]=i[53729]=i[53730]=i[53731]=i[53780]=i[53781]=250;
		i[53782]=i[53783]=i[53784]=i[53785]=i[53786]=i[53787]=i[53788]=i[53789]=i[53790]=i[53791]=i[53792]=i[53793]=i[53794]=i[53795]=i[53796]=i[53797]=i[53798]=250;
		i[53799]=i[53844]=i[53845]=i[53846]=i[53847]=i[53848]=i[53849]=i[53850]=i[53851]=i[53852]=i[53853]=i[53854]=i[53855]=i[53856]=i[53857]=i[53858]=i[53859]=250;
		i[53860]=i[53861]=i[53862]=i[53863]=i[53908]=i[53909]=i[53910]=i[53911]=i[53912]=i[53913]=i[53914]=i[53915]=i[53916]=i[53917]=i[53918]=i[53919]=i[53920]=250;
		i[53921]=i[53922]=i[53923]=i[53924]=i[53925]=i[53926]=i[53927]=i[53972]=i[53973]=i[53974]=i[53975]=i[53976]=i[53977]=i[53978]=i[53979]=i[53980]=i[53981]=250;
		i[53982]=i[53983]=i[53984]=i[53985]=i[53986]=i[53987]=i[53988]=i[53989]=i[53990]=i[53991]=i[54044]=i[54045]=i[54046]=i[54047]=i[54108]=i[54109]=i[54110]=250;
		i[54111]=i[54172]=i[54173]=i[54174]=i[54175]=i[54236]=i[54237]=i[54238]=i[54239]=i[54288]=i[54289]=i[54290]=i[54291]=i[54312]=i[54313]=i[54314]=i[54315]=250;
		i[54352]=i[54353]=i[54354]=i[54355]=i[54376]=i[54377]=i[54378]=i[54379]=i[54416]=i[54417]=i[54418]=i[54419]=i[54440]=i[54441]=i[54442]=i[54443]=i[54480]=250;
		i[54481]=i[54482]=i[54483]=i[54504]=i[54505]=i[54506]=i[54507]=i[54544]=i[54545]=i[54546]=i[54547]=i[54568]=i[54569]=i[54570]=i[54571]=i[54608]=i[54609]=250;
		i[54610]=i[54611]=i[54632]=i[54633]=i[54634]=i[54635]=i[54664]=i[54665]=i[54666]=i[54667]=i[54684]=i[54685]=i[54686]=i[54687]=i[54740]=i[54741]=i[54742]=250;
		i[54743]=i[54756]=i[54757]=i[54758]=i[54759]=i[54804]=i[54805]=i[54806]=i[54807]=i[54868]=i[54869]=i[54870]=i[54871]=i[54932]=i[54933]=i[54934]=i[54935]=250;
		i[54996]=i[54997]=i[54998]=i[54999]=i[55068]=i[55069]=i[55070]=i[55071]=i[55132]=i[55133]=i[55134]=i[55135]=i[55196]=i[55197]=i[55198]=i[55199]=i[55260]=250;
		i[55261]=i[55262]=i[55263]=i[55316]=i[55317]=i[55318]=i[55319]=i[55320]=i[55321]=i[55322]=i[55323]=i[55324]=i[55325]=i[55326]=i[55327]=i[55328]=i[55329]=250;
		i[55330]=i[55331]=i[55332]=i[55333]=i[55334]=i[55335]=i[55380]=i[55381]=i[55382]=i[55383]=i[55384]=i[55385]=i[55386]=i[55387]=i[55388]=i[55389]=i[55390]=250;
		i[55391]=i[55392]=i[55393]=i[55394]=i[55395]=i[55396]=i[55397]=i[55398]=i[55399]=i[55444]=i[55445]=i[55446]=i[55447]=i[55448]=i[55449]=i[55450]=i[55451]=250;
		i[55452]=i[55453]=i[55454]=i[55455]=i[55456]=i[55457]=i[55458]=i[55459]=i[55460]=i[55461]=i[55462]=i[55463]=i[55508]=i[55509]=i[55510]=i[55511]=i[55512]=250;
		i[55513]=i[55514]=i[55515]=i[55516]=i[55517]=i[55518]=i[55519]=i[55520]=i[55521]=i[55522]=i[55523]=i[55524]=i[55525]=i[55526]=i[55527]=i[55572]=i[55573]=250;
		i[55574]=i[55575]=i[55576]=i[55577]=i[55578]=i[55579]=i[55580]=i[55581]=i[55582]=i[55583]=i[55584]=i[55585]=i[55586]=i[55587]=i[55588]=i[55589]=i[55590]=250;
		i[55591]=i[55636]=i[55637]=i[55638]=i[55639]=i[55640]=i[55641]=i[55642]=i[55643]=i[55644]=i[55645]=i[55646]=i[55647]=i[55648]=i[55649]=i[55650]=i[55651]=250;
		i[55652]=i[55653]=i[55654]=i[55655]=i[55692]=i[55693]=i[55694]=i[55695]=i[55696]=i[55697]=i[55698]=i[55699]=i[55700]=i[55701]=i[55702]=i[55703]=i[55704]=250;
		i[55705]=i[55706]=i[55707]=i[55708]=i[55709]=i[55710]=i[55711]=i[55760]=i[55761]=i[55762]=i[55763]=i[55828]=i[55829]=i[55830]=i[55831]=i[55892]=i[55893]=250;
		i[55894]=i[55895]=i[55956]=i[55957]=i[55958]=i[55959]=i[56020]=i[56021]=i[56022]=i[56023]=i[56092]=i[56093]=i[56094]=i[56095]=i[56156]=i[56157]=i[56158]=250;
		i[56159]=i[56220]=i[56221]=i[56222]=i[56223]=i[56284]=i[56285]=i[56286]=i[56287]=i[56340]=i[56341]=i[56342]=i[56343]=i[56356]=i[56357]=i[56358]=i[56359]=250;
		i[56404]=i[56405]=i[56406]=i[56407]=i[56420]=i[56421]=i[56422]=i[56423]=i[56468]=i[56469]=i[56470]=i[56471]=i[56484]=i[56485]=i[56486]=i[56487]=i[56532]=250;
		i[56533]=i[56534]=i[56535]=i[56548]=i[56549]=i[56550]=i[56551]=i[56596]=i[56597]=i[56598]=i[56599]=i[56612]=i[56613]=i[56614]=i[56615]=i[56660]=i[56661]=250;
		i[56662]=i[56663]=i[56676]=i[56677]=i[56678]=i[56679]=i[56716]=i[56717]=i[56718]=i[56719]=i[56732]=i[56733]=i[56734]=i[56735]=i[56784]=i[56785]=i[56786]=250;
		i[56787]=i[56852]=i[56853]=i[56854]=i[56855]=i[56916]=i[56917]=i[56918]=i[56919]=i[56980]=i[56981]=i[56982]=i[56983]=i[57044]=i[57045]=i[57046]=i[57047]=250;
		i[57116]=i[57117]=i[57118]=i[57119]=i[57180]=i[57181]=i[57182]=i[57183]=i[57244]=i[57245]=i[57246]=i[57247]=i[57308]=i[57309]=i[57310]=i[57311]=i[57368]=250;
		i[57369]=i[57370]=i[57371]=i[57376]=i[57377]=i[57378]=i[57379]=i[57432]=i[57433]=i[57434]=i[57435]=i[57440]=i[57441]=i[57442]=i[57443]=i[57496]=i[57497]=250;
		i[57498]=i[57499]=i[57504]=i[57505]=i[57506]=i[57507]=i[57560]=i[57561]=i[57562]=i[57563]=i[57568]=i[57569]=i[57570]=i[57571]=i[57624]=i[57625]=i[57626]=250;
		i[57627]=i[57632]=i[57633]=i[57634]=i[57635]=i[57688]=i[57689]=i[57690]=i[57691]=i[57696]=i[57697]=i[57698]=i[57699]=i[57744]=i[57745]=i[57746]=i[57747]=250;
		i[57756]=i[57757]=i[57758]=i[57759]=i[57760]=i[57761]=i[57762]=i[57763]=i[57764]=i[57765]=i[57766]=i[57767]=i[57768]=i[57769]=i[57770]=i[57771]=i[57772]=250;
		i[57773]=i[57774]=i[57775]=i[57808]=i[57809]=i[57810]=i[57811]=i[57876]=i[57877]=i[57878]=i[57879]=i[57880]=i[57881]=i[57882]=i[57883]=i[57884]=i[57885]=250;
		i[57886]=i[57887]=i[57888]=i[57889]=i[57890]=i[57891]=i[57892]=i[57893]=i[57894]=i[57895]=i[57940]=i[57941]=i[57942]=i[57943]=i[57944]=i[57945]=i[57946]=250;
		i[57947]=i[57948]=i[57949]=i[57950]=i[57951]=i[57952]=i[57953]=i[57954]=i[57955]=i[57956]=i[57957]=i[57958]=i[57959]=i[58004]=i[58005]=i[58006]=i[58007]=250;
		i[58008]=i[58009]=i[58010]=i[58011]=i[58012]=i[58013]=i[58014]=i[58015]=i[58016]=i[58017]=i[58018]=i[58019]=i[58020]=i[58021]=i[58022]=i[58023]=i[58068]=250;
		i[58069]=i[58070]=i[58071]=i[58072]=i[58073]=i[58074]=i[58075]=i[58076]=i[58077]=i[58078]=i[58079]=i[58080]=i[58081]=i[58082]=i[58083]=i[58084]=i[58085]=250;
		i[58086]=i[58087]=i[58140]=i[58141]=i[58142]=i[58143]=i[58204]=i[58205]=i[58206]=i[58207]=i[58268]=i[58269]=i[58270]=i[58271]=i[58332]=i[58333]=i[58334]=250;
		i[58335]=i[58392]=i[58393]=i[58394]=i[58395]=i[58400]=i[58401]=i[58402]=i[58403]=i[58456]=i[58457]=i[58458]=i[58459]=i[58464]=i[58465]=i[58466]=i[58467]=250;
		i[58520]=i[58521]=i[58522]=i[58523]=i[58528]=i[58529]=i[58530]=i[58531]=i[58584]=i[58585]=i[58586]=i[58587]=i[58592]=i[58593]=i[58594]=i[58595]=i[58648]=250;
		i[58649]=i[58650]=i[58651]=i[58656]=i[58657]=i[58658]=i[58659]=i[58712]=i[58713]=i[58714]=i[58715]=i[58720]=i[58721]=i[58722]=i[58723]=i[58768]=i[58769]=250;
		i[58770]=i[58771]=i[58780]=i[58781]=i[58782]=i[58783]=i[58832]=i[58833]=i[58834]=i[58835]=i[58900]=i[58901]=i[58902]=i[58903]=i[58964]=i[58965]=i[58966]=250;
		i[58967]=i[59028]=i[59029]=i[59030]=i[59031]=i[59092]=i[59093]=i[59094]=i[59095]=i[59164]=i[59165]=i[59166]=i[59167]=i[59228]=i[59229]=i[59230]=i[59231]=250;
		i[59292]=i[59293]=i[59294]=i[59295]=i[59356]=i[59357]=i[59358]=i[59359]=i[59416]=i[59417]=i[59418]=i[59419]=i[59424]=i[59425]=i[59426]=i[59427]=i[59480]=250;
		i[59481]=i[59482]=i[59483]=i[59488]=i[59489]=i[59490]=i[59491]=i[59544]=i[59545]=i[59546]=i[59547]=i[59552]=i[59553]=i[59554]=i[59555]=i[59608]=i[59609]=250;
		i[59610]=i[59611]=i[59616]=i[59617]=i[59618]=i[59619]=i[59672]=i[59673]=i[59674]=i[59675]=i[59680]=i[59681]=i[59682]=i[59683]=i[59736]=i[59737]=i[59738]=250;
		i[59739]=i[59744]=i[59745]=i[59746]=i[59747]=i[59796]=i[59797]=i[59798]=i[59799]=i[59804]=i[59805]=i[59806]=i[59807]=i[59860]=i[59861]=i[59862]=i[59863]=250;
		i[59876]=i[59877]=i[59878]=i[59879]=i[59924]=i[59925]=i[59926]=i[59927]=i[59988]=i[59989]=i[59990]=i[59991]=i[60052]=i[60053]=i[60054]=i[60055]=i[60116]=250;
		i[60117]=i[60118]=i[60119]=i[60188]=i[60189]=i[60190]=i[60191]=i[60252]=i[60253]=i[60254]=i[60255]=i[60316]=i[60317]=i[60318]=i[60319]=i[60380]=i[60381]=250;
		i[60382]=i[60383]=i[60444]=i[60445]=i[60446]=i[60447]=i[60508]=i[60509]=i[60510]=i[60511]=i[60572]=i[60573]=i[60574]=i[60575]=i[60636]=i[60637]=i[60638]=250;
		i[60639]=i[60700]=i[60701]=i[60702]=i[60703]=i[60760]=i[60761]=i[60762]=i[60763]=i[60764]=i[60765]=i[60766]=i[60767]=i[60768]=i[60769]=i[60770]=i[60771]=250;
		i[60820]=i[60821]=i[60822]=i[60823]=i[60824]=i[60825]=i[60826]=i[60827]=i[60828]=i[60829]=i[60830]=i[60831]=i[60832]=i[60833]=i[60834]=i[60835]=i[60836]=250;
		i[60837]=i[60838]=i[60839]=i[60840]=i[60841]=i[60842]=i[60843]=i[60844]=i[60845]=i[60846]=i[60847]=i[60888]=i[60889]=i[60890]=i[60891]=i[60892]=i[60893]=250;
		i[60894]=i[60895]=i[60896]=i[60897]=i[60898]=i[60899]=i[60948]=i[60949]=i[60950]=i[60951]=i[60952]=i[60953]=i[60954]=i[60955]=i[60956]=i[60957]=i[60958]=250;
		i[60959]=i[60960]=i[60961]=i[60962]=i[60963]=i[60964]=i[60965]=i[60966]=i[60967]=i[61012]=i[61013]=i[61014]=i[61015]=i[61016]=i[61017]=i[61018]=i[61019]=250;
		i[61020]=i[61021]=i[61022]=i[61023]=i[61024]=i[61025]=i[61026]=i[61027]=i[61028]=i[61029]=i[61030]=i[61031]=i[61076]=i[61077]=i[61078]=i[61079]=i[61080]=250;
		i[61081]=i[61082]=i[61083]=i[61084]=i[61085]=i[61086]=i[61087]=i[61088]=i[61089]=i[61090]=i[61091]=i[61092]=i[61093]=i[61094]=i[61095]=i[61140]=i[61141]=250;
		i[61142]=i[61143]=i[61144]=i[61145]=i[61146]=i[61147]=i[61148]=i[61149]=i[61150]=i[61151]=i[61152]=i[61153]=i[61154]=i[61155]=i[61156]=i[61157]=i[61158]=250;
		i[61159]=i[61212]=i[61213]=i[61214]=i[61215]=i[61276]=i[61277]=i[61278]=i[61279]=i[61340]=i[61341]=i[61342]=i[61343]=i[61404]=i[61405]=i[61406]=i[61407]=250;
		i[61784]=i[61785]=i[61786]=i[61787]=i[61792]=i[61793]=i[61794]=i[61795]=i[62492]=i[62493]=i[62494]=i[62495]=i[62556]=i[62557]=i[62558]=i[62559]=i[62616]=250;
		i[62617]=i[62618]=i[62619]=i[62624]=i[62625]=i[62626]=i[62627]=i[62680]=i[62681]=i[62682]=i[62683]=i[62688]=i[62689]=i[62690]=i[62691]=i[62744]=i[62745]=250;
		i[62746]=i[62747]=i[62752]=i[62753]=i[62754]=i[62755]=i[62808]=i[62809]=i[62810]=i[62811]=i[62812]=i[62813]=i[62814]=i[62815]=i[62816]=i[62817]=i[62818]=250;
		i[62819]=i[63004]=i[63005]=i[63006]=i[63007]=i[63068]=i[63069]=i[63070]=i[63071]=i[63128]=i[63129]=i[63130]=i[63131]=i[63136]=i[63137]=i[63138]=i[63139]=250;
		i[63192]=i[63193]=i[63194]=i[63195]=i[63200]=i[63201]=i[63202]=i[63203]=i[63260]=i[63261]=i[63262]=i[63263]=i[63324]=i[63325]=i[63326]=i[63327]=i[63384]=250;
		i[63385]=i[63386]=i[63387]=i[63392]=i[63393]=i[63394]=i[63395]=i[63448]=i[63449]=i[63450]=i[63451]=i[63456]=i[63457]=i[63458]=i[63459]=i[63512]=i[63513]=250;
		i[63514]=i[63515]=i[63584]=i[63585]=i[63586]=i[63587]=i[63644]=i[63645]=i[63646]=i[63647]=i[63708]=i[63709]=i[63710]=i[63711]=i[63716]=i[63717]=i[63718]=250;
		i[63719]=i[64024]=i[64025]=i[64026]=i[64027]=i[64096]=i[64097]=i[64098]=i[64099]=i[64156]=i[64157]=i[64158]=i[64159]=i[64280]=i[64281]=i[64282]=i[64283]=250;
		i[64352]=i[64353]=i[64354]=i[64355]=i[64412]=i[64413]=i[64414]=i[64415]=i[67100]=i[67101]=i[67102]=i[67103]=i[67104]=i[67105]=i[67106]=i[67107]=i[67924]=250;
		i[67925]=i[67926]=i[67927]=i[67996]=i[67997]=i[67998]=i[67999]=i[68004]=i[68005]=i[68006]=i[68007]=i[68128]=i[68129]=i[68130]=i[68131]=i[68568]=i[68569]=250;
		i[68570]=i[68571]=i[68572]=i[68573]=i[68574]=i[68575]=i[68576]=i[68577]=i[68578]=i[68579]=i[68948]=i[68949]=i[68950]=i[68951]=i[69020]=i[69021]=i[69022]=250;
		i[69023]=i[69028]=i[69029]=i[69030]=i[69031]=i[69148]=i[69149]=i[69150]=i[69151]=i[69588]=i[69589]=i[69590]=i[69591]=i[69604]=i[69605]=i[69606]=i[69607]=250;
		i[69716]=i[69717]=i[69718]=i[69719]=i[69720]=i[69721]=i[69722]=i[69723]=i[69724]=i[69725]=i[69726]=i[69727]=i[69728]=i[69729]=i[69730]=i[69731]=i[69732]=250;
		i[69733]=i[69734]=i[69735]=i[69972]=i[69973]=i[69974]=i[69975]=i[69976]=i[69977]=i[69978]=i[69979]=i[69980]=i[69981]=i[69982]=i[69983]=i[69984]=i[69985]=250;
		i[69986]=i[69987]=i[69988]=i[69989]=i[69990]=i[69991]=i[70044]=i[70045]=i[70046]=i[70047]=i[70052]=i[70053]=i[70054]=i[70055]=i[70356]=i[70357]=i[70358]=250;
		i[70359]=i[70364]=i[70365]=i[70366]=i[70367]=i[70416]=i[70417]=i[70418]=i[70419]=i[70436]=i[70437]=i[70438]=i[70439]=i[70484]=i[70485]=i[70486]=i[70487]=250;
		i[70500]=i[70501]=i[70502]=i[70503]=i[70504]=i[70505]=i[70506]=i[70507]=i[70508]=i[70509]=i[70510]=i[70511]=i[70548]=i[70549]=i[70550]=i[70551]=i[70568]=250;
		i[70569]=i[70570]=i[70571]=i[70612]=i[70613]=i[70614]=i[70615]=i[70996]=i[70997]=i[70998]=i[70999]=i[71012]=i[71013]=i[71014]=i[71015]=i[71068]=i[71069]=250;
		i[71070]=i[71071]=i[71076]=i[71077]=i[71078]=i[71079]=i[71384]=i[71385]=i[71386]=i[71387]=i[71392]=i[71393]=i[71394]=i[71395]=i[71444]=i[71445]=i[71446]=250;
		i[71447]=i[71452]=i[71453]=i[71454]=i[71455]=i[71456]=i[71457]=i[71458]=i[71459]=i[71460]=i[71461]=i[71462]=i[71463]=i[71464]=i[71465]=i[71466]=i[71467]=250;
		i[71508]=i[71509]=i[71510]=i[71511]=i[71528]=i[71529]=i[71530]=i[71531]=i[71572]=i[71573]=i[71574]=i[71575]=i[71584]=i[71585]=i[71586]=i[71587]=i[71588]=250;
		i[71589]=i[71590]=i[71591]=i[71592]=i[71593]=i[71594]=i[71595]=i[71596]=i[71597]=i[71598]=i[71599]=i[71640]=i[71641]=i[71642]=i[71643]=i[71772]=i[71773]=250;
		i[71774]=i[71775]=i[72020]=i[72021]=i[72022]=i[72023]=i[72036]=i[72037]=i[72038]=i[72039]=i[72092]=i[72093]=i[72094]=i[72095]=i[72100]=i[72101]=i[72102]=250;
		i[72103]=i[72412]=i[72413]=i[72414]=i[72415]=i[72420]=i[72421]=i[72422]=i[72423]=i[72472]=i[72473]=i[72474]=i[72475]=i[72480]=i[72481]=i[72482]=i[72483]=250;
		i[72484]=i[72485]=i[72486]=i[72487]=i[72536]=i[72537]=i[72538]=i[72539]=i[72556]=i[72557]=i[72558]=i[72559]=i[72600]=i[72601]=i[72602]=i[72603]=i[72612]=250;
		i[72613]=i[72614]=i[72615]=i[72616]=i[72617]=i[72618]=i[72619]=i[72668]=i[72669]=i[72670]=i[72671]=i[72796]=i[72797]=i[72798]=i[72799]=i[73044]=i[73045]=250;
		i[73046]=i[73047]=i[73060]=i[73061]=i[73062]=i[73063]=i[73116]=i[73117]=i[73118]=i[73119]=i[73124]=i[73125]=i[73126]=i[73127]=i[73176]=i[73177]=i[73178]=250;
		i[73179]=i[73432]=i[73433]=i[73434]=i[73435]=i[73440]=i[73441]=i[73442]=i[73443]=i[73496]=i[73497]=i[73498]=i[73499]=i[73508]=i[73509]=i[73510]=i[73511]=250;
		i[73564]=i[73565]=i[73566]=i[73567]=i[73572]=i[73573]=i[73574]=i[73575]=i[73576]=i[73577]=i[73578]=i[73579]=i[73580]=i[73581]=i[73582]=i[73583]=i[73628]=250;
		i[73629]=i[73630]=i[73631]=i[73640]=i[73641]=i[73642]=i[73643]=i[73692]=i[73693]=i[73694]=i[73695]=i[73812]=i[73813]=i[73814]=i[73815]=i[73816]=i[73817]=250;
		i[73818]=i[73819]=i[73820]=i[73821]=i[73822]=i[73823]=i[73824]=i[73825]=i[73826]=i[73827]=i[73828]=i[73829]=i[73830]=i[73831]=i[73880]=i[73881]=i[73882]=250;
		i[73883]=i[73884]=i[73885]=i[73886]=i[73887]=i[73888]=i[73889]=i[73890]=i[73891]=i[73944]=i[73945]=i[73946]=i[73947]=i[73948]=i[73949]=i[73950]=i[73951]=250;
		i[73952]=i[73953]=i[73954]=i[73955]=i[74068]=i[74069]=i[74070]=i[74071]=i[74084]=i[74085]=i[74086]=i[74087]=i[74136]=i[74137]=i[74138]=i[74139]=i[74140]=250;
		i[74141]=i[74142]=i[74143]=i[74148]=i[74149]=i[74150]=i[74151]=i[74336]=i[74337]=i[74338]=i[74339]=i[74392]=i[74393]=i[74394]=i[74395]=i[74396]=i[74397]=250;
		i[74398]=i[74399]=i[74452]=i[74453]=i[74454]=i[74455]=i[74460]=i[74461]=i[74462]=i[74463]=i[74512]=i[74513]=i[74514]=i[74515]=i[74524]=i[74525]=i[74526]=250;
		i[74527]=i[74580]=i[74581]=i[74582]=i[74583]=i[74588]=i[74589]=i[74590]=i[74591]=i[74636]=i[74637]=i[74638]=i[74639]=i[74640]=i[74641]=i[74642]=i[74643]=250;
		i[74644]=i[74645]=i[74646]=i[74647]=i[74656]=i[74657]=i[74658]=i[74659]=i[74776]=i[74777]=i[74778]=i[74779]=i[74780]=i[74781]=i[74782]=i[74783]=i[74784]=250;
		i[74785]=i[74786]=i[74787]=i[74844]=i[74845]=i[74846]=i[74847]=i[74908]=i[74909]=i[74910]=i[74911]=i[74976]=i[74977]=i[74978]=i[74979]=i[75092]=i[75093]=250;
		i[75094]=i[75095]=i[75108]=i[75109]=i[75110]=i[75111]=i[75156]=i[75157]=i[75158]=i[75159]=i[75160]=i[75161]=i[75162]=i[75163]=i[75164]=i[75165]=i[75166]=250;
		i[75167]=i[75172]=i[75173]=i[75174]=i[75175]=i[75360]=i[75361]=i[75362]=i[75363]=i[75412]=i[75413]=i[75414]=i[75415]=i[75424]=i[75425]=i[75426]=i[75427]=250;
		i[75536]=i[75537]=i[75538]=i[75539]=i[75548]=i[75549]=i[75550]=i[75551]=i[75604]=i[75605]=i[75606]=i[75607]=i[75616]=i[75617]=i[75618]=i[75619]=i[75668]=250;
		i[75669]=i[75670]=i[75671]=i[75680]=i[75681]=i[75682]=i[75683]=i[75740]=i[75741]=i[75742]=i[75743]=i[75800]=i[75801]=i[75802]=i[75803]=i[75808]=i[75809]=250;
		i[75810]=i[75811]=i[75868]=i[75869]=i[75870]=i[75871]=i[75936]=i[75937]=i[75938]=i[75939]=i[75996]=i[75997]=i[75998]=i[75999]=i[76060]=i[76061]=i[76062]=250;
		i[76063]=i[76180]=i[76181]=i[76182]=i[76183]=i[76184]=i[76185]=i[76186]=i[76187]=i[76188]=i[76189]=i[76190]=i[76191]=i[76196]=i[76197]=i[76198]=i[76199]=250;
		i[76380]=i[76381]=i[76382]=i[76383]=i[76384]=i[76385]=i[76386]=i[76387]=i[76436]=i[76437]=i[76438]=i[76439]=i[76448]=i[76449]=i[76450]=i[76451]=i[76556]=250;
		i[76557]=i[76558]=i[76559]=i[76560]=i[76561]=i[76562]=i[76563]=i[76576]=i[76577]=i[76578]=i[76579]=i[76624]=i[76625]=i[76626]=i[76627]=i[76628]=i[76629]=250;
		i[76630]=i[76631]=i[76644]=i[76645]=i[76646]=i[76647]=i[76688]=i[76689]=i[76690]=i[76691]=i[76708]=i[76709]=i[76710]=i[76711]=i[76824]=i[76825]=i[76826]=250;
		i[76827]=i[76828]=i[76829]=i[76830]=i[76831]=i[76832]=i[76833]=i[76834]=i[76835]=i[76952]=i[76953]=i[76954]=i[76955]=i[76956]=i[76957]=i[76958]=i[76959]=250;
		i[76960]=i[76961]=i[76962]=i[76963]=i[77016]=i[77017]=i[77018]=i[77019]=i[77020]=i[77021]=i[77022]=i[77023]=i[77024]=i[77025]=i[77026]=i[77027]=i[77088]=250;
		i[77089]=i[77090]=i[77091]=i[77208]=i[77209]=i[77210]=i[77211]=i[77212]=i[77213]=i[77214]=i[77215]=i[77216]=i[77217]=i[77218]=i[77219]=i[77220]=i[77221]=250;
		i[77222]=i[77223]=i[77224]=i[77225]=i[77226]=i[77227]=i[77408]=i[77409]=i[77410]=i[77411]=i[77464]=i[77465]=i[77466]=i[77467]=i[77468]=i[77469]=i[77470]=250;
		i[77471]=i[77584]=i[77585]=i[77586]=i[77587]=i[77604]=i[77605]=i[77606]=i[77607]=i[77652]=i[77653]=i[77654]=i[77655]=i[77672]=i[77673]=i[77674]=i[77675]=250;
		i[77708]=i[77709]=i[77710]=i[77711]=i[77712]=i[77713]=i[77714]=i[77715]=i[77716]=i[77717]=i[77718]=i[77719]=i[77736]=i[77737]=i[77738]=i[77739]=i[84060]=250;
		i[84061]=i[84062]=i[84063]=i[84120]=i[84121]=i[84122]=i[84123]=i[84380]=i[84381]=i[84382]=i[84383]=i[84440]=i[84441]=i[84442]=i[84443]=i[84444]=i[84445]=250;
		i[84446]=i[84447]=i[84448]=i[84449]=i[84450]=i[84451]=i[85084]=i[85085]=i[85086]=i[85087]=i[85144]=i[85145]=i[85146]=i[85147]=i[85404]=i[85405]=i[85406]=250;
		i[85407]=i[85460]=i[85461]=i[85462]=i[85463]=i[85476]=i[85477]=i[85478]=i[85479]=i[86108]=i[86109]=i[86110]=i[86111]=i[86168]=i[86169]=i[86170]=i[86171]=250;
		i[86172]=i[86173]=i[86174]=i[86175]=i[86176]=i[86177]=i[86178]=i[86179]=i[86228]=i[86229]=i[86230]=i[86231]=i[86240]=i[86241]=i[86242]=i[86243]=i[86244]=250;
		i[86245]=i[86246]=i[86247]=i[86364]=i[86365]=i[86366]=i[86367]=i[86428]=i[86429]=i[86430]=i[86431]=i[86496]=i[86497]=i[86498]=i[86499]=i[86616]=i[86617]=250;
		i[86618]=i[86619]=i[86620]=i[86621]=i[86622]=i[86623]=i[86624]=i[86625]=i[86626]=i[86627]=i[86628]=i[86629]=i[86630]=i[86631]=i[86748]=i[86749]=i[86750]=250;
		i[86751]=i[86756]=i[86757]=i[86758]=i[86759]=i[86936]=i[86937]=i[86938]=i[86939]=i[86940]=i[86941]=i[86942]=i[86943]=i[86944]=i[86945]=i[86946]=i[86947]=250;
		i[86948]=i[86949]=i[86950]=i[86951]=i[87132]=i[87133]=i[87134]=i[87135]=i[87188]=i[87189]=i[87190]=i[87191]=i[87196]=i[87197]=i[87198]=i[87199]=i[87204]=250;
		i[87205]=i[87206]=i[87207]=i[87256]=i[87257]=i[87258]=i[87259]=i[87260]=i[87261]=i[87262]=i[87263]=i[87312]=i[87313]=i[87314]=i[87315]=i[87332]=i[87333]=250;
		i[87334]=i[87335]=i[87380]=i[87381]=i[87382]=i[87383]=i[87384]=i[87385]=i[87386]=i[87387]=i[87388]=i[87389]=i[87390]=i[87391]=i[87392]=i[87393]=i[87394]=250;
		i[87395]=i[87396]=i[87397]=i[87398]=i[87399]=i[87452]=i[87453]=i[87454]=i[87455]=i[87516]=i[87517]=i[87518]=i[87519]=i[87524]=i[87525]=i[87526]=i[87527]=250;
		i[87636]=i[87637]=i[87638]=i[87639]=i[87656]=i[87657]=i[87658]=i[87659]=i[87768]=i[87769]=i[87770]=i[87771]=i[87776]=i[87777]=i[87778]=i[87779]=i[87956]=250;
		i[87957]=i[87958]=i[87959]=i[87976]=i[87977]=i[87978]=i[87979]=i[88156]=i[88157]=i[88158]=i[88159]=i[88212]=i[88213]=i[88214]=i[88215]=i[88220]=i[88221]=250;
		i[88222]=i[88223]=i[88280]=i[88281]=i[88282]=i[88283]=i[88340]=i[88341]=i[88342]=i[88343]=i[88344]=i[88345]=i[88346]=i[88347]=i[88348]=i[88349]=i[88350]=250;
		i[88351]=i[88352]=i[88353]=i[88354]=i[88355]=i[88412]=i[88413]=i[88414]=i[88415]=i[88536]=i[88537]=i[88538]=i[88539]=i[88548]=i[88549]=i[88550]=i[88551]=250;
		i[88656]=i[88657]=i[88658]=i[88659]=i[88668]=i[88669]=i[88670]=i[88671]=i[88672]=i[88673]=i[88674]=i[88675]=i[88684]=i[88685]=i[88686]=i[88687]=i[88788]=250;
		i[88789]=i[88790]=i[88791]=i[88796]=i[88797]=i[88798]=i[88799]=i[88868]=i[88869]=i[88870]=i[88871]=i[88920]=i[88921]=i[88922]=i[88923]=i[88924]=i[88925]=250;
		i[88926]=i[88927]=i[88928]=i[88929]=i[88930]=i[88931]=i[88976]=i[88977]=i[88978]=i[88979]=i[88984]=i[88985]=i[88986]=i[88987]=i[88996]=i[88997]=i[88998]=250;
		i[88999]=i[89004]=i[89005]=i[89006]=i[89007]=i[89180]=i[89181]=i[89182]=i[89183]=i[89236]=i[89237]=i[89238]=i[89239]=i[89244]=i[89245]=i[89246]=i[89247]=250;
		i[89300]=i[89301]=i[89302]=i[89303]=i[89304]=i[89305]=i[89306]=i[89307]=i[89308]=i[89309]=i[89310]=i[89311]=i[89364]=i[89365]=i[89366]=i[89367]=i[89376]=250;
		i[89377]=i[89378]=i[89379]=i[89428]=i[89429]=i[89430]=i[89431]=i[89432]=i[89433]=i[89434]=i[89435]=i[89436]=i[89437]=i[89438]=i[89439]=i[89440]=i[89441]=250;
		i[89442]=i[89443]=i[89444]=i[89445]=i[89446]=i[89447]=i[89556]=i[89557]=i[89558]=i[89559]=i[89568]=i[89569]=i[89570]=i[89571]=i[89680]=i[89681]=i[89682]=250;
		i[89683]=i[89688]=i[89689]=i[89690]=i[89691]=i[89700]=i[89701]=i[89702]=i[89703]=i[89708]=i[89709]=i[89710]=i[89711]=i[89816]=i[89817]=i[89818]=i[89819]=250;
		i[89824]=i[89825]=i[89826]=i[89827]=i[89892]=i[89893]=i[89894]=i[89895]=i[90000]=i[90001]=i[90002]=i[90003]=i[90008]=i[90009]=i[90010]=i[90011]=i[90012]=250;
		i[90013]=i[90014]=i[90015]=i[90016]=i[90017]=i[90018]=i[90019]=i[90028]=i[90029]=i[90030]=i[90031]=i[90260]=i[90261]=i[90262]=i[90263]=i[90268]=i[90269]=250;
		i[90270]=i[90271]=i[90276]=i[90277]=i[90278]=i[90279]=i[90328]=i[90329]=i[90330]=i[90331]=i[90388]=i[90389]=i[90390]=i[90391]=i[90400]=i[90401]=i[90402]=250;
		i[90403]=i[90456]=i[90457]=i[90458]=i[90459]=i[90464]=i[90465]=i[90466]=i[90467]=i[90524]=i[90525]=i[90526]=i[90527]=i[90580]=i[90581]=i[90582]=i[90583]=250;
		i[90588]=i[90589]=i[90590]=i[90591]=i[90704]=i[90705]=i[90706]=i[90707]=i[90712]=i[90713]=i[90714]=i[90715]=i[90732]=i[90733]=i[90734]=i[90735]=i[90776]=250;
		i[90777]=i[90778]=i[90779]=i[90780]=i[90781]=i[90782]=i[90783]=i[90784]=i[90785]=i[90786]=i[90787]=i[90844]=i[90845]=i[90846]=i[90847]=i[90852]=i[90853]=250;
		i[90854]=i[90855]=i[90900]=i[90901]=i[90902]=i[90903]=i[90904]=i[90905]=i[90906]=i[90907]=i[90908]=i[90909]=i[90910]=i[90911]=i[90912]=i[90913]=i[90914]=250;
		i[90915]=i[90916]=i[90917]=i[90918]=i[90919]=i[91024]=i[91025]=i[91026]=i[91027]=i[91032]=i[91033]=i[91034]=i[91035]=i[91044]=i[91045]=i[91046]=i[91047]=250;
		i[91052]=i[91053]=i[91054]=i[91055]=i[91228]=i[91229]=i[91230]=i[91231]=i[91288]=i[91289]=i[91290]=i[91291]=i[91292]=i[91293]=i[91294]=i[91295]=i[91296]=250;
		i[91297]=i[91298]=i[91299]=i[91352]=i[91353]=i[91354]=i[91355]=i[91412]=i[91413]=i[91414]=i[91415]=i[91416]=i[91417]=i[91418]=i[91419]=i[91420]=i[91421]=250;
		i[91422]=i[91423]=i[91424]=i[91425]=i[91426]=i[91427]=i[91480]=i[91481]=i[91482]=i[91483]=i[91488]=i[91489]=i[91490]=i[91491]=i[91548]=i[91549]=i[91550]=250;
		i[91551]=i[91608]=i[91609]=i[91610]=i[91611]=i[91728]=i[91729]=i[91730]=i[91731]=i[91740]=i[91741]=i[91742]=i[91743]=i[91744]=i[91745]=i[91746]=i[91747]=250;
		i[91748]=i[91749]=i[91750]=i[91751]=i[91756]=i[91757]=i[91758]=i[91759]=i[91800]=i[91801]=i[91802]=i[91803]=i[91804]=i[91805]=i[91806]=i[91807]=i[91808]=250;
		i[91809]=i[91810]=i[91811]=i[92048]=i[92049]=i[92050]=i[92051]=i[92056]=i[92057]=i[92058]=i[92059]=i[92060]=i[92061]=i[92062]=i[92063]=i[92064]=i[92065]=250;
		i[92066]=i[92067]=i[92076]=i[92077]=i[92078]=i[92079]=i[92320]=i[92321]=i[92322]=i[92323]=i[92376]=i[92377]=i[92378]=i[92379]=i[92388]=i[92389]=i[92390]=250;
		i[92391]=i[92432]=i[92433]=i[92434]=i[92435]=i[92452]=i[92453]=i[92454]=i[92455]=i[92500]=i[92501]=i[92502]=i[92503]=i[92516]=i[92517]=i[92518]=i[92519]=250;
		i[92572]=i[92573]=i[92574]=i[92575]=i[92628]=i[92629]=i[92630]=i[92631]=i[92644]=i[92645]=i[92646]=i[92647]=i[92756]=i[92757]=i[92758]=i[92759]=i[92776]=250;
		i[92777]=i[92778]=i[92779]=i[92832]=i[92833]=i[92834]=i[92835]=i[93076]=i[93077]=i[93078]=i[93079]=i[93096]=i[93097]=i[93098]=i[93099]=i[93344]=i[93345]=250;
		i[93346]=i[93347]=i[93404]=i[93405]=i[93406]=i[93407]=i[93408]=i[93409]=i[93410]=i[93411]=i[93524]=i[93525]=i[93526]=i[93527]=i[93540]=i[93541]=i[93542]=250;
		i[93543]=i[93596]=i[93597]=i[93598]=i[93599]=i[93656]=i[93657]=i[93658]=i[93659]=i[93660]=i[93661]=i[93662]=i[93663]=i[93664]=i[93665]=i[93666]=i[93667]=250;
		i[93720]=i[93721]=i[93722]=i[93723]=i[93728]=i[93729]=i[93730]=i[93731]=i[93784]=i[93785]=i[93786]=i[93787]=i[93788]=i[93789]=i[93790]=i[93791]=i[93792]=250;
		i[93793]=i[93794]=i[93795]=i[93796]=i[93797]=i[93798]=i[93799]=i[93848]=i[93849]=i[93850]=i[93851]=i[93852]=i[93853]=i[93854]=i[93855]=i[93856]=i[93857]=250;
		i[93858]=i[93859]=i[94104]=i[94105]=i[94106]=i[94107]=i[94108]=i[94109]=i[94110]=i[94111]=i[94112]=i[94113]=i[94114]=i[94115]=i[94116]=i[94117]=i[94118]=250;
		i[94119]=i[95188]=i[95189]=i[95190]=i[95191]=i[95192]=i[95193]=i[95194]=i[95195]=i[95196]=i[95197]=i[95198]=i[95199]=i[95200]=i[95201]=i[95202]=i[95203]=250;
		i[95204]=i[95205]=i[95206]=i[95207]=i[95208]=i[95209]=i[95210]=i[95211]=i[133140]=i[133141]=i[133142]=i[133143]=i[133220]=i[133221]=i[133222]=i[133223]=250;
		i[133720]=i[133721]=i[133722]=i[133723]=i[133856]=i[133857]=i[133858]=i[133859]=i[133916]=i[133917]=i[133918]=i[133919]=i[133980]=i[133981]=i[133982]=250;
		i[133983]=i[134164]=i[134165]=i[134166]=i[134167]=i[134244]=i[134245]=i[134246]=i[134247]=i[134748]=i[134749]=i[134750]=i[134751]=i[134876]=i[134877]=250;
		i[134878]=i[134879]=i[134940]=i[134941]=i[134942]=i[134943]=i[135008]=i[135009]=i[135010]=i[135011]=i[135188]=i[135189]=i[135190]=i[135191]=i[135196]=250;
		i[135197]=i[135198]=i[135199]=i[135200]=i[135201]=i[135202]=i[135203]=i[135256]=i[135257]=i[135258]=i[135259]=i[135260]=i[135261]=i[135262]=i[135263]=250;
		i[135268]=i[135269]=i[135270]=i[135271]=i[135320]=i[135321]=i[135322]=i[135323]=i[135384]=i[135385]=i[135386]=i[135387]=i[135388]=i[135389]=i[135390]=250;
		i[135391]=i[135392]=i[135393]=i[135394]=i[135395]=i[135448]=i[135449]=i[135450]=i[135451]=i[135452]=i[135453]=i[135454]=i[135455]=i[135512]=i[135513]=250;
		i[135514]=i[135515]=i[135516]=i[135517]=i[135518]=i[135519]=i[135524]=i[135525]=i[135526]=i[135527]=i[135580]=i[135581]=i[135582]=i[135583]=i[135636]=250;
		i[135637]=i[135638]=i[135639]=i[135652]=i[135653]=i[135654]=i[135655]=i[135700]=i[135701]=i[135702]=i[135703]=i[135716]=i[135717]=i[135718]=i[135719]=250;
		i[135772]=i[135773]=i[135774]=i[135775]=i[135828]=i[135829]=i[135830]=i[135831]=i[135832]=i[135833]=i[135834]=i[135835]=i[135836]=i[135837]=i[135838]=250;
		i[135839]=i[135840]=i[135841]=i[135842]=i[135843]=i[135844]=i[135845]=i[135846]=i[135847]=i[135900]=i[135901]=i[135902]=i[135903]=i[135964]=i[135965]=250;
		i[135966]=i[135967]=i[136032]=i[136033]=i[136034]=i[136035]=i[136148]=i[136149]=i[136150]=i[136151]=i[136152]=i[136153]=i[136154]=i[136155]=i[136156]=250;
		i[136157]=i[136158]=i[136159]=i[136160]=i[136161]=i[136162]=i[136163]=i[136164]=i[136165]=i[136166]=i[136167]=i[136168]=i[136169]=i[136170]=i[136171]=250;
		i[136212]=i[136213]=i[136214]=i[136215]=i[136216]=i[136217]=i[136218]=i[136219]=i[136228]=i[136229]=i[136230]=i[136231]=i[136276]=i[136277]=i[136278]=250;
		i[136279]=i[136288]=i[136289]=i[136290]=i[136291]=i[136292]=i[136293]=i[136294]=i[136295]=i[136344]=i[136345]=i[136346]=i[136347]=i[136404]=i[136405]=250;
		i[136406]=i[136407]=i[136420]=i[136421]=i[136422]=i[136423]=i[136472]=i[136473]=i[136474]=i[136475]=i[136532]=i[136533]=i[136534]=i[136535]=i[136544]=250;
		i[136545]=i[136546]=i[136547]=i[136548]=i[136549]=i[136550]=i[136551]=i[136604]=i[136605]=i[136606]=i[136607]=i[136660]=i[136661]=i[136662]=i[136663]=250;
		i[136676]=i[136677]=i[136678]=i[136679]=i[136728]=i[136729]=i[136730]=i[136731]=i[136736]=i[136737]=i[136738]=i[136739]=i[136796]=i[136797]=i[136798]=250;
		i[136799]=i[136856]=i[136857]=i[136858]=i[136859]=i[136924]=i[136925]=i[136926]=i[136927]=i[136988]=i[136989]=i[136990]=i[136991]=i[137056]=i[137057]=250;
		i[137058]=i[137059]=i[137172]=i[137173]=i[137174]=i[137175]=i[137192]=i[137193]=i[137194]=i[137195]=i[137236]=i[137237]=i[137238]=i[137239]=i[137252]=250;
		i[137253]=i[137254]=i[137255]=i[137300]=i[137301]=i[137302]=i[137303]=i[137316]=i[137317]=i[137318]=i[137319]=i[137368]=i[137369]=i[137370]=i[137371]=250;
		i[137440]=i[137441]=i[137442]=i[137443]=i[137496]=i[137497]=i[137498]=i[137499]=i[137556]=i[137557]=i[137558]=i[137559]=i[137572]=i[137573]=i[137574]=250;
		i[137575]=i[137624]=i[137625]=i[137626]=i[137627]=i[137632]=i[137633]=i[137634]=i[137635]=i[137680]=i[137681]=i[137682]=i[137683]=i[137688]=i[137689]=250;
		i[137690]=i[137691]=i[137696]=i[137697]=i[137698]=i[137699]=i[137704]=i[137705]=i[137706]=i[137707]=i[137756]=i[137757]=i[137758]=i[137759]=i[137816]=250;
		i[137817]=i[137818]=i[137819]=i[137824]=i[137825]=i[137826]=i[137827]=i[137884]=i[137885]=i[137886]=i[137887]=i[137948]=i[137949]=i[137950]=i[137951]=250;
		i[138012]=i[138013]=i[138014]=i[138015]=i[138080]=i[138081]=i[138082]=i[138083]=i[138196]=i[138197]=i[138198]=i[138199]=i[138216]=i[138217]=i[138218]=250;
		i[138219]=i[138260]=i[138261]=i[138262]=i[138263]=i[138276]=i[138277]=i[138278]=i[138279]=i[138324]=i[138325]=i[138326]=i[138327]=i[138340]=i[138341]=250;
		i[138342]=i[138343]=i[138392]=i[138393]=i[138394]=i[138395]=i[138456]=i[138457]=i[138458]=i[138459]=i[138460]=i[138461]=i[138462]=i[138463]=i[138520]=250;
		i[138521]=i[138522]=i[138523]=i[138580]=i[138581]=i[138582]=i[138583]=i[138596]=i[138597]=i[138598]=i[138599]=i[138648]=i[138649]=i[138650]=i[138651]=250;
		i[138656]=i[138657]=i[138658]=i[138659]=i[138704]=i[138705]=i[138706]=i[138707]=i[138712]=i[138713]=i[138714]=i[138715]=i[138720]=i[138721]=i[138722]=250;
		i[138723]=i[138728]=i[138729]=i[138730]=i[138731]=i[138780]=i[138781]=i[138782]=i[138783]=i[138840]=i[138841]=i[138842]=i[138843]=i[138848]=i[138849]=250;
		i[138850]=i[138851]=i[138908]=i[138909]=i[138910]=i[138911]=i[138968]=i[138969]=i[138970]=i[138971]=i[139036]=i[139037]=i[139038]=i[139039]=i[139108]=250;
		i[139109]=i[139110]=i[139111]=i[139156]=i[139157]=i[139158]=i[139159]=i[139164]=i[139165]=i[139166]=i[139167]=i[139168]=i[139169]=i[139170]=i[139171]=250;
		i[139220]=i[139221]=i[139222]=i[139223]=i[139240]=i[139241]=i[139242]=i[139243]=i[139284]=i[139285]=i[139286]=i[139287]=i[139288]=i[139289]=i[139290]=250;
		i[139291]=i[139300]=i[139301]=i[139302]=i[139303]=i[139348]=i[139349]=i[139350]=i[139351]=i[139360]=i[139361]=i[139362]=i[139363]=i[139364]=i[139365]=250;
		i[139366]=i[139367]=i[139416]=i[139417]=i[139418]=i[139419]=i[139420]=i[139421]=i[139422]=i[139423]=i[139476]=i[139477]=i[139478]=i[139479]=i[139492]=250;
		i[139493]=i[139494]=i[139495]=i[139544]=i[139545]=i[139546]=i[139547]=i[139604]=i[139605]=i[139606]=i[139607]=i[139620]=i[139621]=i[139622]=i[139623]=250;
		i[139668]=i[139669]=i[139670]=i[139671]=i[139684]=i[139685]=i[139686]=i[139687]=i[139724]=i[139725]=i[139726]=i[139727]=i[139736]=i[139737]=i[139738]=250;
		i[139739]=i[139744]=i[139745]=i[139746]=i[139747]=i[139756]=i[139757]=i[139758]=i[139759]=i[139800]=i[139801]=i[139802]=i[139803]=i[139808]=i[139809]=250;
		i[139810]=i[139811]=i[139860]=i[139861]=i[139862]=i[139863]=i[139876]=i[139877]=i[139878]=i[139879]=i[139936]=i[139937]=i[139938]=i[139939]=i[139996]=250;
		i[139997]=i[139998]=i[139999]=i[140060]=i[140061]=i[140062]=i[140063]=i[140128]=i[140129]=i[140130]=i[140131]=i[140184]=i[140185]=i[140186]=i[140187]=250;
		i[140188]=i[140189]=i[140190]=i[140191]=i[140196]=i[140197]=i[140198]=i[140199]=i[140244]=i[140245]=i[140246]=i[140247]=i[140264]=i[140265]=i[140266]=250;
		i[140267]=i[140308]=i[140309]=i[140310]=i[140311]=i[140316]=i[140317]=i[140318]=i[140319]=i[140320]=i[140321]=i[140322]=i[140323]=i[140376]=i[140377]=250;
		i[140378]=i[140379]=i[140380]=i[140381]=i[140382]=i[140383]=i[140388]=i[140389]=i[140390]=i[140391]=i[140440]=i[140441]=i[140442]=i[140443]=i[140448]=250;
		i[140449]=i[140450]=i[140451]=i[140504]=i[140505]=i[140506]=i[140507]=i[140508]=i[140509]=i[140510]=i[140511]=i[140512]=i[140513]=i[140514]=i[140515]=250;
		i[140564]=i[140565]=i[140566]=i[140567]=i[140568]=i[140569]=i[140570]=i[140571]=i[140572]=i[140573]=i[140574]=i[140575]=i[140628]=i[140629]=i[140630]=250;
		i[140631]=i[140644]=i[140645]=i[140646]=i[140647]=i[140692]=i[140693]=i[140694]=i[140695]=i[140708]=i[140709]=i[140710]=i[140711]=i[140748]=i[140749]=250;
		i[140750]=i[140751]=i[140764]=i[140765]=i[140766]=i[140767]=i[140780]=i[140781]=i[140782]=i[140783]=i[140820]=i[140821]=i[140822]=i[140823]=i[140836]=250;
		i[140837]=i[140838]=i[140839]=i[140884]=i[140885]=i[140886]=i[140887]=i[140900]=i[140901]=i[140902]=i[140903]=i[140948]=i[140949]=i[140950]=i[140951]=250;
		i[140952]=i[140953]=i[140954]=i[140955]=i[140956]=i[140957]=i[140958]=i[140959]=i[140960]=i[140961]=i[140962]=i[140963]=i[140964]=i[140965]=i[140966]=250;
		i[140967]=i[141020]=i[141021]=i[141022]=i[141023]=i[141084]=i[141085]=i[141086]=i[141087]=i[141152]=i[141153]=i[141154]=i[141155]=i[141268]=i[141269]=250;
		i[141270]=i[141271]=i[141288]=i[141289]=i[141290]=i[141291]=i[141592]=i[141593]=i[141594]=i[141595]=i[142044]=i[142045]=i[142046]=i[142047]=i[142108]=250;
		i[142109]=i[142110]=i[142111]=i[142176]=i[142177]=i[142178]=i[142179]=i[142292]=i[142293]=i[142294]=i[142295]=i[142296]=i[142297]=i[142298]=i[142299]=250;
		i[142300]=i[142301]=i[142302]=i[142303]=i[142304]=i[142305]=i[142306]=i[142307]=i[142308]=i[142309]=i[142310]=i[142311]=i[142312]=i[142313]=i[142314]=250;
		i[142315]=i[142616]=i[142617]=i[142618]=i[142619]=i[143072]=i[143073]=i[143074]=i[143075]=i[143132]=i[143133]=i[143134]=i[143135]=i[143196]=i[143197]=250;
		i[143198]=i[143199]=i[149972]=i[149973]=i[149974]=i[149975]=i[149976]=i[149977]=i[149978]=i[149979]=i[149980]=i[149981]=i[149982]=i[149983]=i[149984]=250;
		i[149985]=i[149986]=i[149987]=i[150168]=i[150169]=i[150170]=i[150171]=i[151012]=i[151013]=i[151014]=i[151015]=i[151196]=i[151197]=i[151198]=i[151199]=250;
		i[151640]=i[151641]=i[151642]=i[151643]=i[151644]=i[151645]=i[151646]=i[151647]=i[151652]=i[151653]=i[151654]=i[151655]=i[151700]=i[151701]=i[151702]=250;
		i[151703]=i[151708]=i[151709]=i[151710]=i[151711]=i[151712]=i[151713]=i[151714]=i[151715]=i[151768]=i[151769]=i[151770]=i[151771]=i[151772]=i[151773]=250;
		i[151774]=i[151775]=i[151776]=i[151777]=i[151778]=i[151779]=i[151832]=i[151833]=i[151834]=i[151835]=i[151836]=i[151837]=i[151838]=i[151839]=i[151844]=250;
		i[151845]=i[151846]=i[151847]=i[151896]=i[151897]=i[151898]=i[151899]=i[151900]=i[151901]=i[151902]=i[151903]=i[151904]=i[151905]=i[151906]=i[151907]=250;
		i[151964]=i[151965]=i[151966]=i[151967]=i[152024]=i[152025]=i[152026]=i[152027]=i[152028]=i[152029]=i[152030]=i[152031]=i[152036]=i[152037]=i[152038]=250;
		i[152039]=i[152084]=i[152085]=i[152086]=i[152087]=i[152100]=i[152101]=i[152102]=i[152103]=i[152156]=i[152157]=i[152158]=i[152159]=i[152220]=i[152221]=250;
		i[152222]=i[152223]=i[152276]=i[152277]=i[152278]=i[152279]=i[152288]=i[152289]=i[152290]=i[152291]=i[152348]=i[152349]=i[152350]=i[152351]=i[152400]=250;
		i[152401]=i[152402]=i[152403]=i[152412]=i[152413]=i[152414]=i[152415]=i[152424]=i[152425]=i[152426]=i[152427]=i[152468]=i[152469]=i[152470]=i[152471]=250;
		i[152484]=i[152485]=i[152486]=i[152487]=i[152536]=i[152537]=i[152538]=i[152539]=i[152540]=i[152541]=i[152542]=i[152543]=i[152544]=i[152545]=i[152546]=250;
		i[152547]=i[152660]=i[152661]=i[152662]=i[152663]=i[152672]=i[152673]=i[152674]=i[152675]=i[152676]=i[152677]=i[152678]=i[152679]=i[152724]=i[152725]=250;
		i[152726]=i[152727]=i[152728]=i[152729]=i[152730]=i[152731]=i[152740]=i[152741]=i[152742]=i[152743]=i[152788]=i[152789]=i[152790]=i[152791]=i[152804]=250;
		i[152805]=i[152806]=i[152807]=i[152852]=i[152853]=i[152854]=i[152855]=i[152864]=i[152865]=i[152866]=i[152867]=i[152868]=i[152869]=i[152870]=i[152871]=250;
		i[152916]=i[152917]=i[152918]=i[152919]=i[152932]=i[152933]=i[152934]=i[152935]=i[152988]=i[152989]=i[152990]=i[152991]=i[153044]=i[153045]=i[153046]=250;
		i[153047]=i[153056]=i[153057]=i[153058]=i[153059]=i[153060]=i[153061]=i[153062]=i[153063]=i[153108]=i[153109]=i[153110]=i[153111]=i[153124]=i[153125]=250;
		i[153126]=i[153127]=i[153180]=i[153181]=i[153182]=i[153183]=i[153244]=i[153245]=i[153246]=i[153247]=i[153300]=i[153301]=i[153302]=i[153303]=i[153308]=250;
		i[153309]=i[153310]=i[153311]=i[153372]=i[153373]=i[153374]=i[153375]=i[153424]=i[153425]=i[153426]=i[153427]=i[153436]=i[153437]=i[153438]=i[153439]=250;
		i[153448]=i[153449]=i[153450]=i[153451]=i[153492]=i[153493]=i[153494]=i[153495]=i[153508]=i[153509]=i[153510]=i[153511]=i[153556]=i[153557]=i[153558]=250;
		i[153559]=i[153572]=i[153573]=i[153574]=i[153575]=i[153684]=i[153685]=i[153686]=i[153687]=i[153700]=i[153701]=i[153702]=i[153703]=i[153748]=i[153749]=250;
		i[153750]=i[153751]=i[153764]=i[153765]=i[153766]=i[153767]=i[153812]=i[153813]=i[153814]=i[153815]=i[153876]=i[153877]=i[153878]=i[153879]=i[153892]=250;
		i[153893]=i[153894]=i[153895]=i[153940]=i[153941]=i[153942]=i[153943]=i[154012]=i[154013]=i[154014]=i[154015]=i[154068]=i[154069]=i[154070]=i[154071]=250;
		i[154084]=i[154085]=i[154086]=i[154087]=i[154132]=i[154133]=i[154134]=i[154135]=i[154148]=i[154149]=i[154150]=i[154151]=i[154204]=i[154205]=i[154206]=250;
		i[154207]=i[154268]=i[154269]=i[154270]=i[154271]=i[154324]=i[154325]=i[154326]=i[154327]=i[154332]=i[154333]=i[154334]=i[154335]=i[154396]=i[154397]=250;
		i[154398]=i[154399]=i[154448]=i[154449]=i[154450]=i[154451]=i[154460]=i[154461]=i[154462]=i[154463]=i[154472]=i[154473]=i[154474]=i[154475]=i[154516]=250;
		i[154517]=i[154518]=i[154519]=i[154532]=i[154533]=i[154534]=i[154535]=i[154580]=i[154581]=i[154582]=i[154583]=i[154596]=i[154597]=i[154598]=i[154599]=250;
		i[154712]=i[154713]=i[154714]=i[154715]=i[154716]=i[154717]=i[154718]=i[154719]=i[154720]=i[154721]=i[154722]=i[154723]=i[154724]=i[154725]=i[154726]=250;
		i[154727]=i[154772]=i[154773]=i[154774]=i[154775]=i[154788]=i[154789]=i[154790]=i[154791]=i[154836]=i[154837]=i[154838]=i[154839]=i[154900]=i[154901]=250;
		i[154902]=i[154903]=i[154916]=i[154917]=i[154918]=i[154919]=i[154964]=i[154965]=i[154966]=i[154967]=i[154968]=i[154969]=i[154970]=i[154971]=i[154972]=250;
		i[154973]=i[154974]=i[154975]=i[154976]=i[154977]=i[154978]=i[154979]=i[154980]=i[154981]=i[154982]=i[154983]=i[155036]=i[155037]=i[155038]=i[155039]=250;
		i[155092]=i[155093]=i[155094]=i[155095]=i[155108]=i[155109]=i[155110]=i[155111]=i[155156]=i[155157]=i[155158]=i[155159]=i[155172]=i[155173]=i[155174]=250;
		i[155175]=i[155228]=i[155229]=i[155230]=i[155231]=i[155292]=i[155293]=i[155294]=i[155295]=i[155348]=i[155349]=i[155350]=i[155351]=i[155352]=i[155353]=250;
		i[155354]=i[155355]=i[155420]=i[155421]=i[155422]=i[155423]=i[155472]=i[155473]=i[155474]=i[155475]=i[155484]=i[155485]=i[155486]=i[155487]=i[155496]=250;
		i[155497]=i[155498]=i[155499]=i[155540]=i[155541]=i[155542]=i[155543]=i[155556]=i[155557]=i[155558]=i[155559]=i[155604]=i[155605]=i[155606]=i[155607]=250;
		i[155620]=i[155621]=i[155622]=i[155623]=i[155732]=i[155733]=i[155734]=i[155735]=i[155748]=i[155749]=i[155750]=i[155751]=i[155796]=i[155797]=i[155798]=250;
		i[155799]=i[155800]=i[155801]=i[155802]=i[155803]=i[155812]=i[155813]=i[155814]=i[155815]=i[155860]=i[155861]=i[155862]=i[155863]=i[155876]=i[155877]=250;
		i[155878]=i[155879]=i[155924]=i[155925]=i[155926]=i[155927]=i[155936]=i[155937]=i[155938]=i[155939]=i[155940]=i[155941]=i[155942]=i[155943]=i[155988]=250;
		i[155989]=i[155990]=i[155991]=i[156004]=i[156005]=i[156006]=i[156007]=i[156060]=i[156061]=i[156062]=i[156063]=i[156116]=i[156117]=i[156118]=i[156119]=250;
		i[156128]=i[156129]=i[156130]=i[156131]=i[156132]=i[156133]=i[156134]=i[156135]=i[156180]=i[156181]=i[156182]=i[156183]=i[156184]=i[156185]=i[156186]=250;
		i[156187]=i[156196]=i[156197]=i[156198]=i[156199]=i[156252]=i[156253]=i[156254]=i[156255]=i[156316]=i[156317]=i[156318]=i[156319]=i[156372]=i[156373]=250;
		i[156374]=i[156375]=i[156380]=i[156381]=i[156382]=i[156383]=i[156444]=i[156445]=i[156446]=i[156447]=i[156496]=i[156497]=i[156498]=i[156499]=i[156500]=250;
		i[156501]=i[156502]=i[156503]=i[156508]=i[156509]=i[156510]=i[156511]=i[156512]=i[156513]=i[156514]=i[156515]=i[156520]=i[156521]=i[156522]=i[156523]=250;
		i[156564]=i[156565]=i[156566]=i[156567]=i[156568]=i[156569]=i[156570]=i[156571]=i[156580]=i[156581]=i[156582]=i[156583]=i[156628]=i[156629]=i[156630]=250;
		i[156631]=i[156644]=i[156645]=i[156646]=i[156647]=i[156760]=i[156761]=i[156762]=i[156763]=i[156764]=i[156765]=i[156766]=i[156767]=i[156768]=i[156769]=250;
		i[156770]=i[156771]=i[156820]=i[156821]=i[156822]=i[156823]=i[156828]=i[156829]=i[156830]=i[156831]=i[156832]=i[156833]=i[156834]=i[156835]=i[156888]=250;
		i[156889]=i[156890]=i[156891]=i[156892]=i[156893]=i[156894]=i[156895]=i[156896]=i[156897]=i[156898]=i[156899]=i[156952]=i[156953]=i[156954]=i[156955]=250;
		i[156956]=i[156957]=i[156958]=i[156959]=i[156964]=i[156965]=i[156966]=i[156967]=i[157016]=i[157017]=i[157018]=i[157019]=i[157020]=i[157021]=i[157022]=250;
		i[157023]=i[157024]=i[157025]=i[157026]=i[157027]=i[157080]=i[157081]=i[157082]=i[157083]=i[157084]=i[157085]=i[157086]=i[157087]=i[157088]=i[157089]=250;
		i[157090]=i[157091]=i[157144]=i[157145]=i[157146]=i[157147]=i[157148]=i[157149]=i[157150]=i[157151]=i[157156]=i[157157]=i[157158]=i[157159]=i[157204]=250;
		i[157205]=i[157206]=i[157207]=i[157212]=i[157213]=i[157214]=i[157215]=i[157216]=i[157217]=i[157218]=i[157219]=i[157276]=i[157277]=i[157278]=i[157279]=250;
		i[157340]=i[157341]=i[157342]=i[157343]=i[157396]=i[157397]=i[157398]=i[157399]=i[157408]=i[157409]=i[157410]=i[157411]=i[157468]=i[157469]=i[157470]=250;
		i[157471]=i[157520]=i[157521]=i[157522]=i[157523]=i[157528]=i[157529]=i[157530]=i[157531]=i[157540]=i[157541]=i[157542]=i[157543]=i[157588]=i[157589]=250;
		i[157590]=i[157591]=i[157596]=i[157597]=i[157598]=i[157599]=i[157600]=i[157601]=i[157602]=i[157603]=i[157656]=i[157657]=i[157658]=i[157659]=i[157660]=250;
		i[157661]=i[157662]=i[157663]=i[157664]=i[157665]=i[157666]=i[157667]=i[157724]=i[157725]=i[157726]=i[157727]=i[157844]=i[157845]=i[157846]=i[157847]=250;
		i[157988]=i[157989]=i[157990]=i[157991]=i[158108]=i[158109]=i[158110]=i[158111]=i[158228]=i[158229]=i[158230]=i[158231]=i[158420]=i[158421]=i[158422]=250;
		i[158423]=i[158492]=i[158493]=i[158494]=i[158495]=i[158744]=i[158745]=i[158746]=i[158747]=i[158868]=i[158869]=i[158870]=i[158871]=i[159012]=i[159013]=250;
		i[159014]=i[159015]=i[159136]=i[159137]=i[159138]=i[159139]=i[159252]=i[159253]=i[159254]=i[159255]=i[159324]=i[159325]=i[159326]=i[159327]=i[159388]=250;
		i[159389]=i[159390]=i[159391]=i[159444]=i[159445]=i[159446]=i[159447]=i[159516]=i[159517]=i[159518]=i[159519]=i[166616]=i[166617]=i[166618]=i[166619]=250;
		i[166620]=i[166621]=i[166622]=i[166623]=i[166744]=i[166745]=i[166746]=i[166747]=i[166748]=i[166749]=i[166750]=i[166751]=i[166868]=i[166869]=i[166870]=250;
		i[166871]=i[166872]=i[166873]=i[166874]=i[166875]=i[166876]=i[166877]=i[166878]=i[166879]=i[166880]=i[166881]=i[166882]=i[166883]=i[166884]=i[166885]=250;
		i[166886]=i[166887]=i[166888]=i[166889]=i[166890]=i[166891]=i[167640]=i[167641]=i[167642]=i[167643]=i[167772]=i[167773]=i[167774]=i[167775]=i[167956]=250;
		i[167957]=i[167958]=i[167959]=i[168024]=i[168025]=i[168026]=i[168027]=i[168028]=i[168029]=i[168030]=i[168031]=i[168032]=i[168033]=i[168034]=i[168035]=250;
		i[168040]=i[168041]=i[168042]=i[168043]=i[168080]=i[168081]=i[168082]=i[168083]=i[168100]=i[168101]=i[168102]=i[168103]=i[168148]=i[168149]=i[168150]=250;
		i[168151]=i[168152]=i[168153]=i[168154]=i[168155]=i[168156]=i[168157]=i[168158]=i[168159]=i[168160]=i[168161]=i[168162]=i[168163]=i[168220]=i[168221]=250;
		i[168222]=i[168223]=i[168276]=i[168277]=i[168278]=i[168279]=i[168280]=i[168281]=i[168282]=i[168283]=i[168284]=i[168285]=i[168286]=i[168287]=i[168288]=250;
		i[168289]=i[168290]=i[168291]=i[168348]=i[168349]=i[168350]=i[168351]=i[168400]=i[168401]=i[168402]=i[168403]=i[168424]=i[168425]=i[168426]=i[168427]=250;
		i[168464]=i[168465]=i[168466]=i[168467]=i[168484]=i[168485]=i[168486]=i[168487]=i[168540]=i[168541]=i[168542]=i[168543]=i[168592]=i[168593]=i[168594]=250;
		i[168595]=i[168596]=i[168597]=i[168598]=i[168599]=i[168600]=i[168601]=i[168602]=i[168603]=i[168604]=i[168605]=i[168606]=i[168607]=i[168608]=i[168609]=250;
		i[168610]=i[168611]=i[168612]=i[168613]=i[168614]=i[168615]=i[168664]=i[168665]=i[168666]=i[168667]=i[168736]=i[168737]=i[168738]=i[168739]=i[168796]=250;
		i[168797]=i[168798]=i[168799]=i[168980]=i[168981]=i[168982]=i[168983]=i[169044]=i[169045]=i[169046]=i[169047]=i[169060]=i[169061]=i[169062]=i[169063]=250;
		i[169104]=i[169105]=i[169106]=i[169107]=i[169120]=i[169121]=i[169122]=i[169123]=i[169168]=i[169169]=i[169170]=i[169171]=i[169188]=i[169189]=i[169190]=250;
		i[169191]=i[169244]=i[169245]=i[169246]=i[169247]=i[169296]=i[169297]=i[169298]=i[169299]=i[169316]=i[169317]=i[169318]=i[169319]=i[169372]=i[169373]=250;
		i[169374]=i[169375]=i[169424]=i[169425]=i[169426]=i[169427]=i[169448]=i[169449]=i[169450]=i[169451]=i[169492]=i[169493]=i[169494]=i[169495]=i[169504]=250;
		i[169505]=i[169506]=i[169507]=i[169564]=i[169565]=i[169566]=i[169567]=i[169620]=i[169621]=i[169622]=i[169623]=i[169688]=i[169689]=i[169690]=i[169691]=250;
		i[169760]=i[169761]=i[169762]=i[169763]=i[169820]=i[169821]=i[169822]=i[169823]=i[170004]=i[170005]=i[170006]=i[170007]=i[170064]=i[170065]=i[170066]=250;
		i[170067]=i[170076]=i[170077]=i[170078]=i[170079]=i[170080]=i[170081]=i[170082]=i[170083]=i[170088]=i[170089]=i[170090]=i[170091]=i[170128]=i[170129]=250;
		i[170130]=i[170131]=i[170144]=i[170145]=i[170146]=i[170147]=i[170212]=i[170213]=i[170214]=i[170215]=i[170268]=i[170269]=i[170270]=i[170271]=i[170320]=250;
		i[170321]=i[170322]=i[170323]=i[170340]=i[170341]=i[170342]=i[170343]=i[170392]=i[170393]=i[170394]=i[170395]=i[170400]=i[170401]=i[170402]=i[170403]=250;
		i[170444]=i[170445]=i[170446]=i[170447]=i[170452]=i[170453]=i[170454]=i[170455]=i[170468]=i[170469]=i[170470]=i[170471]=i[170476]=i[170477]=i[170478]=250;
		i[170479]=i[170516]=i[170517]=i[170518]=i[170519]=i[170524]=i[170525]=i[170526]=i[170527]=i[170588]=i[170589]=i[170590]=i[170591]=i[170648]=i[170649]=250;
		i[170650]=i[170651]=i[170712]=i[170713]=i[170714]=i[170715]=i[170780]=i[170781]=i[170782]=i[170783]=i[170844]=i[170845]=i[170846]=i[170847]=i[171028]=250;
		i[171029]=i[171030]=i[171031]=i[171032]=i[171033]=i[171034]=i[171035]=i[171036]=i[171037]=i[171038]=i[171039]=i[171040]=i[171041]=i[171042]=i[171043]=250;
		i[171088]=i[171089]=i[171090]=i[171091]=i[171112]=i[171113]=i[171114]=i[171115]=i[171152]=i[171153]=i[171154]=i[171155]=i[171164]=i[171165]=i[171166]=250;
		i[171167]=i[171228]=i[171229]=i[171230]=i[171231]=i[171232]=i[171233]=i[171234]=i[171235]=i[171292]=i[171293]=i[171294]=i[171295]=i[171344]=i[171345]=250;
		i[171346]=i[171347]=i[171364]=i[171365]=i[171366]=i[171367]=i[171416]=i[171417]=i[171418]=i[171419]=i[171424]=i[171425]=i[171426]=i[171427]=i[171468]=250;
		i[171469]=i[171470]=i[171471]=i[171476]=i[171477]=i[171478]=i[171479]=i[171492]=i[171493]=i[171494]=i[171495]=i[171500]=i[171501]=i[171502]=i[171503]=250;
		i[171544]=i[171545]=i[171546]=i[171547]=i[171548]=i[171549]=i[171550]=i[171551]=i[171612]=i[171613]=i[171614]=i[171615]=i[171672]=i[171673]=i[171674]=250;
		i[171675]=i[171736]=i[171737]=i[171738]=i[171739]=i[171804]=i[171805]=i[171806]=i[171807]=i[171868]=i[171869]=i[171870]=i[171871]=i[172052]=i[172053]=250;
		i[172054]=i[172055]=i[172068]=i[172069]=i[172070]=i[172071]=i[172112]=i[172113]=i[172114]=i[172115]=i[172136]=i[172137]=i[172138]=i[172139]=i[172176]=250;
		i[172177]=i[172178]=i[172179]=i[172180]=i[172181]=i[172182]=i[172183]=i[172184]=i[172185]=i[172186]=i[172187]=i[172188]=i[172189]=i[172190]=i[172191]=250;
		i[172192]=i[172193]=i[172194]=i[172195]=i[172244]=i[172245]=i[172246]=i[172247]=i[172248]=i[172249]=i[172250]=i[172251]=i[172316]=i[172317]=i[172318]=250;
		i[172319]=i[172368]=i[172369]=i[172370]=i[172371]=i[172388]=i[172389]=i[172390]=i[172391]=i[172436]=i[172437]=i[172438]=i[172439]=i[172452]=i[172453]=250;
		i[172454]=i[172455]=i[172492]=i[172493]=i[172494]=i[172495]=i[172504]=i[172505]=i[172506]=i[172507]=i[172512]=i[172513]=i[172514]=i[172515]=i[172524]=250;
		i[172525]=i[172526]=i[172527]=i[172568]=i[172569]=i[172570]=i[172571]=i[172572]=i[172573]=i[172574]=i[172575]=i[172632]=i[172633]=i[172634]=i[172635]=250;
		i[172640]=i[172641]=i[172642]=i[172643]=i[172700]=i[172701]=i[172702]=i[172703]=i[172760]=i[172761]=i[172762]=i[172763]=i[172828]=i[172829]=i[172830]=250;
		i[172831]=i[172892]=i[172893]=i[172894]=i[172895]=i[172948]=i[172949]=i[172950]=i[172951]=i[172964]=i[172965]=i[172966]=i[172967]=i[173076]=i[173077]=250;
		i[173078]=i[173079]=i[173092]=i[173093]=i[173094]=i[173095]=i[173136]=i[173137]=i[173138]=i[173139]=i[173160]=i[173161]=i[173162]=i[173163]=i[173200]=250;
		i[173201]=i[173202]=i[173203]=i[173220]=i[173221]=i[173222]=i[173223]=i[173264]=i[173265]=i[173266]=i[173267]=i[173340]=i[173341]=i[173342]=i[173343]=250;
		i[173392]=i[173393]=i[173394]=i[173395]=i[173412]=i[173413]=i[173414]=i[173415]=i[173460]=i[173461]=i[173462]=i[173463]=i[173476]=i[173477]=i[173478]=250;
		i[173479]=i[173516]=i[173517]=i[173518]=i[173519]=i[173528]=i[173529]=i[173530]=i[173531]=i[173536]=i[173537]=i[173538]=i[173539]=i[173548]=i[173549]=250;
		i[173550]=i[173551]=i[173588]=i[173589]=i[173590]=i[173591]=i[173596]=i[173597]=i[173598]=i[173599]=i[173652]=i[173653]=i[173654]=i[173655]=i[173668]=250;
		i[173669]=i[173670]=i[173671]=i[173724]=i[173725]=i[173726]=i[173727]=i[173784]=i[173785]=i[173786]=i[173787]=i[173852]=i[173853]=i[173854]=i[173855]=250;
		i[173916]=i[173917]=i[173918]=i[173919]=i[173976]=i[173977]=i[173978]=i[173979]=i[173984]=i[173985]=i[173986]=i[173987]=i[174100]=i[174101]=i[174102]=250;
		i[174103]=i[174116]=i[174117]=i[174118]=i[174119]=i[174164]=i[174165]=i[174166]=i[174167]=i[174180]=i[174181]=i[174182]=i[174183]=i[174224]=i[174225]=250;
		i[174226]=i[174227]=i[174244]=i[174245]=i[174246]=i[174247]=i[174288]=i[174289]=i[174290]=i[174291]=i[174308]=i[174309]=i[174310]=i[174311]=i[174364]=250;
		i[174365]=i[174366]=i[174367]=i[174416]=i[174417]=i[174418]=i[174419]=i[174436]=i[174437]=i[174438]=i[174439]=i[174480]=i[174481]=i[174482]=i[174483]=250;
		i[174504]=i[174505]=i[174506]=i[174507]=i[174536]=i[174537]=i[174538]=i[174539]=i[174552]=i[174553]=i[174554]=i[174555]=i[174560]=i[174561]=i[174562]=250;
		i[174563]=i[174576]=i[174577]=i[174578]=i[174579]=i[174612]=i[174613]=i[174614]=i[174615]=i[174624]=i[174625]=i[174626]=i[174627]=i[174676]=i[174677]=250;
		i[174678]=i[174679]=i[174692]=i[174693]=i[174694]=i[174695]=i[174752]=i[174753]=i[174754]=i[174755]=i[174808]=i[174809]=i[174810]=i[174811]=i[174872]=250;
		i[174873]=i[174874]=i[174875]=i[174940]=i[174941]=i[174942]=i[174943]=i[175000]=i[175001]=i[175002]=i[175003]=i[175008]=i[175009]=i[175010]=i[175011]=250;
		i[175124]=i[175125]=i[175126]=i[175127]=i[175128]=i[175129]=i[175130]=i[175131]=i[175132]=i[175133]=i[175134]=i[175135]=i[175136]=i[175137]=i[175138]=250;
		i[175139]=i[175192]=i[175193]=i[175194]=i[175195]=i[175196]=i[175197]=i[175198]=i[175199]=i[175200]=i[175201]=i[175202]=i[175203]=i[175248]=i[175249]=250;
		i[175250]=i[175251]=i[175252]=i[175253]=i[175254]=i[175255]=i[175256]=i[175257]=i[175258]=i[175259]=i[175260]=i[175261]=i[175262]=i[175263]=i[175264]=250;
		i[175265]=i[175266]=i[175267]=i[175316]=i[175317]=i[175318]=i[175319]=i[175320]=i[175321]=i[175322]=i[175323]=i[175324]=i[175325]=i[175326]=i[175327]=250;
		i[175328]=i[175329]=i[175330]=i[175331]=i[175380]=i[175381]=i[175382]=i[175383]=i[175384]=i[175385]=i[175386]=i[175387]=i[175388]=i[175389]=i[175390]=250;
		i[175391]=i[175392]=i[175393]=i[175394]=i[175395]=i[175396]=i[175397]=i[175398]=i[175399]=i[175440]=i[175441]=i[175442]=i[175443]=i[175460]=i[175461]=250;
		i[175462]=i[175463]=i[175504]=i[175505]=i[175506]=i[175507]=i[175528]=i[175529]=i[175530]=i[175531]=i[175560]=i[175561]=i[175562]=i[175563]=i[175580]=250;
		i[175581]=i[175582]=i[175583]=i[175600]=i[175601]=i[175602]=i[175603]=i[175632]=i[175633]=i[175634]=i[175635]=i[175652]=i[175653]=i[175654]=i[175655]=250;
		i[175696]=i[175697]=i[175698]=i[175699]=i[175720]=i[175721]=i[175722]=i[175723]=i[175764]=i[175765]=i[175766]=i[175767]=i[175768]=i[175769]=i[175770]=250;
		i[175771]=i[175772]=i[175773]=i[175774]=i[175775]=i[175776]=i[175777]=i[175778]=i[175779]=i[175780]=i[175781]=i[175782]=i[175783]=i[175832]=i[175833]=250;
		i[175834]=i[175835]=i[175836]=i[175837]=i[175838]=i[175839]=i[175896]=i[175897]=i[175898]=i[175899]=i[175960]=i[175961]=i[175962]=i[175963]=i[175964]=250;
		i[175965]=i[175966]=i[175967]=i[176028]=i[176029]=i[176030]=i[176031]=i[182288]=i[182289]=i[182290]=i[182291]=i[182292]=i[182293]=i[182294]=i[182295]=250;
		i[182296]=i[182297]=i[182298]=i[182299]=i[182300]=i[182301]=i[182302]=i[182303]=i[182304]=i[182305]=i[182306]=i[182307]=i[182308]=i[182309]=i[182310]=250;
		i[182311]=i[183308]=i[183309]=i[183310]=i[183311]=i[183336]=i[183337]=i[183338]=i[183339]=i[183340]=i[183341]=i[183342]=i[183343]=i[184328]=i[184329]=250;
		i[184330]=i[184331]=i[184340]=i[184341]=i[184342]=i[184343]=i[184344]=i[184345]=i[184346]=i[184347]=i[184352]=i[184353]=i[184354]=i[184355]=i[184356]=250;
		i[184357]=i[184358]=i[184359]=i[184400]=i[184401]=i[184402]=i[184403]=i[184424]=i[184425]=i[184426]=i[184427]=i[184464]=i[184465]=i[184466]=i[184467]=250;
		i[184468]=i[184469]=i[184470]=i[184471]=i[184472]=i[184473]=i[184474]=i[184475]=i[184476]=i[184477]=i[184478]=i[184479]=i[184480]=i[184481]=i[184482]=250;
		i[184483]=i[184536]=i[184537]=i[184538]=i[184539]=i[184540]=i[184541]=i[184542]=i[184543]=i[184544]=i[184545]=i[184546]=i[184547]=i[184592]=i[184593]=250;
		i[184594]=i[184595]=i[184596]=i[184597]=i[184598]=i[184599]=i[184600]=i[184601]=i[184602]=i[184603]=i[184604]=i[184605]=i[184606]=i[184607]=i[184660]=250;
		i[184661]=i[184662]=i[184663]=i[184664]=i[184665]=i[184666]=i[184667]=i[184668]=i[184669]=i[184670]=i[184671]=i[184672]=i[184673]=i[184674]=i[184675]=250;
		i[184676]=i[184677]=i[184678]=i[184679]=i[184724]=i[184725]=i[184726]=i[184727]=i[184792]=i[184793]=i[184794]=i[184795]=i[184796]=i[184797]=i[184798]=250;
		i[184799]=i[184800]=i[184801]=i[184802]=i[184803]=i[184848]=i[184849]=i[184850]=i[184851]=i[184868]=i[184869]=i[184870]=i[184871]=i[184924]=i[184925]=250;
		i[184926]=i[184927]=i[184984]=i[184985]=i[184986]=i[184987]=i[184988]=i[184989]=i[184990]=i[184991]=i[185040]=i[185041]=i[185042]=i[185043]=i[185060]=250;
		i[185061]=i[185062]=i[185063]=i[185108]=i[185109]=i[185110]=i[185111]=i[185112]=i[185113]=i[185114]=i[185115]=i[185116]=i[185117]=i[185118]=i[185119]=250;
		i[185120]=i[185121]=i[185122]=i[185123]=i[185124]=i[185125]=i[185126]=i[185127]=i[185168]=i[185169]=i[185170]=i[185171]=i[185180]=i[185181]=i[185182]=250;
		i[185183]=i[185192]=i[185193]=i[185194]=i[185195]=i[185232]=i[185233]=i[185234]=i[185235]=i[185252]=i[185253]=i[185254]=i[185255]=i[185304]=i[185305]=250;
		i[185306]=i[185307]=i[185308]=i[185309]=i[185310]=i[185311]=i[185312]=i[185313]=i[185314]=i[185315]=i[185352]=i[185353]=i[185354]=i[185355]=i[185360]=250;
		i[185361]=i[185362]=i[185363]=i[185372]=i[185373]=i[185374]=i[185375]=i[185376]=i[185377]=i[185378]=i[185379]=i[185384]=i[185385]=i[185386]=i[185387]=250;
		i[185424]=i[185425]=i[185426]=i[185427]=i[185448]=i[185449]=i[185450]=i[185451]=i[185488]=i[185489]=i[185490]=i[185491]=i[185508]=i[185509]=i[185510]=250;
		i[185511]=i[185556]=i[185557]=i[185558]=i[185559]=i[185572]=i[185573]=i[185574]=i[185575]=i[185616]=i[185617]=i[185618]=i[185619]=i[185632]=i[185633]=250;
		i[185634]=i[185635]=i[185684]=i[185685]=i[185686]=i[185687]=i[185748]=i[185749]=i[185750]=i[185751]=i[185812]=i[185813]=i[185814]=i[185815]=i[185828]=250;
		i[185829]=i[185830]=i[185831]=i[185872]=i[185873]=i[185874]=i[185875]=i[185892]=i[185893]=i[185894]=i[185895]=i[185948]=i[185949]=i[185950]=i[185951]=250;
		i[186004]=i[186005]=i[186006]=i[186007]=i[186016]=i[186017]=i[186018]=i[186019]=i[186064]=i[186065]=i[186066]=i[186067]=i[186080]=i[186081]=i[186082]=250;
		i[186083]=i[186132]=i[186133]=i[186134]=i[186135]=i[186192]=i[186193]=i[186194]=i[186195]=i[186204]=i[186205]=i[186206]=i[186207]=i[186216]=i[186217]=250;
		i[186218]=i[186219]=i[186256]=i[186257]=i[186258]=i[186259]=i[186272]=i[186273]=i[186274]=i[186275]=i[186276]=i[186277]=i[186278]=i[186279]=i[186324]=250;
		i[186325]=i[186326]=i[186327]=i[186340]=i[186341]=i[186342]=i[186343]=i[186376]=i[186377]=i[186378]=i[186379]=i[186384]=i[186385]=i[186386]=i[186387]=250;
		i[186400]=i[186401]=i[186402]=i[186403]=i[186412]=i[186413]=i[186414]=i[186415]=i[186452]=i[186453]=i[186454]=i[186455]=i[186456]=i[186457]=i[186458]=250;
		i[186459]=i[186460]=i[186461]=i[186462]=i[186463]=i[186464]=i[186465]=i[186466]=i[186467]=i[186468]=i[186469]=i[186470]=i[186471]=i[186512]=i[186513]=250;
		i[186514]=i[186515]=i[186532]=i[186533]=i[186534]=i[186535]=i[186576]=i[186577]=i[186578]=i[186579]=i[186640]=i[186641]=i[186642]=i[186643]=i[186660]=250;
		i[186661]=i[186662]=i[186663]=i[186708]=i[186709]=i[186710]=i[186711]=i[186772]=i[186773]=i[186774]=i[186775]=i[186832]=i[186833]=i[186834]=i[186835]=250;
		i[186856]=i[186857]=i[186858]=i[186859]=i[186896]=i[186897]=i[186898]=i[186899]=i[186916]=i[186917]=i[186918]=i[186919]=i[186972]=i[186973]=i[186974]=250;
		i[186975]=i[187028]=i[187029]=i[187030]=i[187031]=i[187040]=i[187041]=i[187042]=i[187043]=i[187088]=i[187089]=i[187090]=i[187091]=i[187104]=i[187105]=250;
		i[187106]=i[187107]=i[187156]=i[187157]=i[187158]=i[187159]=i[187216]=i[187217]=i[187218]=i[187219]=i[187224]=i[187225]=i[187226]=i[187227]=i[187232]=250;
		i[187233]=i[187234]=i[187235]=i[187240]=i[187241]=i[187242]=i[187243]=i[187280]=i[187281]=i[187282]=i[187283]=i[187292]=i[187293]=i[187294]=i[187295]=250;
		i[187300]=i[187301]=i[187302]=i[187303]=i[187344]=i[187345]=i[187346]=i[187347]=i[187368]=i[187369]=i[187370]=i[187371]=i[187400]=i[187401]=i[187402]=250;
		i[187403]=i[187408]=i[187409]=i[187410]=i[187411]=i[187424]=i[187425]=i[187426]=i[187427]=i[187436]=i[187437]=i[187438]=i[187439]=i[187476]=i[187477]=250;
		i[187478]=i[187479]=i[187492]=i[187493]=i[187494]=i[187495]=i[187536]=i[187537]=i[187538]=i[187539]=i[187556]=i[187557]=i[187558]=i[187559]=i[187600]=250;
		i[187601]=i[187602]=i[187603]=i[187664]=i[187665]=i[187666]=i[187667]=i[187684]=i[187685]=i[187686]=i[187687]=i[187732]=i[187733]=i[187734]=i[187735]=250;
		i[187796]=i[187797]=i[187798]=i[187799]=i[187856]=i[187857]=i[187858]=i[187859]=i[187872]=i[187873]=i[187874]=i[187875]=i[187876]=i[187877]=i[187878]=250;
		i[187879]=i[187880]=i[187881]=i[187882]=i[187883]=i[187920]=i[187921]=i[187922]=i[187923]=i[187940]=i[187941]=i[187942]=i[187943]=i[187996]=i[187997]=250;
		i[187998]=i[187999]=i[188064]=i[188065]=i[188066]=i[188067]=i[188112]=i[188113]=i[188114]=i[188115]=i[188116]=i[188117]=i[188118]=i[188119]=i[188124]=250;
		i[188125]=i[188126]=i[188127]=i[188180]=i[188181]=i[188182]=i[188183]=i[188240]=i[188241]=i[188242]=i[188243]=i[188248]=i[188249]=i[188250]=i[188251]=250;
		i[188256]=i[188257]=i[188258]=i[188259]=i[188264]=i[188265]=i[188266]=i[188267]=i[188304]=i[188305]=i[188306]=i[188307]=i[188316]=i[188317]=i[188318]=250;
		i[188319]=i[188324]=i[188325]=i[188326]=i[188327]=i[188368]=i[188369]=i[188370]=i[188371]=i[188392]=i[188393]=i[188394]=i[188395]=i[188424]=i[188425]=250;
		i[188426]=i[188427]=i[188436]=i[188437]=i[188438]=i[188439]=i[188448]=i[188449]=i[188450]=i[188451]=i[188452]=i[188453]=i[188454]=i[188455]=i[188460]=250;
		i[188461]=i[188462]=i[188463]=i[188504]=i[188505]=i[188506]=i[188507]=i[188512]=i[188513]=i[188514]=i[188515]=i[188560]=i[188561]=i[188562]=i[188563]=250;
		i[188564]=i[188565]=i[188566]=i[188567]=i[188568]=i[188569]=i[188570]=i[188571]=i[188572]=i[188573]=i[188574]=i[188575]=i[188576]=i[188577]=i[188578]=250;
		i[188579]=i[188624]=i[188625]=i[188626]=i[188627]=i[188688]=i[188689]=i[188690]=i[188691]=i[188708]=i[188709]=i[188710]=i[188711]=i[188756]=i[188757]=250;
		i[188758]=i[188759]=i[188760]=i[188761]=i[188762]=i[188763]=i[188764]=i[188765]=i[188766]=i[188767]=i[188768]=i[188769]=i[188770]=i[188771]=i[188772]=250;
		i[188773]=i[188774]=i[188775]=i[188820]=i[188821]=i[188822]=i[188823]=i[188824]=i[188825]=i[188826]=i[188827]=i[188828]=i[188829]=i[188830]=i[188831]=250;
		i[188832]=i[188833]=i[188834]=i[188835]=i[188880]=i[188881]=i[188882]=i[188883]=i[188944]=i[188945]=i[188946]=i[188947]=i[188948]=i[188949]=i[188950]=250;
		i[188951]=i[188952]=i[188953]=i[188954]=i[188955]=i[188956]=i[188957]=i[188958]=i[188959]=i[188960]=i[188961]=i[188962]=i[188963]=i[188964]=i[188965]=250;
		i[188966]=i[188967]=i[189020]=i[189021]=i[189022]=i[189023]=i[189088]=i[189089]=i[189090]=i[189091]=i[189136]=i[189137]=i[189138]=i[189139]=i[189144]=250;
		i[189145]=i[189146]=i[189147]=i[189148]=i[189149]=i[189150]=i[189151]=i[189204]=i[189205]=i[189206]=i[189207]=i[189264]=i[189265]=i[189266]=i[189267]=250;
		i[189272]=i[189273]=i[189274]=i[189275]=i[189280]=i[189281]=i[189282]=i[189283]=i[189288]=i[189289]=i[189290]=i[189291]=i[189328]=i[189329]=i[189330]=250;
		i[189331]=i[189336]=i[189337]=i[189338]=i[189339]=i[189348]=i[189349]=i[189350]=i[189351]=i[189392]=i[189393]=i[189394]=i[189395]=i[189416]=i[189417]=250;
		i[189418]=i[189419]=i[189452]=i[189453]=i[189454]=i[189455]=i[189464]=i[189465]=i[189466]=i[189467]=i[189468]=i[189469]=i[189470]=i[189471]=i[189476]=250;
		i[189477]=i[189478]=i[189479]=i[189484]=i[189485]=i[189486]=i[189487]=i[189528]=i[189529]=i[189530]=i[189531]=i[189536]=i[189537]=i[189538]=i[189539]=250;
		i[189584]=i[189585]=i[189586]=i[189587]=i[189604]=i[189605]=i[189606]=i[189607]=i[189648]=i[189649]=i[189650]=i[189651]=i[189712]=i[189713]=i[189714]=250;
		i[189715]=i[189732]=i[189733]=i[189734]=i[189735]=i[189780]=i[189781]=i[189782]=i[189783]=i[189844]=i[189845]=i[189846]=i[189847]=i[189904]=i[189905]=250;
		i[189906]=i[189907]=i[189968]=i[189969]=i[189970]=i[189971]=i[189988]=i[189989]=i[189990]=i[189991]=i[190044]=i[190045]=i[190046]=i[190047]=i[190112]=250;
		i[190113]=i[190114]=i[190115]=i[190160]=i[190161]=i[190162]=i[190163]=i[190172]=i[190173]=i[190174]=i[190175]=i[190228]=i[190229]=i[190230]=i[190231]=250;
		i[190288]=i[190289]=i[190290]=i[190291]=i[190292]=i[190293]=i[190294]=i[190295]=i[190308]=i[190309]=i[190310]=i[190311]=i[190312]=i[190313]=i[190314]=250;
		i[190315]=i[190352]=i[190353]=i[190354]=i[190355]=i[190360]=i[190361]=i[190362]=i[190363]=i[190372]=i[190373]=i[190374]=i[190375]=i[190416]=i[190417]=250;
		i[190418]=i[190419]=i[190440]=i[190441]=i[190442]=i[190443]=i[190480]=i[190481]=i[190482]=i[190483]=i[190504]=i[190505]=i[190506]=i[190507]=i[190552]=250;
		i[190553]=i[190554]=i[190555]=i[190560]=i[190561]=i[190562]=i[190563]=i[190608]=i[190609]=i[190610]=i[190611]=i[190628]=i[190629]=i[190630]=i[190631]=250;
		i[190676]=i[190677]=i[190678]=i[190679]=i[190692]=i[190693]=i[190694]=i[190695]=i[190736]=i[190737]=i[190738]=i[190739]=i[190752]=i[190753]=i[190754]=250;
		i[190755]=i[190804]=i[190805]=i[190806]=i[190807]=i[190868]=i[190869]=i[190870]=i[190871]=i[190932]=i[190933]=i[190934]=i[190935]=i[190948]=i[190949]=250;
		i[190950]=i[190951]=i[190992]=i[190993]=i[190994]=i[190995]=i[191012]=i[191013]=i[191014]=i[191015]=i[191068]=i[191069]=i[191070]=i[191071]=i[191136]=250;
		i[191137]=i[191138]=i[191139]=i[191184]=i[191185]=i[191186]=i[191187]=i[191200]=i[191201]=i[191202]=i[191203]=i[191252]=i[191253]=i[191254]=i[191255]=250;
		i[191312]=i[191313]=i[191314]=i[191315]=i[191316]=i[191317]=i[191318]=i[191319]=i[191332]=i[191333]=i[191334]=i[191335]=i[191336]=i[191337]=i[191338]=250;
		i[191339]=i[191376]=i[191377]=i[191378]=i[191379]=i[191380]=i[191381]=i[191382]=i[191383]=i[191396]=i[191397]=i[191398]=i[191399]=i[191444]=i[191445]=250;
		i[191446]=i[191447]=i[191460]=i[191461]=i[191462]=i[191463]=i[191508]=i[191509]=i[191510]=i[191511]=i[191512]=i[191513]=i[191514]=i[191515]=i[191516]=250;
		i[191517]=i[191518]=i[191519]=i[191520]=i[191521]=i[191522]=i[191523]=i[191524]=i[191525]=i[191526]=i[191527]=i[191580]=i[191581]=i[191582]=i[191583]=250;
		i[191632]=i[191633]=i[191634]=i[191635]=i[191636]=i[191637]=i[191638]=i[191639]=i[191640]=i[191641]=i[191642]=i[191643]=i[191644]=i[191645]=i[191646]=250;
		i[191647]=i[191648]=i[191649]=i[191650]=i[191651]=i[191704]=i[191705]=i[191706]=i[191707]=i[191708]=i[191709]=i[191710]=i[191711]=i[191712]=i[191713]=250;
		i[191714]=i[191715]=i[191760]=i[191761]=i[191762]=i[191763]=i[191764]=i[191765]=i[191766]=i[191767]=i[191768]=i[191769]=i[191770]=i[191771]=i[191772]=250;
		i[191773]=i[191774]=i[191775]=i[191828]=i[191829]=i[191830]=i[191831]=i[191832]=i[191833]=i[191834]=i[191835]=i[191836]=i[191837]=i[191838]=i[191839]=250;
		i[191840]=i[191841]=i[191842]=i[191843]=i[191844]=i[191845]=i[191846]=i[191847]=i[191892]=i[191893]=i[191894]=i[191895]=i[191896]=i[191897]=i[191898]=250;
		i[191899]=i[191900]=i[191901]=i[191902]=i[191903]=i[191904]=i[191905]=i[191906]=i[191907]=i[191908]=i[191909]=i[191910]=i[191911]=i[191960]=i[191961]=250;
		i[191962]=i[191963]=i[191964]=i[191965]=i[191966]=i[191967]=i[191968]=i[191969]=i[191970]=i[191971]=i[192016]=i[192017]=i[192018]=i[192019]=i[192036]=250;
		i[192037]=i[192038]=i[192039]=i[192092]=i[192093]=i[192094]=i[192095]=i[192160]=i[192161]=i[192162]=i[192163]=i[192208]=i[192209]=i[192210]=i[192211]=250;
		i[192228]=i[192229]=i[192230]=i[192231]=i[192276]=i[192277]=i[192278]=i[192279]=i[192336]=i[192337]=i[192338]=i[192339]=i[192360]=i[192361]=i[192362]=250;
		i[192363]=i[192400]=i[192401]=i[192402]=i[192403]=i[192420]=i[192421]=i[192422]=i[192423]=i[192472]=i[192473]=i[192474]=i[192475]=i[192476]=i[192477]=250;
		i[192478]=i[192479]=i[192480]=i[192481]=i[192482]=i[192483]=i[199384]=i[199385]=i[199386]=i[199387]=i[200408]=i[200409]=i[200410]=i[200411]=i[200728]=250;
		i[200729]=i[200730]=i[200731]=i[200732]=i[200733]=i[200734]=i[200735]=i[200736]=i[200737]=i[200738]=i[200739]=i[200796]=i[200797]=i[200798]=i[200799]=250;
		i[200852]=i[200853]=i[200854]=i[200855]=i[200856]=i[200857]=i[200858]=i[200859]=i[200860]=i[200861]=i[200862]=i[200863]=i[200864]=i[200865]=i[200866]=250;
		i[200867]=i[200868]=i[200869]=i[200870]=i[200871]=i[200920]=i[200921]=i[200922]=i[200923]=i[200924]=i[200925]=i[200926]=i[200927]=i[200928]=i[200929]=250;
		i[200930]=i[200931]=i[200992]=i[200993]=i[200994]=i[200995]=i[201048]=i[201049]=i[201050]=i[201051]=i[201052]=i[201053]=i[201054]=i[201055]=i[201056]=250;
		i[201057]=i[201058]=i[201059]=i[201112]=i[201113]=i[201114]=i[201115]=i[201116]=i[201117]=i[201118]=i[201119]=i[201120]=i[201121]=i[201122]=i[201123]=250;
		i[201176]=i[201177]=i[201178]=i[201179]=i[201240]=i[201241]=i[201242]=i[201243]=i[201244]=i[201245]=i[201246]=i[201247]=i[201248]=i[201249]=i[201250]=250;
		i[201251]=i[201304]=i[201305]=i[201306]=i[201307]=i[201308]=i[201309]=i[201310]=i[201311]=i[201312]=i[201313]=i[201314]=i[201315]=i[201368]=i[201369]=250;
		i[201370]=i[201371]=i[201432]=i[201433]=i[201434]=i[201435]=i[201692]=i[201693]=i[201694]=i[201695]=i[201748]=i[201749]=i[201750]=i[201751]=i[201764]=250;
		i[201765]=i[201766]=i[201767]=i[201820]=i[201821]=i[201822]=i[201823]=i[201880]=i[201881]=i[201882]=i[201883]=i[201940]=i[201941]=i[201942]=i[201943]=250;
		i[201956]=i[201957]=i[201958]=i[201959]=i[202016]=i[202017]=i[202018]=i[202019]=i[202068]=i[202069]=i[202070]=i[202071]=i[202084]=i[202085]=i[202086]=250;
		i[202087]=i[202132]=i[202133]=i[202134]=i[202135]=i[202148]=i[202149]=i[202150]=i[202151]=i[202200]=i[202201]=i[202202]=i[202203]=i[202260]=i[202261]=250;
		i[202262]=i[202263]=i[202276]=i[202277]=i[202278]=i[202279]=i[202324]=i[202325]=i[202326]=i[202327]=i[202340]=i[202341]=i[202342]=i[202343]=i[202532]=250;
		i[202533]=i[202534]=i[202535]=i[202644]=i[202645]=i[202646]=i[202647]=i[202772]=i[202773]=i[202774]=i[202775]=i[202788]=i[202789]=i[202790]=i[202791]=250;
		i[202844]=i[202845]=i[202846]=i[202847]=i[202908]=i[202909]=i[202910]=i[202911]=i[202980]=i[202981]=i[202982]=i[202983]=i[203028]=i[203029]=i[203030]=250;
		i[203031]=i[203032]=i[203033]=i[203034]=i[203035]=i[203036]=i[203037]=i[203038]=i[203039]=i[203040]=i[203041]=i[203042]=i[203043]=i[203044]=i[203045]=250;
		i[203046]=i[203047]=i[203108]=i[203109]=i[203110]=i[203111]=i[203156]=i[203157]=i[203158]=i[203159]=i[203172]=i[203173]=i[203174]=i[203175]=i[203224]=250;
		i[203225]=i[203226]=i[203227]=i[203284]=i[203285]=i[203286]=i[203287]=i[203300]=i[203301]=i[203302]=i[203303]=i[203364]=i[203365]=i[203366]=i[203367]=250;
		i[203544]=i[203545]=i[203546]=i[203547]=i[203548]=i[203549]=i[203550]=i[203551]=i[203552]=i[203553]=i[203554]=i[203555]=i[203604]=i[203605]=i[203606]=250;
		i[203607]=i[203608]=i[203609]=i[203610]=i[203611]=i[203612]=i[203613]=i[203614]=i[203615]=i[203616]=i[203617]=i[203618]=i[203619]=i[203620]=i[203621]=250;
		i[203622]=i[203623]=i[203672]=i[203673]=i[203674]=i[203675]=i[203676]=i[203677]=i[203678]=i[203679]=i[203680]=i[203681]=i[203682]=i[203683]=i[203740]=250;
		i[203741]=i[203742]=i[203743]=i[203796]=i[203797]=i[203798]=i[203799]=i[203812]=i[203813]=i[203814]=i[203815]=i[203868]=i[203869]=i[203870]=i[203871]=250;
		i[203936]=i[203937]=i[203938]=i[203939]=i[204004]=i[204005]=i[204006]=i[204007]=i[204052]=i[204053]=i[204054]=i[204055]=i[204064]=i[204065]=i[204066]=250;
		i[204067]=i[204132]=i[204133]=i[204134]=i[204135]=i[204180]=i[204181]=i[204182]=i[204183]=i[204196]=i[204197]=i[204198]=i[204199]=i[204252]=i[204253]=250;
		i[204254]=i[204255]=i[204308]=i[204309]=i[204310]=i[204311]=i[204324]=i[204325]=i[204326]=i[204327]=i[204376]=i[204377]=i[204378]=i[204379]=i[204380]=250;
		i[204381]=i[204382]=i[204383]=i[204384]=i[204385]=i[204386]=i[204387]=i[204388]=i[204389]=i[204390]=i[204391]=i[204564]=i[204565]=i[204566]=i[204567]=250;
		i[204708]=i[204709]=i[204710]=i[204711]=i[204764]=i[204765]=i[204766]=i[204767]=i[204820]=i[204821]=i[204822]=i[204823]=i[204836]=i[204837]=i[204838]=250;
		i[204839]=i[204892]=i[204893]=i[204894]=i[204895]=i[204964]=i[204965]=i[204966]=i[204967]=i[205020]=i[205021]=i[205022]=i[205023]=i[205024]=i[205025]=250;
		i[205026]=i[205027]=i[205080]=i[205081]=i[205082]=i[205083]=i[205088]=i[205089]=i[205090]=i[205091]=i[205140]=i[205141]=i[205142]=i[205143]=i[205144]=250;
		i[205145]=i[205146]=i[205147]=i[205148]=i[205149]=i[205150]=i[205151]=i[205152]=i[205153]=i[205154]=i[205155]=i[205204]=i[205205]=i[205206]=i[205207]=250;
		i[205208]=i[205209]=i[205210]=i[205211]=i[205212]=i[205213]=i[205214]=i[205215]=i[205216]=i[205217]=i[205218]=i[205219]=i[205276]=i[205277]=i[205278]=250;
		i[205279]=i[205336]=i[205337]=i[205338]=i[205339]=i[205340]=i[205341]=i[205342]=i[205343]=i[205344]=i[205345]=i[205346]=i[205347]=i[205396]=i[205397]=250;
		i[205398]=i[205399]=i[205412]=i[205413]=i[205414]=i[205415]=i[205592]=i[205593]=i[205594]=i[205595]=i[205596]=i[205597]=i[205598]=i[205599]=i[205600]=250;
		i[205601]=i[205602]=i[205603]=i[205652]=i[205653]=i[205654]=i[205655]=i[205656]=i[205657]=i[205658]=i[205659]=i[205660]=i[205661]=i[205662]=i[205663]=250;
		i[205664]=i[205665]=i[205666]=i[205667]=i[205668]=i[205669]=i[205670]=i[205671]=i[205720]=i[205721]=i[205722]=i[205723]=i[205724]=i[205725]=i[205726]=250;
		i[205727]=i[205728]=i[205729]=i[205730]=i[205731]=i[205792]=i[205793]=i[205794]=i[205795]=i[205844]=i[205845]=i[205846]=i[205847]=i[205860]=i[205861]=250;
		i[205862]=i[205863]=i[205908]=i[205909]=i[205910]=i[205911]=i[205916]=i[205917]=i[205918]=i[205919]=i[205988]=i[205989]=i[205990]=i[205991]=i[206052]=250;
		i[206053]=i[206054]=i[206055]=i[206104]=i[206105]=i[206106]=i[206107]=i[206112]=i[206113]=i[206114]=i[206115]=i[206164]=i[206165]=i[206166]=i[206167]=250;
		i[206228]=i[206229]=i[206230]=i[206231]=i[206304]=i[206305]=i[206306]=i[206307]=i[206356]=i[206357]=i[206358]=i[206359]=i[206372]=i[206373]=i[206374]=250;
		i[206375]=i[206420]=i[206421]=i[206422]=i[206423]=i[206436]=i[206437]=i[206438]=i[206439]=i[206488]=i[206489]=i[206490]=i[206491]=i[206552]=i[206553]=250;
		i[206554]=i[206555]=i[206628]=i[206629]=i[206630]=i[206631]=i[206740]=i[206741]=i[206742]=i[206743]=i[206820]=i[206821]=i[206822]=i[206823]=i[206868]=250;
		i[206869]=i[206870]=i[206871]=i[206884]=i[206885]=i[206886]=i[206887]=i[206936]=i[206937]=i[206938]=i[206939]=i[206940]=i[206941]=i[206942]=i[206943]=250;
		i[206996]=i[206997]=i[206998]=i[206999]=i[207012]=i[207013]=i[207014]=i[207015]=i[207060]=i[207061]=i[207062]=i[207063]=i[207076]=i[207077]=i[207078]=250;
		i[207079]=i[207132]=i[207133]=i[207134]=i[207135]=i[207136]=i[207137]=i[207138]=i[207139]=i[207192]=i[207193]=i[207194]=i[207195]=i[207252]=i[207253]=250;
		i[207254]=i[207255]=i[207268]=i[207269]=i[207270]=i[207271]=i[207328]=i[207329]=i[207330]=i[207331]=i[207380]=i[207381]=i[207382]=i[207383]=i[207396]=250;
		i[207397]=i[207398]=i[207399]=i[207444]=i[207445]=i[207446]=i[207447]=i[207460]=i[207461]=i[207462]=i[207463]=i[207828]=i[207829]=i[207830]=i[207831]=250;
		i[207844]=i[207845]=i[207846]=i[207847]=i[207896]=i[207897]=i[207898]=i[207899]=i[207900]=i[207901]=i[207902]=i[207903]=i[207904]=i[207905]=i[207906]=250;
		i[207907]=i[207964]=i[207965]=i[207966]=i[207967]=i[208024]=i[208025]=i[208026]=i[208027]=i[208028]=i[208029]=i[208030]=i[208031]=i[208032]=i[208033]=250;
		i[208034]=i[208035]=i[208088]=i[208089]=i[208090]=i[208091]=i[208092]=i[208093]=i[208094]=i[208095]=i[208096]=i[208097]=i[208098]=i[208099]=i[208160]=250;
		i[208161]=i[208162]=i[208163]=i[208216]=i[208217]=i[208218]=i[208219]=i[208220]=i[208221]=i[208222]=i[208223]=i[208224]=i[208225]=i[208226]=i[208227]=250;
		i[208228]=i[208229]=i[208230]=i[208231]=i[208280]=i[208281]=i[208282]=i[208283]=i[208284]=i[208285]=i[208286]=i[208287]=i[208288]=i[208289]=i[208290]=250;
		i[208291]=i[208340]=i[208341]=i[208342]=i[208343]=i[208344]=i[208345]=i[208346]=i[208347]=i[208348]=i[208349]=i[208350]=i[208351]=i[208352]=i[208353]=250;
		i[208354]=i[208355]=i[208356]=i[208357]=i[208358]=i[208359]=i[208408]=i[208409]=i[208410]=i[208411]=i[208412]=i[208413]=i[208414]=i[208415]=i[208416]=250;
		i[208417]=i[208418]=i[208419]=i[208472]=i[208473]=i[208474]=i[208475]=i[208476]=i[208477]=i[208478]=i[208479]=i[208480]=i[208481]=i[208482]=i[208483]=250;
		i[208856]=i[208857]=i[208858]=i[208859]=i[208860]=i[208861]=i[208862]=i[208863]=i[208864]=i[208865]=i[208866]=i[208867]=i[215584]=i[215585]=i[215586]=250;
		i[215587]=i[215640]=i[215641]=i[215642]=i[215643]=i[215836]=i[215837]=i[215838]=i[215839]=i[216348]=i[216349]=i[216350]=i[216351]=i[216604]=i[216605]=250;
		i[216606]=i[216607]=i[216668]=i[216669]=i[216670]=i[216671]=i[216860]=i[216861]=i[216862]=i[216863]=i[217180]=i[217181]=i[217182]=i[217183]=i[217300]=250;
		i[217301]=i[217302]=i[217303]=i[217308]=i[217309]=i[217310]=i[217311]=i[217368]=i[217369]=i[217370]=i[217371]=i[217372]=i[217373]=i[217374]=i[217375]=250;
		i[217376]=i[217377]=i[217378]=i[217379]=i[217428]=i[217429]=i[217430]=i[217431]=i[217444]=i[217445]=i[217446]=i[217447]=i[217448]=i[217449]=i[217450]=250;
		i[217451]=i[217492]=i[217493]=i[217494]=i[217495]=i[217496]=i[217497]=i[217498]=i[217499]=i[217500]=i[217501]=i[217502]=i[217503]=i[217508]=i[217509]=250;
		i[217510]=i[217511]=i[217624]=i[217625]=i[217626]=i[217627]=i[217696]=i[217697]=i[217698]=i[217699]=i[217884]=i[217885]=i[217886]=i[217887]=i[218012]=250;
		i[218013]=i[218014]=i[218015]=i[218072]=i[218073]=i[218074]=i[218075]=i[218324]=i[218325]=i[218326]=i[218327]=i[218332]=i[218333]=i[218334]=i[218335]=250;
		i[218388]=i[218389]=i[218390]=i[218391]=i[218396]=i[218397]=i[218398]=i[218399]=i[218404]=i[218405]=i[218406]=i[218407]=i[218456]=i[218457]=i[218458]=250;
		i[218459]=i[218464]=i[218465]=i[218466]=i[218467]=i[218476]=i[218477]=i[218478]=i[218479]=i[218512]=i[218513]=i[218514]=i[218515]=i[218528]=i[218529]=250;
		i[218530]=i[218531]=i[218648]=i[218649]=i[218650]=i[218651]=i[218720]=i[218721]=i[218722]=i[218723]=i[218844]=i[218845]=i[218846]=i[218847]=i[219096]=250;
		i[219097]=i[219098]=i[219099]=i[219228]=i[219229]=i[219230]=i[219231]=i[219348]=i[219349]=i[219350]=i[219351]=i[219352]=i[219353]=i[219354]=i[219355]=250;
		i[219356]=i[219357]=i[219358]=i[219359]=i[219360]=i[219361]=i[219362]=i[219363]=i[219364]=i[219365]=i[219366]=i[219367]=i[219420]=i[219421]=i[219422]=250;
		i[219423]=i[219428]=i[219429]=i[219430]=i[219431]=i[219480]=i[219481]=i[219482]=i[219483]=i[219488]=i[219489]=i[219490]=i[219491]=i[219500]=i[219501]=250;
		i[219502]=i[219503]=i[219536]=i[219537]=i[219538]=i[219539]=i[219552]=i[219553]=i[219554]=i[219555]=i[219556]=i[219557]=i[219558]=i[219559]=i[219672]=250;
		i[219673]=i[219674]=i[219675]=i[219744]=i[219745]=i[219746]=i[219747]=i[219868]=i[219869]=i[219870]=i[219871]=i[219992]=i[219993]=i[219994]=i[219995]=250;
		i[219996]=i[219997]=i[219998]=i[219999]=i[220000]=i[220001]=i[220002]=i[220003]=i[220124]=i[220125]=i[220126]=i[220127]=i[220252]=i[220253]=i[220254]=250;
		i[220255]=i[220376]=i[220377]=i[220378]=i[220379]=i[220384]=i[220385]=i[220386]=i[220387]=i[220444]=i[220445]=i[220446]=i[220447]=i[220452]=i[220453]=250;
		i[220454]=i[220455]=i[220508]=i[220509]=i[220510]=i[220511]=i[220516]=i[220517]=i[220518]=i[220519]=i[220520]=i[220521]=i[220522]=i[220523]=i[220564]=250;
		i[220565]=i[220566]=i[220567]=i[220572]=i[220573]=i[220574]=i[220575]=i[220696]=i[220697]=i[220698]=i[220699]=i[220768]=i[220769]=i[220770]=i[220771]=250;
		i[220884]=i[220885]=i[220886]=i[220887]=i[220888]=i[220889]=i[220890]=i[220891]=i[220892]=i[220893]=i[220894]=i[220895]=i[220896]=i[220897]=i[220898]=250;
		i[220899]=i[220900]=i[220901]=i[220902]=i[220903]=i[221148]=i[221149]=i[221150]=i[221151]=i[221276]=i[221277]=i[221278]=i[221279]=i[221400]=i[221401]=250;
		i[221402]=i[221403]=i[221408]=i[221409]=i[221410]=i[221411]=i[221464]=i[221465]=i[221466]=i[221467]=i[221468]=i[221469]=i[221470]=i[221471]=i[221472]=250;
		i[221473]=i[221474]=i[221475]=i[221520]=i[221521]=i[221522]=i[221523]=i[221524]=i[221525]=i[221526]=i[221527]=i[221532]=i[221533]=i[221534]=i[221535]=250;
		i[221592]=i[221593]=i[221594]=i[221595]=i[221596]=i[221597]=i[221598]=i[221599]=i[221720]=i[221721]=i[221722]=i[221723]=i[221792]=i[221793]=i[221794]=250;
		i[221795]=i[221848]=i[221849]=i[221850]=i[221851]=i[221856]=i[221857]=i[221858]=i[221859]=i[221916]=i[221917]=i[221918]=i[221919]=i[222172]=i[222173]=250;
		i[222174]=i[222175]=i[222300]=i[222301]=i[222302]=i[222303]=i[222360]=i[222361]=i[222362]=i[222363]=i[222368]=i[222369]=i[222370]=i[222371]=i[222420]=250;
		i[222421]=i[222422]=i[222423]=i[222424]=i[222425]=i[222426]=i[222427]=i[222428]=i[222429]=i[222430]=i[222431]=i[222432]=i[222433]=i[222434]=i[222435]=250;
		i[222436]=i[222437]=i[222438]=i[222439]=i[222484]=i[222485]=i[222486]=i[222487]=i[222492]=i[222493]=i[222494]=i[222495]=i[222540]=i[222541]=i[222542]=250;
		i[222543]=i[222552]=i[222553]=i[222554]=i[222555]=i[222560]=i[222561]=i[222562]=i[222563]=i[222612]=i[222613]=i[222614]=i[222615]=i[222624]=i[222625]=250;
		i[222626]=i[222627]=i[222684]=i[222685]=i[222686]=i[222687]=i[222744]=i[222745]=i[222746]=i[222747]=i[222816]=i[222817]=i[222818]=i[222819]=i[222876]=250;
		i[222877]=i[222878]=i[222879]=i[222940]=i[222941]=i[222942]=i[222943]=i[223196]=i[223197]=i[223198]=i[223199]=i[223324]=i[223325]=i[223326]=i[223327]=250;
		i[223384]=i[223385]=i[223386]=i[223387]=i[223392]=i[223393]=i[223394]=i[223395]=i[223452]=i[223453]=i[223454]=i[223455]=i[223460]=i[223461]=i[223462]=250;
		i[223463]=i[223508]=i[223509]=i[223510]=i[223511]=i[223516]=i[223517]=i[223518]=i[223519]=i[223524]=i[223525]=i[223526]=i[223527]=i[223564]=i[223565]=250;
		i[223566]=i[223567]=i[223576]=i[223577]=i[223578]=i[223579]=i[223584]=i[223585]=i[223586]=i[223587]=i[223636]=i[223637]=i[223638]=i[223639]=i[223648]=250;
		i[223649]=i[223650]=i[223651]=i[223708]=i[223709]=i[223710]=i[223711]=i[223772]=i[223773]=i[223774]=i[223775]=i[223836]=i[223837]=i[223838]=i[223839]=250;
		i[223896]=i[223897]=i[223898]=i[223899]=i[223900]=i[223901]=i[223902]=i[223903]=i[223904]=i[223905]=i[223906]=i[223907]=i[224224]=i[224225]=i[224226]=250;
		i[224227]=i[224348]=i[224349]=i[224350]=i[224351]=i[224408]=i[224409]=i[224410]=i[224411]=i[224416]=i[224417]=i[224418]=i[224419]=i[224476]=i[224477]=250;
		i[224478]=i[224479]=i[224484]=i[224485]=i[224486]=i[224487]=i[224536]=i[224537]=i[224538]=i[224539]=i[224540]=i[224541]=i[224542]=i[224543]=i[224544]=250;
		i[224545]=i[224546]=i[224547]=i[224592]=i[224593]=i[224594]=i[224595]=i[224596]=i[224597]=i[224598]=i[224599]=i[224612]=i[224613]=i[224614]=i[224615]=250;
		i[224664]=i[224665]=i[224666]=i[224667]=i[224668]=i[224669]=i[224670]=i[224671]=i[224732]=i[224733]=i[224734]=i[224735]=i[224800]=i[224801]=i[224802]=250;
		i[224803]=i[224856]=i[224857]=i[224858]=i[224859]=i[224924]=i[224925]=i[224926]=i[224927]=i[225248]=i[225249]=i[225250]=i[225251]=250;
		result.data = i;
		return result;
	}
	//Constructor:
	function TextRenderer(glContext)
	{
		//No valid context avail:
		if(!glContext)
			throw 'TextRenderer::TextRenderer(..): Initialization of WebGL failed!\nPlease use a web browser with WebGL-Support!';
		//Store GL-Context:
		this.glContext = glContext;
		let gl = this.glContext;
		//Define shaders:
		const vertexShader = `
	  attribute vec2 inVertexPos;
	  attribute vec2 inTexCoord;
	  attribute vec4 inColor;
	  uniform mat4 matMVP;
	  varying vec2 texCoord0;
	  varying vec4 color0;
	  void main()
	  {
	    gl_Position = matMVP * vec4(inVertexPos, 0.0, 1.0);
	    texCoord0 = inTexCoord;
	    color0 = inColor;
	  }`;
		const fragmentShader = `
	  precision mediump float;
	  varying vec4 color0;
	  varying vec2 texCoord0;
	  uniform sampler2D fontTex;
	  void main()
	  {
	    gl_FragColor = color0 * texture2D(fontTex, texCoord0);
	  }`;
		//Load shader program:
		this.program = new GLProgram(gl, vertexShader, fragmentShader);
		//Bind shader variables:
		this.shaderLocInVertexPos = gl.getAttribLocation(this.program.glID, "inVertexPos");
		this.shaderLocInTexCoord = gl.getAttribLocation(this.program.glID, "inTexCoord");
		this.shaderLocInColor = gl.getAttribLocation(this.program.glID, "inColor");
		this.shaderLocMatMVP = gl.getUniformLocation(this.program.glID, "matMVP");
		this.shaderLocFontTex = gl.getUniformLocation(this.program.glID, "fontTex");
		//Create VBO for geometry and color data:
		this.vbo = new GLVBO(gl);
		//Create texture for font:
		let fontTexData = createFontTextureData();
		this.texture = new GLTexture(gl, fontTexData.width, fontTexData.height, fontTexData.data, gl.TEXTURE_2D, gl.RGBA, gl.RGBA, gl.LINEAR, gl.LINEAR, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE);
	}

	//Function generates all geometry data for rendering the text:
	TextRenderer.prototype.generateVBOData = function(text, textPosition, textColor)
	{
		let fontW = 16, fontH = 16, fontD = 8;
		let fontRecW = 1.0 / fontW, fontRecH = 1.0 / fontH;
		let data = [];
		for (let n = 0; n < text.length; ++n)
		{
			let c = text.charCodeAt(n);
			let x = [textPosition[0] + n * fontD, textPosition[0] + n * fontD + fontW];
			let y = [textPosition[1], textPosition[1] + fontH];
			let u = [fontRecW * (c % 16), fontRecW * (c % 16) + fontRecW];
			let v = [1.0 - (1 + Math.floor(c / 16)) * fontRecH, 1.0 - (1 + Math.floor(c / 16)) * fontRecH + fontRecH];
			let cData = [ x[0], y[0], u[0], v[0], textColor[0], textColor[1], textColor[2], textColor[3],
				x[0], y[1], u[0], v[1], textColor[0], textColor[1], textColor[2], textColor[3],
				x[1], y[0], u[1], v[0], textColor[0], textColor[1], textColor[2], textColor[3],
				x[1], y[0], u[1], v[0], textColor[0], textColor[1], textColor[2], textColor[3],
				x[0], y[1], u[0], v[1], textColor[0], textColor[1], textColor[2], textColor[3],
				x[1], y[1], u[1], v[1], textColor[0], textColor[1], textColor[2], textColor[3] ];
			data = data.concat(cData);
		}
		return data;
	}

	//Function processes rendering of text:
	TextRenderer.prototype.process = function(text, textPosition, textColor, texRotation, canvasWidth, canvasHeight)
	{
		let gl = this.glContext;
		//Generate VBO data:
		let data = this.generateVBOData(text, textPosition, textColor);
		//Update data in VBO:
		this.vbo.update(new Float32Array(data));
		this.nTrianglesToRender = data.length / 8;
		if(this.nTrianglesToRender < 1)
			return;
		//Render VBO:
		this.program.bind();
		gl.disable(gl.DEPTH_TEST);
		gl.enable(gl.BLEND);
		gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		gl.uniform1i(this.shaderLocfontTex, 0);
		gl.activeTexture(gl.TEXTURE0);
		this.texture.bind();
		//Set geometry data:
		let size = 2;          //2 components per vertex
		let type = gl.FLOAT;   //32-Bit floats
		let normalize = false; //no data normalization
		let stride = 8 * 4;    //stride to next element (number of bytes)
		let offset = 0;        //start of buffer data
		this.vbo.bind();
		gl.vertexAttribPointer(this.shaderLocInVertexPos, size, type, normalize, stride, offset);
		offset = 8;
		gl.vertexAttribPointer(this.shaderLocInTexCoord, size, type, normalize, stride, offset);
		size = 4;
		offset = 16;
		gl.vertexAttribPointer(this.shaderLocInColor, size, type, normalize, stride, offset);
		gl.enableVertexAttribArray(this.shaderLocInVertexPos);
		gl.enableVertexAttribArray(this.shaderLocInTexCoord);
		gl.enableVertexAttribArray(this.shaderLocInColor);
		let matMV = new Matrix4f();
		matMV.setIdentity();
		let cosa = Math.cos((texRotation / 180.0) * Math.PI);
		let sina = Math.sin((texRotation / 180.0) * Math.PI);
		matMV.data[0] = cosa;
		matMV.data[1] = -sina;
		matMV.data[4] = sina;
		matMV.data[5] = cosa;
		let matMVP = new Matrix4f();
		let left = 0.0, right = canvasWidth, bottom = 0.0, top = canvasHeight, near = -1.0, far = 1.0;
		matMVP.setOrtho(left, right, bottom, top, near, far);
		matMVP.multiply(matMV);
		gl.uniformMatrix4fv(this.shaderLocMatMVP, false, matMVP.data);
		//Draw the geometry:
		let primitiveType = gl.TRIANGLES;
		let dataOffset = 0;
		gl.drawArrays(primitiveType, dataOffset, this.nTrianglesToRender);
		//Restore settings:
		gl.disable(gl.BLEND);
		gl.enable(gl.DEPTH_TEST);
	}
	//Constructor:
	function GridRenderer(glContext)
	{
		//No valid context avail:
		if(!glContext)
			throw 'GridRenderer(..): Initialization of WebGL failed!\nPlease use a web browser with WebGL-Support!';
		//Store GL-Context:
		this.glContext = glContext;
		let gl = this.glContext;
		//Define shaders:
		const vertexShader = `
	  attribute vec2 inVertexPos;
	  attribute vec4 inColor;
	  uniform mat4 matMVP;
	  varying vec4 color0;
	  void main()
	  {
	    gl_Position = matMVP * vec4(inVertexPos, 0.0, 1.0);
	    color0 = inColor;
	  }`;
		const fragmentShader = `
	  precision mediump float;
	  varying vec4 color0;
	  uniform float blendingFactor;
	  void main()
	  {
	    gl_FragColor = vec4(color0.rgb, color0.a * blendingFactor);
	  }`;
		//Load shader program:
		this.program = new GLProgram(gl, vertexShader, fragmentShader);
		//Bind shader variables:
		this.shaderLocInVertexPos = gl.getAttribLocation(this.program.glID, "inVertexPos");
		this.shaderLocInColor = gl.getAttribLocation(this.program.glID, "inColor");
		this.shaderLocMatMVP = gl.getUniformLocation(this.program.glID, "matMVP");
		this.blendingFactor = 0.0;
		this.shaderLocBlendingFactor = gl.getUniformLocation(this.program.glID, "blendingFactor");
		//Create VBO for geometry and color data:
		this.vbo = new GLVBO(gl);
		this.nTrianglesToRender = 0;
		this.renderSize = [0, 0];
		this.minSeparationLines = 5;
		//Create text renderer:
		this.textRenderer = new TextRenderer(glContext);
	}

	//Function generates triangle data for a line:
	GridRenderer.prototype.generateLineData = function(x, y, color)
	{
		let data = [];
		data.push(x[0], y[0], color[0], color[1], color[2], color[3]);
		data.push(x[0], y[1], color[0], color[1], color[2], color[3]);
		data.push(x[1], y[0], color[0], color[1], color[2], color[3]);
		data.push(x[0], y[1], color[0], color[1], color[2], color[3]);
		data.push(x[1], y[1], color[0], color[1], color[2], color[3]);
		data.push(x[1], y[0], color[0], color[1], color[2], color[3]);
		return data;
	}

	//Function generates all geometry data for rendering the grid:
	GridRenderer.prototype.generateVBOData = function(canvasWidth, canvasHeight)
	{
		let gridCellSize = Math.min(canvasWidth / (this.minSeparationLines + 1), canvasHeight / (this.minSeparationLines + 1));
		let data = [];
		let color = [0.38, 0.55, 0.71, 0.9];
		let lineWidth = 3.0;
		//Horizontal lines:
		for (let lineY = 0; lineY < canvasHeight / 2 + lineWidth; lineY += gridCellSize)
		{
			//Line in upper half:
			let x = [0, canvasWidth], y = [canvasHeight / 2 + lineY - lineWidth / 2.0, canvasHeight / 2 + lineY + lineWidth / 2.0]; //x = {MinX, MaxX}, y = {MinY, MaxY}
			data = data.concat(this.generateLineData(x, y, color));
			//Line in lower half:
			if(lineY > 0)
			{
				y = [canvasHeight / 2 - lineY - lineWidth / 2.0, canvasHeight / 2 - lineY + lineWidth / 2.0];
				data = data.concat(this.generateLineData(x, y, color));
			}
		}
		//Vertical lines:
		for (let lineX = 0; lineX < canvasWidth / 2 + lineWidth; lineX += gridCellSize)
		{
			//Line in right half:
			let x = [canvasWidth / 2 + lineX - lineWidth / 2.0, canvasWidth / 2 + lineX + lineWidth / 2.0], y = [0, canvasHeight]; //x = {MinX, MaxX}, y = {MinY, MaxY}
			data = data.concat(this.generateLineData(x, y, color));
			//Line in left half:
			if(lineX > 0)
			{
				x = [canvasWidth / 2 - lineX - lineWidth / 2.0, canvasWidth / 2 - lineX + lineWidth / 2.0];
				data = data.concat(this.generateLineData(x, y, color));
			}
		}
		//Cross:
		color = [0.38, 0.55, 0.71, 0.9];
		let crossMinX = (canvasWidth / 2) - 0.25 * gridCellSize, crossMaxX = (canvasWidth / 2) + 0.25 * gridCellSize,
			crossMinY = (canvasHeight / 2) - 0.25 * gridCellSize, crossMaxY = (canvasHeight / 2) + 0.25 * gridCellSize;
		data.push(crossMinX - lineWidth / 2, crossMaxY - lineWidth / 2, color[0], color[1], color[2], color[3]);
		data.push(crossMinX + lineWidth / 2, crossMaxY + lineWidth / 2, color[0], color[1], color[2], color[3]);
		data.push(crossMaxX + lineWidth / 2, crossMinY + lineWidth / 2, color[0], color[1], color[2], color[3]);
		data.push(crossMinX - lineWidth / 2, crossMaxY - lineWidth / 2, color[0], color[1], color[2], color[3]);
		data.push(crossMaxX + lineWidth / 2, crossMinY + lineWidth / 2, color[0], color[1], color[2], color[3]);
		data.push(crossMaxX - lineWidth / 2, crossMinY - lineWidth / 2, color[0], color[1], color[2], color[3]);
		data.push(crossMinX + lineWidth / 2, crossMinY - lineWidth / 2, color[0], color[1], color[2], color[3]);
		data.push(crossMinX - lineWidth / 2, crossMinY + lineWidth / 2, color[0], color[1], color[2], color[3]);
		data.push(crossMaxX - lineWidth / 2, crossMaxY + lineWidth / 2, color[0], color[1], color[2], color[3]);
		data.push(crossMinX + lineWidth / 2, crossMinY - lineWidth / 2, color[0], color[1], color[2], color[3]);
		data.push(crossMaxX - lineWidth / 2, crossMaxY + lineWidth / 2, color[0], color[1], color[2], color[3]);
		data.push(crossMaxX + lineWidth / 2, crossMaxY - lineWidth / 2, color[0], color[1], color[2], color[3]);
		return data;
	}

	//Function returns true, if mouse cursor is inside translation circle:
	GridRenderer.prototype.isInsideTranslationCircle = function(mousePosX, mousePosY)
	{
		let gridCellSize = Math.min(this.renderSize[0] / (this.minSeparationLines + 1), this.renderSize[1] / (this.minSeparationLines + 1));
		let dx = mousePosX - (this.renderSize[0] / 2), dy = mousePosY - (this.renderSize[1] / 2);
		return Math.sqrt(dx * dx + dy * dy) < gridCellSize * 2;
	}

	//Function processes rendering of the grid:
	GridRenderer.prototype.process = function(canvasWidth, canvasHeight, pixelToMillimeter, scale)
	{
		let gl = this.glContext;
		//Update VBO:
		if(this.nLinesToRender < 1 || this.renderSize[0] != canvasWidth || this.renderSize[1] != canvasHeight)
		{
			//Generate geometry data:
			let data = this.generateVBOData(canvasWidth, canvasHeight);
			//Update data in VBO:
			this.vbo.update(new Float32Array(data));
			this.nTrianglesToRender = data.length / 6;
			this.renderSize = [canvasWidth, canvasHeight];
		}
		//Render VBO:
		this.program.bind();
		gl.disable(gl.DEPTH_TEST);
		gl.enable(gl.BLEND);
		gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		//Set geometry data:
		let size = 2;          //2 components per vertex
		let type = gl.FLOAT;   //32-Bit floats
		let normalize = false; //no data normalization
		let stride = 6 * 4;    //stride to next element (number of bytes)
		let offset = 0;        //start of buffer data
		this.vbo.bind();
		gl.vertexAttribPointer(this.shaderLocInVertexPos, size, type, normalize, stride, offset);
		size = 4;
		offset = 8;
		gl.vertexAttribPointer(this.shaderLocInColor, size, type, normalize, stride, offset);
		gl.enableVertexAttribArray(this.shaderLocInVertexPos);
		gl.enableVertexAttribArray(this.shaderLocInColor);
		let left = 0.0, right = canvasWidth, bottom = 0.0, top = canvasHeight, near = -1.0, far = 1.0;
		let matMVP = new Matrix4f();
		matMVP.setOrtho(left, right, bottom, top, near, far);
		gl.uniformMatrix4fv(this.shaderLocMatMVP, false, matMVP.data);
		gl.uniform1f(this.shaderLocBlendingFactor, this.blendingFactor);
		//Draw the geometry:
		let primitiveType = gl.TRIANGLES;
		let dataOffset = 0;
		gl.drawArrays(primitiveType, dataOffset, this.nTrianglesToRender);
		//Restore settings:
		gl.disable(gl.BLEND);
		gl.enable(gl.DEPTH_TEST);
		//Print cell size:
		if(pixelToMillimeter > 0)
		{
			let gridCellSize = Math.min(canvasWidth / (this.minSeparationLines + 1), canvasHeight / (this.minSeparationLines + 1));
			let value = pixelToMillimeter * gridCellSize / scale;
			let text = '' + value.toFixed(2) + ' mm';
			if(text.length * 8 < gridCellSize - 10)
			{
				//Horizontal text:
				let textPosX = canvasWidth / 2 - Math.floor((canvasWidth / 2) / gridCellSize) * gridCellSize;
				let textPosY = Math.floor((canvasHeight / 2) / gridCellSize) * gridCellSize + canvasHeight / 2 - 16;
				let centerOffset = (gridCellSize - 8 * text.length) / 2;
				let textPosition = [Math.floor(textPosX + centerOffset), Math.floor(textPosY)];
				let textColor = [0.0 * 0.5, 0.61 * 0.5, 0.51 * 0.5, 0.9 * this.blendingFactor];
				let texRotation = 0.0;
				this.textRenderer.process(text, textPosition, textColor, texRotation, canvasWidth, canvasHeight);
				//Vertical text:
				texRotation = 90.0;
				textPosition = [Math.floor(-canvasHeight / 2 - Math.floor((canvasHeight / 2) / gridCellSize) * gridCellSize + centerOffset),  //Height due to rotation
					Math.floor(canvasWidth / 2 - Math.floor((canvasWidth / 2) / gridCellSize) * gridCellSize)];
				this.textRenderer.process(text, textPosition, textColor, texRotation, canvasWidth, canvasHeight);
			}
		}
	}
	let VECTOR3F_ARRAY_T = typeof Float32Array !== "undefined"? Float32Array: Array;     //Data type of the array
	let VECTOR3F_DIMS = 3;                                                               //Number of dimensions

	//Standard constructor:
	function Vector3f()
	{
		this.data = new VECTOR3F_ARRAY_T(VECTOR3F_DIMS);
		for (let n = 0; n < VECTOR3F_DIMS; ++n)
			this.data[n] = 0.0;
	}

	//Constructor with parameter:
	function Vector3f(x, y, z)
	{
		this.data = new VECTOR3F_ARRAY_T(VECTOR3F_DIMS);
		this.data[0] = x;
		this.data[1] = y;
		this.data[2] = z;
	}

	//Function returns normalized vector:
	Vector3f.prototype.normalized = function()
	{
		let len = this.data[0] * this.data[0] + this.data[1] * this.data[1] + this.data[2] * this.data[2];
		let result = new Vector3f(this.data[0], this.data[1], this.data[2]);
		if (len > 0)
		{
			len = 1.0 / Math.sqrt(len);
			for (let n = 0; n < VECTOR3F_DIMS; ++n)
				result[n] *= len
		}
		return result;
	}
	//Define constants:
	var VisualizationWidgetConst =
		{
			DefaultAmbient: [0.1, 0.1, 0.1, 1.0],
			DefaultBackgroundColor: [1.0, 1.0, 1.0, 1.0],
			DefaultDiffusePortion: 0.8,
			DefaultFixedMaterialColor: [-1.0, -1.0, -1.0, -1.0],
			DefaultIndexOfRefraction: 0.470,
			DefaultDirectionalLightColor: [1.5, 1.5, 1.5],
			DefaultDirectionalLightDirection: [0.57, -0.57, -0.57],
			DefaultMetallic: 0.470,
			DefaultRoughness: 0.451,
			DefaultEnvironmentReflectance: 0.1
		};
	Object.defineProperty(VisualizationWidgetConst, 'DefaultAmbient', { writable: false });
	Object.defineProperty(VisualizationWidgetConst, 'DefaultBackgroundColor', { writable: false });
	Object.defineProperty(VisualizationWidgetConst, 'DefaultDiffusePortion', { writable: false });
	Object.defineProperty(VisualizationWidgetConst, 'DefaultFixedMaterialColor', { writable: false });
	Object.defineProperty(VisualizationWidgetConst, 'DefaultIndexOfRefraction', { writable: false });
	Object.defineProperty(VisualizationWidgetConst, 'DefaultDirectionalLightColor', { writable: false });
	Object.defineProperty(VisualizationWidgetConst, 'DefaultDirectionalLightDirection', { writable: false });
	Object.defineProperty(VisualizationWidgetConst, 'DefaultMetallic', { writable: false });
	Object.defineProperty(VisualizationWidgetConst, 'DefaultRoughness', { writable: false });
	Object.defineProperty(VisualizationWidgetConst, 'DefaultEnvironmentReflectance', { writable: false });

	//Constructor:
	function VisualizationWidget(canvas)
	{
		//Store GL-Context:
		this.glContext = canvas.getContext("webgl", {premultipliedAlpha: false});
		let gl = this.glContext;
		//No valid context avail:
		if(!gl)
			throw 'VisualizationWidget(..): Initialization of WebGL failed!\nPlease use a web browser with WebGL-Support!';
		//Init var(s):
		this.colorImageSize = [1, 1];                                                                           //Width and height of color image
		this.normalImageSize = [1, 1];                                                                          //Width and height of normal image
		this.transformation = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]; //4x4 Transformation
		this.ambient = Object.assign({}, VisualizationWidgetConst.DefaultAmbient);                //Copy array object (otherwise its referenced)
		this.backgroundColor = Object.assign({}, VisualizationWidgetConst.DefaultBackgroundColor);
		this.directionalLightDirection = Object.assign({}, VisualizationWidgetConst.DefaultDirectionalLightDirection);
		this.directionalLightColor = Object.assign({},  VisualizationWidgetConst.DefaultDirectionalLightColor);
		this.fixedMaterialColor = Object.assign({}, VisualizationWidgetConst.DefaultFixedMaterialColor);
		this.roughness = VisualizationWidgetConst.DefaultRoughness;                               //Atomic values can be assign directly
		this.metallic = VisualizationWidgetConst.DefaultMetallic;
		this.indexOfRefraction = VisualizationWidgetConst.DefaultIndexOfRefraction;
		this.diffusePortion = VisualizationWidgetConst.DefaultDiffusePortion;
		this.environmentReflectance = VisualizationWidgetConst.DefaultEnvironmentReflectance;
		this.pixelToMillimeter = 0;
		this.flipHorizontalPercent = 0.0;
		this.flipVerticalPercent = 0.0;
		this.gaussKernelHSize = 2;
		//Load shader program:
		let macroPos = FragmentShader.indexOf("#define GAUSS_HSIZE");
		if(macroPos < 0)
			throw "Failed to find shader macro GAUSS_HSIZE!";
		let fragmentShaderGauss3 = FragmentShader.slice(0, macroPos + 20) + "1" + FragmentShader.slice(macroPos + 21, FragmentShader.length);
		let fragmentShaderGauss5 = FragmentShader.slice(0, macroPos + 20) + "2" + FragmentShader.slice(macroPos + 21, FragmentShader.length);
		this.program = [new GLProgram(gl, VertexShader, fragmentShaderGauss3), new GLProgram(gl, VertexShader, fragmentShaderGauss5)];
		//Bind shader variables:
		this.shaderLocInVertexPos = [gl.getAttribLocation(this.program[0].glID, "inVertexPos"), gl.getAttribLocation(this.program[1].glID, "inVertexPos")];
		this.shaderLocInTexCoord = [gl.getAttribLocation(this.program[0].glID, "inTexCoord"), gl.getAttribLocation(this.program[1].glID, "inTexCoord")];
		this.shaderLocMatMVP = [gl.getUniformLocation(this.program[0].glID, "matMVP"), gl.getUniformLocation(this.program[1].glID, "matMVP")];
		this.shaderLocColorTex = [gl.getUniformLocation(this.program[0].glID, "colorTex"), gl.getUniformLocation(this.program[1].glID, "colorTex")];
		this.shaderLocNormalTex = [gl.getUniformLocation(this.program[0].glID, "normalTex"), gl.getUniformLocation(this.program[1].glID, "normalTex")];
		this.shaderLocBackgroundMapTex = [gl.getUniformLocation(this.program[0].glID, "backgroundMapTex"), gl.getUniformLocation(this.program[1].glID, "backgroundMapTex")];
		this.shaderLocCubemapTex = [gl.getUniformLocation(this.program[0].glID, "cubemapTex"), gl.getUniformLocation(this.program[1].glID, "cubemapTex")];
		this.shaderLocHasNormalTex = [gl.getUniformLocation(this.program[0].glID, "hasNormalTex"), gl.getUniformLocation(this.program[1].glID, "hasNormalTex")];
		this.shaderLocInputImageSize = [gl.getUniformLocation(this.program[0].glID, "inputImageSize"), gl.getUniformLocation(this.program[1].glID, "inputImageSize")];
		this.shaderLocAmbient = [gl.getUniformLocation(this.program[0].glID, "ambient"), gl.getUniformLocation(this.program[1].glID, "ambient")];
		this.shaderLocBackgroundColor = [gl.getUniformLocation(this.program[0].glID, "backgroundColor"), gl.getUniformLocation(this.program[1].glID, "backgroundColor")];
		this.shaderLocDirectionalLightDir = [gl.getUniformLocation(this.program[0].glID, "directionalLightDir"), gl.getUniformLocation(this.program[1].glID, "directionalLightDir")];
		this.shaderLocDirectionalLightColor = [gl.getUniformLocation(this.program[0].glID, "directionalLightColor"), gl.getUniformLocation(this.program[1].glID, "directionalLightColor")];
		this.shaderLocFixedMaterialColor = [gl.getUniformLocation(this.program[0].glID, "fixedMaterialColor"), gl.getUniformLocation(this.program[1].glID, "fixedMaterialColor")];
		this.shaderLocRoughness = [gl.getUniformLocation(this.program[0].glID, "roughness"), gl.getUniformLocation(this.program[1].glID, "roughness")];
		this.shaderLocMetallic = [gl.getUniformLocation(this.program[0].glID, "metallic"), gl.getUniformLocation(this.program[1].glID, "metallic")];
		this.shaderLocIndexOfRefraction = [gl.getUniformLocation(this.program[0].glID, "indexOfRefraction"), gl.getUniformLocation(this.program[1].glID, "indexOfRefraction")];
		this.shaderLocDiffusePortion = [gl.getUniformLocation(this.program[0].glID, "diffusePortion"), gl.getUniformLocation(this.program[1].glID, "diffusePortion")];
		this.shaderLocEnvironmentReflectance = [gl.getUniformLocation(this.program[0].glID, "environmentReflectance"), gl.getUniformLocation(this.program[1].glID, "environmentReflectance")];
		this.shaderLocMatObjSpaceToWorldSpaceRot = [gl.getUniformLocation(this.program[0].glID, "matObjSpaceToWorldSpaceRot"), gl.getUniformLocation(this.program[1].glID, "matObjSpaceToWorldSpaceRot")];
		//Define enumeration of texture types:
		this.TEXTURE_TYPES =
			{
				TEXTURE_TYPE_COLOR: 'color_texture',
				TEXTURE_TYPE_NORMAL: 'normal_texture'
			};
		//Create textures:
		this.colorTex = this.createTexture2D();
		this.normalTex = this.createTexture2D();
		this.cubemapTex = this.createTextureCUBE();
		//Create VBO for geometry data:
		this.vbo = new GLVBO(gl);
		//Create default callback function for resize:
		this.callbackResize = function(){ };  //can be overwritten from outside, defines e.g. new transformation when widget was resized
		//Init renderer for icons:
		this.iconRenderer = new IconRenderer(canvas);
		//Create grid renderer:
		this.gridRenderer = new GridRenderer(gl);
	}

	//Function adds rotation:
	VisualizationWidget.prototype.addRotation = function(angle)
	{
		let gl = this.glContext;
		//Create rotation matrix for relative rotation:
		let matRot = new Matrix4f();
		matRot.setIdentity();
		let cosa = Math.cos((angle / 180.0) * Math.PI);
		let sina = Math.sin((angle / 180.0) * Math.PI);
		matRot.data[0] = cosa;
		matRot.data[1] = sina;
		matRot.data[4] = -sina;
		matRot.data[5] = cosa;
		//Compute position of the middle window coordinate on the image:
		let matTrans = new Matrix4f(this.transformation[0], this.transformation[1], this.transformation[2], this.transformation[3],
			this.transformation[4], this.transformation[5], this.transformation[6], this.transformation[7],
			this.transformation[8], this.transformation[9], this.transformation[10], this.transformation[11],
			this.transformation[12], this.transformation[13], this.transformation[14], this.transformation[15]);
		let invTransformation = matTrans.clone();
		invTransformation.invert();
		let transformedPivotPoint = invTransformation.multipliedByVector4f(pivotPointX, pivotPointY, 0.0, 1.0);
		//Compute transformation from projected middle window coordinate to the origin:
		let matToOrigin = new Matrix4f();
		matToOrigin.setIdentity();
		matToOrigin.data[3] = -transformedPivotPoint[0];
		matToOrigin.data[7] = -transformedPivotPoint[1];
		//Compute transformation from origin back to middle window coordinate:
		let matOriginToCenter = new Matrix4f();
		matOriginToCenter.setIdentity();
		matOriginToCenter.data[3] = -matToOrigin.data[3];
		matOriginToCenter.data[7] = -matToOrigin.data[7];
		//Add rotation:
		let matRelTrans = matToOrigin.clone();
		matRelTrans.multiply(matRot);
		matRelTrans.multiply(matOriginToCenter);
		matRelTrans.transpose();
		let matFinal = matTrans.clone();
		matFinal.multiply(matRelTrans);
		for (let n = 0; n < 16; ++n)
			this.transformation[n] = matFinal.data[n];
	}

	//Function adds translation:
	VisualizationWidget.prototype.addTranslation = function(dx, dy)
	{
		this.transformation[12] += dx;
		this.transformation[13] += dy;
	}

	//Function clears data:
	VisualizationWidget.prototype.clearData = function()
	{
		this.colorImageSize[0] = this.colorImageSize[1] = 0;
		this.normalImageSize[0] = this.normalImageSize[1] = 0;
		this.pixelToMillimeter = 0;
		//NOTE: No need for clearing textures here
	}

	//Function computes transformation with added scale:
	VisualizationWidget.prototype.computeAddedScale = function(pivotPointX, pivotPointY, sx, sy)
	{
		//Create scale matrix for relative scale:
		let matScale = new Matrix4f();
		matScale.setIdentity();
		matScale.data[0] = sx;
		matScale.data[5] = sy;
		//Compute position of the middle window coordinate on the image:
		let matTrans = new Matrix4f(this.transformation[0], this.transformation[1], this.transformation[2], this.transformation[3],
			this.transformation[4], this.transformation[5], this.transformation[6], this.transformation[7],
			this.transformation[8], this.transformation[9], this.transformation[10], this.transformation[11],
			this.transformation[12], this.transformation[13], this.transformation[14], this.transformation[15]);
		let invTransformation = matTrans.clone();
		invTransformation.invert();
		let transformedPivotPoint = invTransformation.multipliedByVector4f(pivotPointX, pivotPointY, 0.0, 1.0);
		//Compute transformation from projected middle window coordinate to the origin:
		let matToOrigin = new Matrix4f();
		matToOrigin.setIdentity();
		matToOrigin.data[3] = -transformedPivotPoint[0];
		matToOrigin.data[7] = -transformedPivotPoint[1];
		//Compute transformation from origin back to middle window coordinate:
		let matOriginToCenter = new Matrix4f();
		matOriginToCenter.setIdentity();
		matOriginToCenter.data[3] = -matToOrigin.data[3];
		matOriginToCenter.data[7] = -matToOrigin.data[7];
		//Add scale:
		let matRelTrans = matToOrigin.clone();
		matRelTrans.multiply(matScale);
		matRelTrans.multiply(matOriginToCenter);
		matRelTrans.transpose();
		let matFinal = matTrans.clone();
		matFinal.multiply(matRelTrans);
		//Finished:
		return matFinal.data;
	}

	//Function computes default transformation for viewing object on a canvas:
	VisualizationWidget.prototype.computeDefaultTransformation = function(objectCenterPos, objectRadius, objectRotation)
	{
		let canvasWidth = this.glContext.canvas.width, canvasHeight =  this.glContext.canvas.height;
		let matResult = new Matrix4f(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
		//Compute scale dynamically from size:
		let scale = 1.0;
		if(objectRadius * 2 > canvasWidth)
			scale = Math.min(scale, canvasWidth / (objectRadius * 2));
		if(objectRadius * 2 > canvasHeight)
			scale = Math.min(scale, canvasHeight / (objectRadius * 2));
		//Set scale and rotation:
		let cosa = Math.cos((-objectRotation / 180.0) * Math.PI);
		let sina = Math.sin((-objectRotation / 180.0) * Math.PI);
		matResult.data[0] = scale * cosa;
		matResult.data[1] = scale * (-sina);
		matResult.data[4] = scale * sina;
		matResult.data[5] = scale * cosa;
		//Set translation to middle of window:
		let centerOffset = [-objectCenterPos[0], -objectCenterPos[1]];
		matResult.data[3] = matResult.data[0] * centerOffset[0] + matResult.data[1] * centerOffset[1] + canvasWidth / 2.0;
		matResult.data[7] = matResult.data[4] * centerOffset[0] + matResult.data[5] * centerOffset[1] + canvasHeight / 2.0;
		matResult.transpose();
		return matResult.data;
	}

	//Function create texture:
	VisualizationWidget.prototype.createTexture2D = function()
	{
		let gl = this.glContext;
		let texture = new GLTexture(gl, 1, 1, new Uint8Array([127, 127, 127, 255]), gl.TEXTURE_2D, gl.RGBA, gl.RGBA, gl.LINEAR, gl.LINEAR, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE); //fill it with one gray pixel
		return texture;
	}

	//Function create texture:
	VisualizationWidget.prototype.createTextureCUBE = function()
	{
		let cubemapGen = new CubemapGenerator();
		let cubemapData = cubemapGen.computeOutdoorCubemap();
		let gl = this.glContext;
		let texture = new GLTexture(gl, null, null, cubemapData, gl.TEXTURE_CUBE_MAP, gl.RGB, gl.RGB, gl.LINEAR, gl.LINEAR, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE);
		return texture;
	}

	//Function enables icons for interaction:
	VisualizationWidget.prototype.enableIcons = function(enableScale, enableFlip, onFinished)
	{
		this.iconRenderer.clearData();
		//Icon images are not yet loaded, load images and add icons:
		if(this.iconImages == null)
		{
			this.iconImages = [ { id: "IconResetView", rawDataActive: iconDataResetView, rawDataInactive: iconDataResetView, imageAct: null, imageInact: null, animateClicked: true },
				{ id: "IconZoomOut", rawDataActive: iconDataZoomOut, rawDataInactive: iconDataZoomOut, imageAct: null, imageInact: null, animateClicked: true },
				{ id: "IconZoomIn", rawDataActive: iconDataZoomIn, rawDataInactive: iconDataZoomIn, imageAct: null, imageInact: null, animateClicked: true }];
			if(enableScale)
				this.iconImages.push({ id: "IconRule", rawDataActive: iconDataRule, rawDataInactive: iconDataRule, imageAct: null, imageInact: null, animateClicked: true });
			this.iconImages.push({ id: "IconMoveObjectOrLight", rawDataActive: iconDataMoveLight, rawDataInactive: iconDataMoveObject, imageAct: null, imageInact: null, animateClicked: false });
			if(enableFlip)
				this.iconImages.push({ id: "IconFlip", rawDataActive: iconDataFlip, rawDataInactive: iconDataFlip, imageAct: null, imageInact: null, animateClicked: true });
			let iconImages = this.iconImages;
			let icons = [iconImages.length];  //Stores list of {ID, Icon image data}
			let nIconsLoaded = 0; //Track number of loaded icons (images are loaded asynchronously and do not finish in subsequent order)
			let iconRenderer = this.iconRenderer;
			for (let n = 0; n < iconImages.length; ++n)
			{
				let imageAct = new Image();
				imageAct.src = "data:image/png;base64," + iconImages[n].rawDataActive;
				imageAct.onload = function ()
				{
					iconImages[n].imageAct = imageAct;
					let imageInact = new Image();
					imageInact.src = "data:image/png;base64," + iconImages[n].rawDataInactive;
					imageInact.onload = function ()
					{
						iconImages[n].imageInact = imageInact;
						icons[n] = { id: iconImages[n].id, imgActive: imageAct, imgInactive: imageInact, animateClicked: iconImages[n].animateClicked };
						nIconsLoaded++;
						if (nIconsLoaded == iconImages.length) //all images loaded, now add the batch to the renderer
						{
							iconRenderer.addIcons(icons);
							onFinished();
						}
					}
				}
			}
		}
		else  //images are loaded, add icons
		{
			let icons = [this.iconImages.length];  //Stores list of {ID, Icon image data}
			for (let n = 0; n < this.iconImages.length; ++n)
				icons[n] = { id: this.iconImages[n].id, imgActive: this.iconImages[n].imageAct, imgInactive: this.iconImages[n].imageInact, animateClicked: this.iconImages[n].animateClicked };
			this.iconRenderer.addIcons(icons);
			onFinished();
		}
	}

	//Function loads an image into a texture:
	VisualizationWidget.prototype.loadImageToTexture = function(img, textureType)
	{
		let gl = this.glContext;
		//Load texture:
		switch(textureType)
		{
			case this.TEXTURE_TYPES.TEXTURE_TYPE_COLOR:
			{
				this.colorTex.bind();
				break;
			}
			case this.TEXTURE_TYPES.TEXTURE_TYPE_NORMAL:
			{
				this.normalTex.bind();
				break;
			}
			default:
			{
				throw ('VisualizationWidget::loadImageToTexture(..): Texture type is not implemented!');
			}
		}
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
		//Store new texture size:
		switch(textureType)
		{
			case this.TEXTURE_TYPES.TEXTURE_TYPE_COLOR:
			{
				this.colorImageSize[0] = img.width;
				this.colorImageSize[1] = img.height;
				break;
			}
			case this.TEXTURE_TYPES.TEXTURE_TYPE_NORMAL:
			{
				this.normalImageSize[0] = img.width;
				this.normalImageSize[1] = img.height;
				break;
			}
		}
		//If normal map was loaded, generate background map:
		if(textureType == this.TEXTURE_TYPES.TEXTURE_TYPE_NORMAL)
		{
			let backgroundMapGenerator = new BackgroundMapGenerator();
			let backgroundMapTexData = backgroundMapGenerator.computeBackgroundMapData(img);
			this.backgroundMapTex = new GLTexture(gl, this.normalImageSize[0], this.normalImageSize[1], backgroundMapTexData, gl.TEXTURE_2D, gl.LUMINANCE, gl.LUMINANCE, gl.LINEAR, gl.LINEAR, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE);
		}
		//console.log("VisualizationWidget::loadImageToTexture(..): Texture loaded, type = " + textureType + ", size = " + img.width + " x " + img.height);
	}

	//Function loads an image into a texture:
	VisualizationWidget.prototype.loadBufferToTexture = function(imgWidth, imgHeight, bufferData, textureType)
	{
		let gl = this.glContext;
		//Load texture:
		switch(textureType)
		{
			case this.TEXTURE_TYPES.TEXTURE_TYPE_COLOR:
			{
				this.colorTex.bind();
				break;
			}
			case this.TEXTURE_TYPES.TEXTURE_TYPE_NORMAL:
			{
				this.normalTex.bind();
				break;
			}
			default:
			{
				throw ('VisualizationWidget::loadBufferToTexture(..): Texture type is not implemented!');
			}
		}
		let oldAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, imgWidth, imgHeight, 0, gl.RGB, gl.UNSIGNED_BYTE, bufferData);
		gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldAlignment);
		//Store new texture size:
		switch(textureType)
		{
			case this.TEXTURE_TYPES.TEXTURE_TYPE_COLOR:
			{
				this.colorImageSize[0] = imgWidth;
				this.colorImageSize[1] = imgHeight;
				break;
			}
			case this.TEXTURE_TYPES.TEXTURE_TYPE_NORMAL:
			{
				this.normalImageSize[0] = imgWidth;
				this.normalImageSize[1] = imgHeight;
				break;
			}
		}
		//console.log("VisualizationWidget::loadImageToTexture(..): Texture loaded, type = " + textureType + ", size = " + img.width + " x " + img.height);
	}

	//Function renders a frame:
	VisualizationWidget.prototype.render = function()
	{
		let gl = this.glContext;
		let hasColorTex = this.colorImageSize[0] > 1 && this.colorImageSize[1] > 1? true: false;
		let hasNormalTex = this.normalImageSize[0] > 1 && this.normalImageSize[1] > 1? true: false;
		//Set new canvas size, if it is not the current display size in browser:
		let displaySize = [gl.canvas.clientWidth, gl.canvas.clientHeight];
		if (gl.canvas.width  != displaySize[0] || gl.canvas.height != displaySize[1])
		{
			if(hasColorTex)
			{
				let delta = [gl.canvas.width - displaySize[0], gl.canvas.height - displaySize[1]];
				this.transformation[12] -= delta[0] / 2;  //X-Translation in Col-Major-Matrix: Add half of extented area
				this.transformation[13] -= delta[1] / 2;  //Y-Translation in Col-Major-Matrix: Add half of extented area
			}
			gl.canvas.width  = displaySize[0];
			gl.canvas.height = displaySize[1];
			//Initial canvas height is sometimes wrong on Firefox, trigger rendering until canvas height doesn't change anymore:
			{
				gl.canvas.style.width  = '100%';
				gl.canvas.style.height  = '99%';
				this.callbackResize();
				requestAnimationFrame(() => { this.render() });  //trigger rendering
			}
		}
		//Clear buffer(s):
		gl.clearColor(this.backgroundColor[0], this.backgroundColor[1], this.backgroundColor[2], this.backgroundColor[3]);
		gl.clearDepth(1.0);
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
		//There is data of the object avail:
		if(hasColorTex)
		{
			//Update geometry data:
			if(this.flipHorizontalPercent > 0.0)
			{
				//100% to 50% is first rotation with 90 degree, 50% to 0% is second rotation with 90 degree:
				let dx = (this.colorImageSize[0] / 2) * (this.flipHorizontalPercent > 50.0? (1.0 - (this.flipHorizontalPercent - 50.0)/ 50.0): this.flipHorizontalPercent /50.0 );
				this.updateQuadVBO(0 + dx, this.colorImageSize[0] - dx, 0, this.colorImageSize[1]);
			}
			else if(this.flipVerticalPercent > 0.0)
			{
				//100% to 50% is first rotation with 90 degree, 50% to 0% is second rotation with 90 degree:
				let dy = (this.colorImageSize[1] / 2) * (this.flipVerticalPercent > 50.0? (1.0 - (this.flipVerticalPercent - 50.0)/ 50.0): this.flipVerticalPercent /50.0 );
				this.updateQuadVBO(0, this.colorImageSize[0], 0 + dy, this.colorImageSize[1] - dy);
			}
			else
				this.updateQuadVBO(0, this.colorImageSize[0], 0, this.colorImageSize[1]);
			//Setup rendering:
			gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
			gl.enable(gl.DEPTH_TEST);
			gl.depthFunc(gl.LEQUAL);
			//Bind shader and textures:
			let shaderInstance = this.gaussKernelHSize == 1? 0: 1;
			this.program[shaderInstance].bind();
			gl.uniform1i(this.shaderLocColorTex[shaderInstance], 0);
			gl.uniform1i(this.shaderLocHasNormalTex[shaderInstance], hasNormalTex? 1: 0);
			gl.uniform1i(this.shaderLocCubemapTex[shaderInstance], 3);
			if(hasNormalTex)
			{
				gl.uniform1i(this.shaderLocNormalTex[shaderInstance], 1);
				gl.uniform1i(this.shaderLocBackgroundMapTex[shaderInstance], 2);
			}
			gl.activeTexture(gl.TEXTURE0);
			this.colorTex.bind();
			if(hasNormalTex)
			{
				gl.activeTexture(gl.TEXTURE1);
				this.normalTex.bind();
				gl.activeTexture(gl.TEXTURE2);
				this.backgroundMapTex.bind();
			}
			gl.activeTexture(gl.TEXTURE3);
			this.cubemapTex.bind();
			//Set lighting parameter:
			gl.uniform2f(this.shaderLocInputImageSize[shaderInstance], this.colorImageSize[0], this.colorImageSize[1]);
			gl.uniform4f(this.shaderLocAmbient[shaderInstance], this.ambient[0], this.ambient[1], this.ambient[2], this.ambient[3]);
			gl.uniform4f(this.shaderLocBackgroundColor[shaderInstance], this.backgroundColor[0], this.backgroundColor[1], this.backgroundColor[2], this.backgroundColor[3]);
			gl.uniform3f(this.shaderLocDirectionalLightDir[shaderInstance], this.directionalLightDirection[0], this.directionalLightDirection[1], this.directionalLightDirection[2]);
			gl.uniform3f(this.shaderLocDirectionalLightColor[shaderInstance], this.directionalLightColor[0], this.directionalLightColor[1], this.directionalLightColor[2]);
			gl.uniform4f(this.shaderLocFixedMaterialColor[shaderInstance], this.fixedMaterialColor[0], this.fixedMaterialColor[1], this.fixedMaterialColor[2], this.fixedMaterialColor[3]);
			gl.uniform1f(this.shaderLocRoughness[shaderInstance], this.roughness);
			gl.uniform1f(this.shaderLocMetallic[shaderInstance], this.metallic);
			gl.uniform1f(this.shaderLocIndexOfRefraction[shaderInstance], this.indexOfRefraction);
			gl.uniform1f(this.shaderLocDiffusePortion[shaderInstance], this.diffusePortion);
			gl.uniform1f(this.shaderLocEnvironmentReflectance[shaderInstance], this.environmentReflectance);
			let scale = [ Math.sqrt(this.transformation[0] * this.transformation[0] + this.transformation[1] * this.transformation[1] + this.transformation[2] * this.transformation[2]),
				Math.sqrt(this.transformation[4] * this.transformation[4] + this.transformation[5] * this.transformation[5] + this.transformation[6] * this.transformation[6]),
				Math.sqrt(this.transformation[8] * this.transformation[8] + this.transformation[9] * this.transformation[9] + this.transformation[10] * this.transformation[10])	];
			let matObjSpaceToWorldSpaceRot = [this.transformation[0] / scale[0], this.transformation[1] / scale[0], this.transformation[2] / scale[0],
				this.transformation[4] / scale[1], this.transformation[5] / scale[1], this.transformation[6] / scale[1],
				this.transformation[8] / scale[2], this.transformation[9] / scale[2], this.transformation[10] / scale[2]  ];
			gl.uniformMatrix3fv(this.shaderLocMatObjSpaceToWorldSpaceRot[shaderInstance], false, matObjSpaceToWorldSpaceRot);
			//Set geometry data:
			let size = 2;          //2 components per vertex
			let type = gl.FLOAT;   //32-Bit floats
			let normalize = false; //no data normalization
			let stride = 16;        //stride to next element (number of bytes)
			let offset = 0;        //start of buffer data
			this.vbo.bind();
			gl.vertexAttribPointer(this.shaderLocInVertexPos[shaderInstance], size, type, normalize, stride, offset);
			offset = 8;
			gl.vertexAttribPointer(this.shaderLocInTexCoord[shaderInstance], size, type, normalize, stride, offset);
			gl.enableVertexAttribArray(this.shaderLocInVertexPos[shaderInstance]);
			gl.enableVertexAttribArray(this.shaderLocInTexCoord[shaderInstance]);
			let matMV = new Matrix4f(this.transformation[0], this.transformation[1], this.transformation[2], this.transformation[3],
				this.transformation[4], this.transformation[5], this.transformation[6], this.transformation[7],
				this.transformation[8], this.transformation[9], this.transformation[10], this.transformation[11],
				this.transformation[12], this.transformation[13], this.transformation[14], this.transformation[15]);
			let matMVP = new Matrix4f();
			let left = 0.0, right = gl.canvas.width, bottom = 0.0, top = gl.canvas.height, near = -1.0, far = 1.0;
			matMVP.setOrtho(left, right, bottom, top, near, far);
			matMVP.multiply(matMV);
			gl.uniformMatrix4fv(this.shaderLocMatMVP[shaderInstance], false, matMVP.data);
			//Draw the geometry:
			let primitiveType = gl.TRIANGLE_STRIP;
			offset = 0;
			let count = 4;
			gl.drawArrays(primitiveType, offset, count);
		}
		//Render grid:
		if (this.gridRenderer.blendingFactor > 0.0)
		{
			let scale = Math.sqrt(this.transformation[0] * this.transformation[0] + this.transformation[1] * this.transformation[1]);
			this.gridRenderer.process(gl.canvas.width, gl.canvas.height, this.pixelToMillimeter, scale);
		}
		//Render icons of the UI:
		this.iconRenderer.render();
	};

	//Function updates VBO with geometry for a quad:
	VisualizationWidget.prototype.updateQuadVBO = function(minX, maxX, minY, maxY)
	{
		//Data in VBO is already up-to-date:
		if(this.vboQuadSize && this.vboQuadSize[0] == minX && this.vboQuadSize[1] == maxX && this.vboQuadSize[2] == minY && this.vboQuadSize[3] == maxY)
			return;
		//Update data:
		const data = [ minX, minY, 0.0, 1.0,        //PosX, PosY, TexCoordX, TexCoordY
			minX, maxY, 0.0, 0.0,
			maxX, minY, 1.0, 1.0,
			maxX, maxY, 1.0, 0.0];
		this.vbo.update(new Float32Array(data));
		//Store dimensions:
		this.vboQuadSize = [minX, maxX, minY, maxY];
	}
	var visWidget;
	var interactionMode = 0;              //0 = None, 1 = set light direction, 2 = move object
	var script = document.currentScript;  //Initially store the currently processed script (NOTE: When document.currentScript is accessed inside function, it will return null there)
	var mouseWheelZoomAllowed = false;    //Is only avail when the user clicks on the widget (prevent stop when scrolling large website)
	var animation;                        //Stores the values for animation of light or view transformation
	var animationInterval;                //Interval for animation
	var currentCoinSide = 0;              //Current visible coin side
	var moveLightOnLeftMouse = 1;         //1 = Move light source with left mouse / single touch, 0 = Move object
	var coinData = null;                  //Json object with complete coin data
	var lastTouchPos = [0, 0];            //Store position of the last touch event
	var loadOtherSide = false;            //Flag for loading other side of the object

	//Function enables specific cursor style:
	function enableCursorStyle(cursorStyle)
	{
		let $canvas = document.getElementById("glcanvas_left");
		$canvas.style.cursor = cursorStyle;
	}

	//Function enables a continuous animation (e.g. rotation of light source):
	function enableAnimation()
	{
		//Render function for the animation:
		var renderAnimation = function()
		{
			let viewAlterationEnabledBeforeUpdate = animation.viewAlterationEnabled;
			animation.update();
			if(animation.lightRotationEnabled)
				visWidget.directionalLightDirection = animation.lightVector.normalized().data;
			if(viewAlterationEnabledBeforeUpdate || animation.viewAlterationEnabled)
			{
				visWidget.transformation = animation.viewAlterationTransformation.slice();
				visWidget.directionalLightDirection = animation.lightVector.data.slice();
				visWidget.flipHorizontalPercent = animation.viewAlterationFlipHorizontalPercent;
				visWidget.flipVerticalPercent = animation.viewAlterationFlipVerticalPercent;
				visWidget.gridRenderer.blendingFactor = animation.viewAlterationScaleGridBlendingFactor;
				visWidget.gaussKernelHSize = animation.viewAlterationEnabled? 1: 2;  //use smaller kernel for smooth animation
				if(loadOtherSide &&
					( (animation.viewAlterationFlipHorizontal && animation.viewAlterationFlipHorizontalPercent <= 50.0) ||
						(animation.viewAlterationFlipVertical && animation.viewAlterationFlipVerticalPercent <= 50.0) ) )
				{
					loadOtherSide = false;
					loadDataset(null, null);
				}
			}
			visWidget.render();
		}
		//Render automatically rotating light at start with only 20 fps (to reduce power consumption):
		if(animation.lightRotationEnabled)
		{
			animationInterval = setInterval(function()
			{
				//Render:
				renderAnimation();
				//No further visible changes, stop animation:
				if(!animation.lightRotationEnabled && !animation.viewAlterationEnabled)
					clearInterval(animationInterval);
			}, 50);
		}
		else
		{
			if(animationInterval != null)
			{
				clearInterval(animationInterval);
				animationInterval = null;
			}
			//NOTE: For smooth animation while interacting with the GUI, it is recommended to trigger rendering via requestAnimationFrame(..)-Function (instead of e.g. setInterval(..)-Function).
			var requestNewFrameRendering = true;
			var renderLoop = function()
			{
				if(requestNewFrameRendering)  //do this at first
					window.requestAnimationFrame(renderLoop);
				//Render:
				renderAnimation();
				//No further visible changes, stop animation:
				if(!animation.lightRotationEnabled && !animation.viewAlterationEnabled)
					requestNewFrameRendering = false;
			};
			renderLoop();
		}
	}

	//Function computes default light direction:
	function computeDefaultLightDir()
	{
		if (coinData != null && coinData["userData"] != null && coinData["userData"]["coinSideData" + currentCoinSide] != null)
		{
			let userData = coinData["userData"]["coinSideData" + currentCoinSide];
			return [userData["lightDirectionX"], userData["lightDirectionY"], userData["lightDirectionZ"]];
		}
		else
			return [0.57, -0.57, -0.57];
	}

	//Function computes transformation for default view:
	function computeDefaultTransformation()
	{
		let objectCenterPos = [visWidget.colorImageSize[0] / 2, visWidget.colorImageSize[1] / 2];
		let objectRadius = Math.sqrt(visWidget.colorImageSize[0] * visWidget.colorImageSize[0] + visWidget.colorImageSize[1] * visWidget.colorImageSize[1]) / 2.0;
		let objectRotation = 0;
		if (coinData != null && coinData["processData"] != null && coinData["processData"]["coinSide" + currentCoinSide] != null)
		{
			let processData = coinData["processData"]["coinSide" + currentCoinSide];
			if(processData["centroidX"] != null)
				objectCenterPos[0] = processData["centroidX"];
			if(processData["centroidY"] != null)
				objectCenterPos[1] = processData["centroidY"];
			if(processData["maxRadius"] != null)
				objectRadius = processData["maxRadius"];
			objectRotation = coinData["userData"] != null && coinData["userData"]["coinSideData" + currentCoinSide] != null? coinData["userData"]["coinSideData" + currentCoinSide]["rotation"]: 0;
		}
		return visWidget.computeDefaultTransformation(objectCenterPos, objectRadius, objectRotation);
	}

	//Function resets transformation of the object:
	function resetTransformation()
	{
		visWidget.transformation = computeDefaultTransformation();
	}

	//Function handles click/touch on icon:
	function onIconClick(iconID)
	{
		//console.log("onIconClick(..): Icon \"" + iconID + "\" clicked.");
		if(animation.viewAlterationEnabled)  //Cancel animation
			animation.viewAlterationEnabled = false;
		if(iconID == "IconResetView")
		{
			animation.lightRotationEnabled = false;
			animation.enableViewAlteration(visWidget.transformation, computeDefaultTransformation(),
				visWidget.directionalLightDirection, computeDefaultLightDir());
			enableAnimation();  //Triggers also rendering
		}
		else if(iconID == "IconZoomIn" || iconID == "IconZoomOut")
		{
			//Get current scale:
			let currentScale = [  Math.sqrt(visWidget.transformation[0] * visWidget.transformation[0] + visWidget.transformation[1] * visWidget.transformation[1]),
				Math.sqrt(visWidget.transformation[4] * visWidget.transformation[4] + visWidget.transformation[5] * visWidget.transformation[5]) ];
			//Compute new scale to add:
			let scaleToAdd = [ iconID == "IconZoomOut"? (currentScale[0] > 0.1? 0.5: 1.0): (currentScale[0] < 10.0? 2.0: 1.0),
				iconID == "IconZoomOut"? (currentScale[1] > 0.1? 0.5: 1.0): (currentScale[1] < 10.0? 2.0: 1.0) ];
			//Use pivot point in the center of the canvas:
			let pivotPoint = [visWidget.glContext.canvas.width / 2, visWidget.glContext.canvas.height / 2];
			animation.enableViewAlteration(visWidget.transformation, visWidget.computeAddedScale(pivotPoint[0], pivotPoint[1], scaleToAdd[0], scaleToAdd[1]),
				visWidget.directionalLightDirection, visWidget.directionalLightDirection);
			enableAnimation();  //Triggers also rendering
		}
		else if (iconID == "IconFlip")
		{
			if (coinData != null && coinData["processData"] != null && coinData["processData"]["coinSide1"] != null)
			{
				let newCoinSide = currentCoinSide == 0 && coinData["processData"]["coinSide1"] ? 1 : 0;
				if (newCoinSide != currentCoinSide)
				{
					currentCoinSide = newCoinSide;
					moveLightOnLeftMouse = 1;
					loadOtherSide = true;
					animation.lightRotationEnabled = false;
					animation.enableViewAlteration(visWidget.transformation, computeDefaultTransformation(),
						visWidget.directionalLightDirection, computeDefaultLightDir());
					if(coinData["userData"] && coinData["userData"]["coinSideRotation"] == 'Vertical')  //flip around vertical axis
						animation.viewAlterationFlipHorizontal = true;
					else
						animation.viewAlterationFlipVertical = true;
					enableAnimation();  //Triggers also rendering
				}
			}
		}
		else if(iconID == "IconRule")
		{
			if (coinData != null && coinData["processData"] != null && coinData["processData"]["coinSide" + currentCoinSide] != null)
			{
				if(visWidget.gridRenderer.blendingFactor == 0.0)
					animation.viewAlterationScaleGridBlendIn = true;
				else
					animation.viewAlterationScaleGridBlendOut = true;
				animation.enableViewAlteration(visWidget.transformation, visWidget.transformation,
					visWidget.directionalLightDirection, visWidget.directionalLightDirection);
				enableAnimation();  //Triggers also rendering
			}
		}
		else if(iconID == "IconMoveObjectOrLight")
		{
			moveLightOnLeftMouse = moveLightOnLeftMouse == 0 ? 1 : 0;
			requestAnimationFrame(() => { visWidget.render() });  //trigger rendering
		}
	}

	//Function handles event for loaded image:
	function onImageLoadedAsync( img)
	{
		if(img.complete)
		{
			resetTransformation();
			requestAnimationFrame(() => { visWidget.render() });  //trigger rendering
		}
	}

	//Function loads image-file:
	function loadImageAsync(file, textureType)
	{
		let image = new Image();
		image.src = file;
		image.onload = function()
		{
			visWidget.loadImageToTexture(image, textureType);
			onImageLoadedAsync(image);
		}
	}

	//Function loads png-file:
	function loadBase64PngAsync(fileData, textureType)
	{
		let image = new Image();
		image.src = 'data:image/png;base64,' + fileData;
		image.crossOrigin = "anonymous";
		image.onload = function()
		{
			visWidget.loadImageToTexture(image, textureType);
			onImageLoadedAsync(image);
		}
	}

	//Function handles event for opening a new dataset:
	function loadDataset(albedoFilename, normalFilename)
	{
		try
		{
			visWidget.clearData();
			if(albedoFilename != null && normalFilename != null)
			{
				loadImageAsync(albedoFilename, visWidget.TEXTURE_TYPES.TEXTURE_TYPE_COLOR);
				loadImageAsync(normalFilename, visWidget.TEXTURE_TYPES.TEXTURE_TYPE_NORMAL);
				visWidget.enableIcons(false, false, function(){requestAnimationFrame(() => { visWidget.render() });});
			}
			else if(coinData != null && coinData["processData"] != null)
			{
				loadBase64PngAsync(coinData["processData"]["coinSide" + currentCoinSide]["albedo"], visWidget.TEXTURE_TYPES.TEXTURE_TYPE_COLOR);
				loadBase64PngAsync(coinData["processData"]["coinSide" + currentCoinSide]["normal"], visWidget.TEXTURE_TYPES.TEXTURE_TYPE_NORMAL);
				visWidget.pixelToMillimeter = coinData["processData"]["coinSide" + currentCoinSide]["pixelToMillimeter"];
				if(coinData["userData"] && coinData["userData"]["coinSideData" + currentCoinSide])
				{
					let coinSideData = coinData["userData"]["coinSideData" + currentCoinSide];
					let lightVec = new Vector3f(coinSideData["lightDirectionX"], coinSideData["lightDirectionY"], coinSideData["lightDirectionZ"]);
					visWidget.directionalLightDirection = lightVec.normalized().data;
				}
				if(coinData["userData"] != null && coinData["userData"]["coinSideData" + currentCoinSide] != null)
				{
					let intensity = coinData["userData"]["coinSideData" + currentCoinSide]["intensity"];
					visWidget.directionalLightColor = [intensity, intensity, intensity];
				}
				let twoSidedCoin = coinData["processData"] && coinData["processData"]["coinSide1"];
				let enableScaleVisualization = coinData["processData"] && coinData["processData"]["coinSide0"] && coinData["processData"]["coinSide0"]["pixelToMillimeter"];
				visWidget.enableIcons(enableScaleVisualization, twoSidedCoin, function(){requestAnimationFrame(() => { visWidget.render() });});
			}
		}
		catch (exception)
		{
			visWidget.clearData();
			console.log('loadDataset(..): Error:\n' + exception);
		}
	}

	//Function handles event for loading coin data from json:
	function loadJson(jsonFilename)
	{
		const getJSON = async url =>
		{
			try
			{
				const response = await fetch(url);
				if(!response.ok)
					throw "loadJson(..): Failed to load json, Error: " + response.statusText;
				const data = await response.json();
				return data;
			}
			catch(error)
			{
				return error;
			}
		}
		getJSON(jsonFilename).then(data =>
		{
			coinData = data;
			loadDataset(null, null);
		}).catch(error =>
		{
			throw error;
		});
	}

	//Function registers callbacks for image canvas:
	function registerCanvasCallbacks(canvas, visWidget)
	{
		let isTouch = (('ontouchstart' in window) || navigator.msMaxTouchPoints > 0);
		if(isTouch)
		{
			canvas.ontouchstart = function(ev)
			{
				if(animation.isRunningAndNotInterruptible())  //No interaction e.g. while flipping object
					return;
				if(animation.viewAlterationEnabled)  //Cancel animation
					animation.viewAlterationEnabled = false;
				animation.lightRotationEnabled = false;	//stop auto light rotation
				let rect = ev.touches[0].target.getBoundingClientRect();
				let idIcon = visWidget.iconRenderer.hitIcon(ev.touches[0].clientX - rect.left, rect.bottom - ev.touches[0].clientY, true);
				if(idIcon.length > 0)
				{
					onIconClick(idIcon);
					return;
				}
				if(moveLightOnLeftMouse == 1)
				{
					interactionMode = 1;
					let touchPos = [ev.touches[0].clientX, ev.touches[0].clientY];
					let relTouchPos = [touchPos[0] - rect.left, touchPos[1] - rect.top];  //Position within the element
					let rx = -(relTouchPos[0] / visWidget.glContext.canvas.width) * 2.0 + 1.0;
					let ry =  (relTouchPos[1] / visWidget.glContext.canvas.height) * 2.0 - 1.0;
					let lightVec = new Vector3f(rx, ry, -Math.sqrt(Math.max(0.0, 1.0 - (rx * rx + ry * ry))));
					visWidget.directionalLightDirection = lightVec.normalized().data;
					requestAnimationFrame(() => { visWidget.render() });
				}
				else
					interactionMode = 2;
				lastTouchPos = [ev.touches[0].clientX, ev.touches[0].clientY];
			};
			canvas.ontouchmove = function(ev)
			{
				let touchPos = [ev.touches[0].clientX, ev.touches[0].clientY];
				let movement = [touchPos[0] - lastTouchPos[0], touchPos[1] - lastTouchPos[1]];
				lastTouchPos = [touchPos[0], touchPos[1]];
				if(interactionMode == 1)  //set new light direction
				{
					ev.preventDefault(); //avoid scrolling
					let rect = ev.touches[0].target.getBoundingClientRect();
					let relTouchPos = [touchPos[0] - rect.left, touchPos[1] - rect.top];  //Position within the element
					let rx = -(relTouchPos[0] / visWidget.glContext.canvas.width) * 2.0 + 1.0;
					let ry =  (relTouchPos[1] / visWidget.glContext.canvas.height) * 2.0 - 1.0;
					let lightVec = new Vector3f(rx, ry, -Math.sqrt(Math.max(0.0, 1.0 - (rx * rx + ry * ry))));
					visWidget.directionalLightDirection = lightVec.normalized().data;
					requestAnimationFrame(() => { visWidget.render() });
				}
				else if(interactionMode == 2) //move object
				{
					ev.preventDefault(); //avoid scrolling
					visWidget.addTranslation(movement[0], -movement[1]);
					requestAnimationFrame(() => { visWidget.render() });
				}
			};
			canvas.ontouchend = function(ev)
			{
				interactionMode = 0;
			};
			canvas.ontouchcancel = function(ev)
			{
				interactionMode = 0;
			};
		}
		else
		{
			canvas.onmousedown = function(ev)
			{
				if(animation.isRunningAndNotInterruptible())  //No interaction e.g. while flipping object
					return;
				if(animation.viewAlterationEnabled)  //Cancel animation
					animation.viewAlterationEnabled = false;
				animation.lightRotationEnabled = false;  //stop auto light rotation
				interactionMode = 0;
				if(ev.which == 1) //mouse left
				{
					let rect = ev.target.getBoundingClientRect();
					let idIcon = visWidget.iconRenderer.hitIcon(ev.clientX - rect.left, rect.bottom - ev.clientY, true);
					if(idIcon.length > 0)
					{
						onIconClick(idIcon);
						return;
					}
					if(moveLightOnLeftMouse == 1)
					{
						interactionMode = 1;
						let relMousePos = [ev.clientX - rect.left, ev.clientY - rect.top];  //Position within the element
						let rx = -(relMousePos[0] / visWidget.glContext.canvas.width) * 2.0 + 1.0;
						let ry =  (relMousePos[1] / visWidget.glContext.canvas.height) * 2.0 - 1.0;
						let lightVec = new Vector3f(rx, ry, -Math.sqrt(Math.max(0.0, 1.0 - (rx * rx + ry * ry))));
						visWidget.directionalLightDirection = lightVec.normalized().data;
						requestAnimationFrame(() => { visWidget.render() });
					}
					else
						interactionMode = 2;
				}
				else if(ev.which == 3)  //mouse right
					interactionMode = 2;
				mouseWheelZoomAllowed = true;  //zoom with mouse wheel is now allowed
			};
			canvas.onmousemove = function(ev)
			{
				let rect = ev.target.getBoundingClientRect();
				let tooltip = document.getElementById("glcanvas_tooltip");
				let hitIconID = visWidget.iconRenderer.hitIcon(ev.clientX - rect.left, rect.bottom - ev.clientY, false);
				if(hitIconID.length > 0)
				{
					let nIcons = visWidget.iconRenderer.icons? visWidget.iconRenderer.icons.length: 0;
					let toolTipText = visWidget.iconRenderer.getIconToolTipText(hitIconID);
					if(nIcons > 0 && toolTipText.length > 0)
					{
						tooltip.textContent = toolTipText;
						tooltip.style.visibility = 'visible';
						let x = 0, y = 0;
						for(let i = 0; i < nIcons; ++i)
						{
							x = Math.max(x, visWidget.iconRenderer.icons[i].x + visWidget.iconRenderer.icons[i].w);
							y = Math.max(y, visWidget.iconRenderer.icons[i].y);
						}
						tooltip.style.left = "" + (x + 10) + "px";
						tooltip.style.top = "" + (visWidget.glContext.canvas.height - 72) + "px";
					}
					else
						tooltip.style.visibility='hidden';
					enableCursorStyle("pointer");
				}
				else
				{
					tooltip.style.visibility='hidden';
					enableCursorStyle("grab");
				}
				if(interactionMode == 1)  //set new light direction
				{
					let relMousePos = [ev.clientX - rect.left, ev.clientY - rect.top];  //Position within the element
					let rx = -(relMousePos[0] / visWidget.glContext.canvas.width) * 2.0 + 1.0;
					let ry =  (relMousePos[1] / visWidget.glContext.canvas.height) * 2.0 - 1.0;
					let lightVec = new Vector3f(rx, ry, -Math.sqrt(Math.max(0.0, 1.0 - (rx * rx + ry * ry))));
					visWidget.directionalLightDirection = lightVec.normalized().data;
					requestAnimationFrame(() => { visWidget.render() });
				}
				else if(interactionMode == 2) //move object
				{
					visWidget.addTranslation(ev.movementX, -ev.movementY);
					requestAnimationFrame(() => { visWidget.render() });
				}
			};
			canvas.onmouseup = function(ev)
			{
				interactionMode = 0;
			};
			canvas.onmouseenter = function(ev)
			{
				interactionMode = 0;
				requestAnimationFrame(() => { visWidget.render() });  //trigger rendering
			};
			canvas.onmouseout = function(ev)
			{
				interactionMode = 0;
				mouseWheelZoomAllowed = false;
				requestAnimationFrame(() => { visWidget.render() });  //trigger rendering
			};
			canvas.addEventListener("wheel", function(ev)
			{
				if(animation.isRunningAndNotInterruptible())  //No interaction e.g. while flipping object
					return;
				if(mouseWheelZoomAllowed)
				{
					if(animation.viewAlterationEnabled)  //Cancel animation
						animation.viewAlterationEnabled = false;
					animation.lightRotationEnabled = false;	//stop auto light rotation
					ev.preventDefault();
					//Get current scale:
					let currentScale = [  Math.sqrt(visWidget.transformation[0] * visWidget.transformation[0] + visWidget.transformation[1] * visWidget.transformation[1]),
						Math.sqrt(visWidget.transformation[4] * visWidget.transformation[4] + visWidget.transformation[5] * visWidget.transformation[5]) ];
					//Compute new scale to add:
					let wheelSteps = 1; //e.deltaY has +/-3 on Firefox, +/-100 on Chrome, ....
					let scaleToAdd = [ Math.sign(ev.deltaY) > 0? (currentScale[0] > 0.1? Math.pow(0.9, wheelSteps): 1.0): (currentScale[0] < 10.0? Math.pow(1.1, wheelSteps): 1.0),
						Math.sign(ev.deltaY) > 0? (currentScale[1] > 0.1? Math.pow(0.9, wheelSteps): 1.0): (currentScale[1] < 10.0? Math.pow(1.1, wheelSteps): 1.0) ];
					//Compute pivot point which will stay under the mouse position:
					let rect = ev.target.getBoundingClientRect();
					let relMousePos = [ev.clientX - rect.left, ev.clientY - rect.top];  //Position within the element
					let pivotPoint = [relMousePos[0], visWidget.glContext.canvas.height - relMousePos[1]];
					visWidget.transformation = visWidget.computeAddedScale(pivotPoint[0], pivotPoint[1], scaleToAdd[0], scaleToAdd[1]);
					requestAnimationFrame(() => { visWidget.render() });  //trigger rendering
				}
			});
		}
		animation = new Animation();
		enableAnimation();
		visWidget.callbackResize = function()
		{
			let tooltip = document.getElementById("glcanvas_tooltip");
			/* Code added by programmfabrik */
			if (!tooltip) {
				// When the tooltip element is no longer in the DOM, it means that it was removed, so we remove the resize event listener
				mainContainer.removeEventListener("resize", resizeFunction);
				return;
			}
			/* -- */
			tooltip.style.visibility='hidden';
			resetTransformation();
		}
	}

	/** ViewerMain is not used by the coin plugin made by Programmfabrik */
	// Main function:
	function ViewerMain()
	{
		try
		{
			//Insert html and css code:
			let htmlGenerator = new HtmlGenerator();
			let styleSheet = document.createElement("style");
			styleSheet.type = "text/css";
			styleSheet.innerText = htmlGenerator.computeCssCode();
			document.head.appendChild(styleSheet);
			let parentName = script.getAttribute('parent');
			let albedoFilename = script.getAttribute('albedo');
			let normalFilename = script.getAttribute('normal');
			let coinDataFilename = script.getAttribute('coinData');
			let element = document.getElementById(parentName);
			document.getElementById(parentName).insertAdjacentHTML('afterbegin', htmlGenerator.computeHtmlCode());
			//Assign elements to widgets:
			canvasLeft = document.querySelector("#glcanvas_left");
			//Init left visualization widget:
			visWidget = new VisualizationWidget(canvasLeft);
			registerCanvasCallbacks(canvasLeft, visWidget);
			window.addEventListener('resize', function()
			{
				requestAnimationFrame(() => { visWidget.render() });
			});
			canvasLeft.addEventListener('contextmenu', function(e)  //don't open menu with mouse right click
			{
				e.preventDefault();
			});
			//load data:
			if(typeof embeddedCoinData !== 'undefined') //data is embedded as json string
			{
				coinData = embeddedCoinData;
				loadDataset(null, null);
			}
			else if(coinDataFilename != null)  //data is external json file
				loadJson(coinDataFilename);
			else
				loadDataset(albedoFilename, normalFilename);
		}
		catch(exception)
		{
			console.log('Error at ViewerMain(..): ' + exception); //No error, do nothing
		}
	}
	/*** --- ***/

	/**
	 * Code added by Programmfabrik.
	 */

	var mainContainer;
	var resizeFunction;

	/* Copy of ViewerMain but removing the not necessary stuff by the plugin. */
	function init(container) {
		mainContainer = container;
		//Insert html and css code:
		let htmlGenerator = new HtmlGenerator();

		let styleSheet = document.createElement("style");
		styleSheet.type = "text/css";
		styleSheet.innerText = htmlGenerator.computeCssCode();
		mainContainer.appendChild(styleSheet);

		mainContainer.insertAdjacentHTML('afterbegin', htmlGenerator.computeHtmlCode());
		canvasLeft = mainContainer.querySelector("#glcanvas_left");
		visWidget = new VisualizationWidget(canvasLeft);
		registerCanvasCallbacks(canvasLeft, visWidget);
		resizeFunction = function() {
			requestAnimationFrame(() => { visWidget.render() });
		};
		mainContainer.addEventListener('resize', resizeFunction)
		canvasLeft.addEventListener('contextmenu', function(e)  //don't open menu with mouse right click
		{
			e.preventDefault();
		});
	}

	function show(newCoinData) {
		coinData = newCoinData
		loadDataset(null, null);
	}

	return {
		init: init,
		show: show
	};

}();